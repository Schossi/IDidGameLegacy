// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart() {
  this.x = 0;
  delete this.x;
}
var A = new dart;
var B = new dart;
var C = new dart;
var D = new dart;
var E = new dart;
var F = new dart;
var G = new dart;
var H = new dart;
var J = new dart;
var K = new dart;
var L = new dart;
var M = new dart;
var N = new dart;
var O = new dart;
var P = new dart;
var Q = new dart;
var R = new dart;
var S = new dart;
var T = new dart;
var U = new dart;
var V = new dart;
var W = new dart;
var X = new dart;
var Y = new dart;
var Z = new dart;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = Object.create(null);

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["Area", "Dart/area.dart", , D, {
  "^": "",
  Area: {
    "^": "Object;context>,audioSource,audioSound,particles,targetColor<,currentColor,timeToLive@,completed>,type>,state*,moved,groundTile<,groundMaterial,feature<,featureObj,featureSphere<,featureCylinder,featureTargetSize<,counter?,x*,y*,enemyType<",
    Update$0: function() {
      var t1, t2, t3, r, g, b, tr, tg, tb, t4, t5, t6;
      t1 = this.audioSource;
      t2 = this.groundTile.position.storage;
      J.setPosition$3$x(t1, t2[0], t2[1], t2[2]);
      t1 = this.feature;
      if (t1 != null) {
        if (this.type === 10) {
          t2 = this.context.playerPosition;
          t1 = t1.position;
          t2.toString;
          t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t3.setFrom$1(t2);
          t1 = t3.sub$1(t1);
          t1 = t1.get$length(t1);
          t3 = this.featureSphere.radius;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = t1 < t3;
          t1 = t3;
        } else
          t1 = false;
        if (t1) {
          this.context.playerInBubble = true;
          t1 = this.feature;
          t1.renderDepth = -11;
          t1.material.side = 1;
          this.particles.sys.renderDepth = -12;
        } else {
          t1 = this.feature;
          t1.renderDepth = -2;
          t1.material.side = 0;
          this.particles.sys.renderDepth = -1;
        }
      }
      switch (this.state) {
        case 10:
          t1 = this.currentColor;
          r = t1._r;
          g = t1._g;
          b = t1._b;
          t2 = this.targetColor;
          tr = t2._r;
          tg = t2._g;
          tb = t2._b;
          t2 = this.moved;
          t3 = t2 ? 1 : -1;
          t4 = t2 ? 1 : -1;
          t2 = t2 ? 1 : -1;
          t1.setRGB$3(P.min(1, P.max(r + (1 - tr) / 100 * t3, 0)), P.min(1, P.max(g + (1 - tg) / 100 * t4, 0)), P.min(1, P.max(b + (1 - tb) / 100 * t2, 0)));
          t2 = this.groundMaterial;
          t2.get$color(t2).setHex$1(t1.getHex$0());
          t1 = this.groundTile.position;
          t2 = this.moved ? -1 : 1;
          t3 = this.type === 10 ? 0.1 : -0.1;
          t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t4.setValues$3(0, t2 * t3, 0);
          t1.add$1(0, t4);
          if (this.counter === 100) {
            if (!this.moved) {
              t1 = this.type;
              if (t1 === 10) {
                t1 = this.context;
                t2 = this.audioSource;
                this.audioSound = t1.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t2), "safe", true);
                t2 = S.SphereGeometry$(this.featureTargetSize, 16, 16, 0, 6.283185307179586, 0, 3.141592653589793);
                this.featureSphere = t2;
                t1 = S.Color$($.get$Area_safeColor().getHex$0());
                t3 = S.Color$(16777215);
                t4 = S.Color$(0);
                t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
                t5.setValues$3(1, 1, 1);
                t6 = $.MaterialCount;
                $.MaterialCount = t6 + 1;
                t6 = S.Mesh$(t2, new S.MeshLambertMaterial(null, t1, t3, t4, false, t5, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 0.4, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null));
                this.feature = t6;
                t6.renderDepth = -2;
                t6 = t6.position;
                t5 = this.groundTile.position.storage;
                t6.setValues$3(t5[0], t5[1] + 5, t5[2]);
                t5 = this.feature;
                t6 = t5.material;
                t6.transparent = true;
                t6.side = 0;
                t5.scale.setValues$3(0.000001, 0.000001, 0.000001);
              } else if (t1 === 20) {
                t1 = S.CylinderGeometry$(this.featureTargetSize, 23, 10.1, 16, 1, false);
                this.featureCylinder = t1;
                t2 = S.Color$(0);
                t3 = S.Color$(16777215);
                t4 = S.Color$(0);
                t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
                t5.setValues$3(1, 1, 1);
                t6 = $.MaterialCount;
                $.MaterialCount = t6 + 1;
                t6 = S.Mesh$(t1, new S.MeshLambertMaterial(null, t2, t3, t4, false, t5, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null));
                this.feature = t6;
                t6 = t6.position;
                t5 = this.groundTile.position.storage;
                t6.setValues$3(t5[0], t5[1], t5[2]);
                this.feature.scale.setValues$3(0.000001, 1, 0.000001);
              }
              this.featureObj = this.context.drawingContext.addMesh$1(this.feature);
              t1 = this.particles;
              t2 = t1.sys;
              t2.position = t2.position.$add(0, t1.parent.get$groundTile().position);
              t2 = t1.sys;
              t3 = t2.position.storage;
              t3[1] = t3[1] + 5;
              t1.drwContext.scene.add$1(0, t2);
              t1.active = true;
            }
            this.counter = 0;
            if (this.timeToLive === 0) {
              t1 = this.groundTile.position;
              t2 = this.context;
              t1.storage[1] = t2.groundHeight - 5;
              this.state = 15;
              this.completed = true;
              t2 = this.x;
              t1 = this.y;
              J.remove$1$ax($.get$Area_reservedTiles(), J.$add$ns(J.toString$0(t2), J.toString$0(t1)));
            } else
              this.state = 11;
          }
          break;
        case 11:
          if (this.featureSphere != null) {
            t1 = t1.scale;
            t2 = this.moved ? -0.02 : 0.02;
            t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
            t3.setValues$3(t2, t2, t2);
            t1.add$1(0, t3);
          } else if (this.featureCylinder != null) {
            t1 = t1.scale;
            t2 = this.moved;
            t3 = t2 ? -0.02 : 0.02;
            t2 = t2 ? -0.02 : 0.02;
            t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
            t4.setValues$3(t3, 0, t2);
            t1.add$1(0, t4);
          }
          if (this.counter === 50) {
            this.counter = 0;
            if (this.timeToLive === 0) {
              if (this.type === 10 && this.audioSound != null)
                this.audioSound.stop$0(0);
              t1 = this.context.drawingContext;
              t2 = this.featureObj;
              t1.scene.remove$1(0, t2);
              t2 = this.particles;
              t1 = t2.drwContext;
              t2 = t2.sys;
              t1.scene.remove$1(0, t2);
              this.state = 10;
            } else {
              this.moved = true;
              this.state = 15;
            }
          }
          break;
        case 20:
          if (this.type === 20)
            if (this.counter >= 200) {
              this.counter = 150 + Z.randInt(5, P.min(this.context.level, 10) * 5);
              t1 = this.context;
              t2 = this.audioSource;
              this.audioSound = t1.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t2), "spawn", false);
              if (this.enemyType === 0) {
                t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
                t1.setValues$3(1.2, 1.2, 1.2);
                new X.Follower(null, this, null, null, null, 0, 0, 1500, t1, null, 0.5, false, false, false, false, null, null, null, null, false, null).Follower$1(this);
              } else
                U.Roller$(this);
            }
          break;
      }
      ++this.counter;
      this.particles.update$0(0);
    },
    Area$2: function(type, context) {
      var t1, t2, t3;
      if (this.type === 10)
        this.timeToLive = 1;
      this.context.areas.push(this);
      while (true) {
        if (!J.$lt$n(this.x, 0)) {
          t1 = this.x;
          t2 = this.y;
          t2 = J.contains$1$asx($.get$Area_reservedTiles(), J.$add$ns(J.toString$0(t1), J.toString$0(t2)));
          t1 = t2;
        } else
          t1 = true;
        if (!t1)
          break;
        this.x = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 6)));
        this.y = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 6)));
      }
      t1 = this.x;
      t2 = this.y;
      $.get$Area_reservedTiles().push(J.$add$ns(J.toString$0(t1), J.toString$0(t2)));
      t2 = this.context.ground;
      t1 = this.x;
      t2.length;
      if (t1 >>> 0 !== t1 || t1 >= 6)
        return H.ioore(t2, t1);
      t1 = t2[t1];
      t2 = this.y;
      t1.length;
      if (t2 >>> 0 !== t2 || t2 >= 6)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      this.groundTile = t2;
      this.groundMaterial = t2.material;
      t1 = this.type;
      this.targetColor = t1 === 10 ? $.get$Area_safeColor() : $.get$Area_spawnColor();
      this.featureTargetSize = t1 === 10 ? 24.5 : 23;
      this.particles = S.AreaParticles$(this);
      t2 = this.context.audioManager.makeSource$1(C.JSString_methods.$add(C.JSString_methods.$add("Area", J.toString$0(this.x)), J.toString$0(this.y)));
      this.audioSource = t2;
      t1 = this.type;
      t3 = $.AudioManager_positionalScale;
      if (t1 === 10)
        J.set$volume$x(t2, 10 * t3);
      else
        J.set$volume$x(t2, 30 * t3);
    },
    static: {"^": "Area_reservedTiles,Area_safeColor,Area_spawnColor,Area_small", Area$: function(type, context) {
        var t1 = new D.Area(context, null, null, null, null, S.Color$(16777215), 2, false, type, 10, false, null, null, null, null, null, null, null, 0, -1, -1, 0);
        t1.Area$2(type, context);
        return t1;
      }}
  }
}],
["AreaParticles", "Dart/area_particles.dart", , S, {
  "^": "",
  AreaParticles: {
    "^": "Object;partCount,geo,mat,sys,parent*,drwContext,active",
    update$0: function(_) {
      var t1, temp, i, part, t2, t3, t4;
      if (!this.active)
        return;
      t1 = this.parent;
      if (t1.get$type(t1) === 10) {
        t1 = this.sys.rotation.storage;
        t1[1] = t1[1] + 0.005;
      }
      this.sys.scale = this.parent.get$feature().scale;
      for (t1 = this.partCount, temp = null, i = 0; i < t1; ++i) {
        part = J.$index$asx(this.geo.vertices, i);
        t2 = this.parent;
        if (t2.get$type(t2) === 10) {
          t2 = J.getInterceptor$asx(part);
          t3 = t2.get$length(part);
          t4 = this.parent.get$featureTargetSize();
          if (typeof t4 !== "number")
            return t4.$sub();
          if (J.$gt$n(t3, t4 - 1)) {
            t2.set$x(part, 0 + C.C__JSRandom.nextDouble$0() * 10);
            if (C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 2))) === 1)
              t2.set$x(part, J.$negate$n(t2.get$x(part)));
            t2.set$z(part, 0 + C.C__JSRandom.nextDouble$0() * 10);
            if (C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 2))) === 1)
              t2.set$z(part, J.$negate$n(t2.get$z(part)));
            t2.normalize$0(part);
            t2.set$y(part, 0 + C.C__JSRandom.nextDouble$0());
          }
          temp = new T.Vector3(new Float32Array(3));
          temp.setFrom$1(part);
          temp.normalize$0(0);
          t2.add$1(part, temp.$mul(0, 0.05));
        } else {
          t2 = J.getInterceptor$x(part);
          t3 = t2.get$y(part);
          t4 = J.abs$0$n(t2.get$x(part));
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (J.$gt$n(t3, 45 - t4 - J.abs$0$n(t2.get$z(part))))
            t2.set$y(part, 0);
          t3 = t2.get$y(part);
          t4 = J.$add$ns(J.abs$0$n(t2.get$x(part)), J.abs$0$n(t2.get$z(part)));
          if (typeof t4 !== "number")
            return H.iae(t4);
          t2.set$y(part, J.$add$ns(t3, 0.1 + (10 - t4) / 200));
        }
      }
      this.geo.get$_data().$indexSet(0, "verticesNeedUpdate", true);
    },
    remove$0: function(_) {
      var t1, t2;
      t1 = this.drwContext;
      t2 = this.sys;
      t1.scene.remove$1(0, t2);
    },
    AreaParticles$1: function($parent) {
      var t1, t2, i, pos, t3;
      t1 = this.parent;
      this.drwContext = t1.get$context(t1).drawingContext;
      t1 = S.Color$(this.parent.get$targetColor().getHex$0());
      t2 = $.MaterialCount;
      $.MaterialCount = t2 + 1;
      this.mat = new S.ParticleBasicMaterial(t1, null, 0.8, true, 0, true, "", t2, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t1 = this.parent;
      t1 = t1.get$type(t1);
      t2 = this.mat;
      if (t1 === 10)
        t2.opacity = 0.05;
      else
        t2.opacity = 0.3;
      this.geo = S.Geometry$();
      for (t1 = this.partCount, i = 0; i < t1; ++i) {
        t2 = new Float32Array(3);
        pos = new T.Vector3(t2);
        t2[0] = 0 + C.C__JSRandom.nextDouble$0() * 10;
        if (C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 2))) === 1)
          t2[0] = -t2[0];
        t2[2] = 0 + C.C__JSRandom.nextDouble$0() * 10;
        if (C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 2))) === 1)
          t2[2] = -t2[2];
        pos.normalize$0(0);
        t2 = this.parent.get$featureTargetSize();
        if (typeof t2 !== "number")
          return t2.$negate();
        t2 = -t2 + 2;
        t3 = this.parent.get$featureTargetSize();
        if (typeof t3 !== "number")
          return t3.$sub();
        pos = pos.$mul(0, t2 + C.C__JSRandom.nextDouble$0() * (t3 - 2 - t2));
        t2 = this.parent;
        if (t2.get$type(t2) === 10) {
          t2 = this.parent.get$featureTargetSize();
          t3 = C.C__JSRandom.nextDouble$0();
          if (typeof t2 !== "number")
            return t2.$sub();
          pos.storage[1] = 0 + t3 * (t2 - 0);
        } else
          pos.storage[1] = -40 + C.C__JSRandom.nextDouble$0() * 40;
        J.add$1$ax(this.geo.vertices, pos);
      }
      t1 = S.ParticleSystem$(this.geo, this.mat);
      this.sys = t1;
      t1.renderDepth = -1;
    },
    static: {AreaParticles$: function($parent) {
        var t1 = new S.AreaParticles(500, null, null, null, $parent, null, false);
        t1.AreaParticles$1($parent);
        return t1;
      }}
  },
  EnemyParticles: {
    "^": "Object;partCount,partPerEnemy,partPos,size*,geo,mat,sys,drwContext",
    Reserve$0: function() {
      var t1, t2, subList;
      t1 = this.partPos;
      t2 = this.partPerEnemy;
      if (t1 + t2 >= this.partCount) {
        this.partPos = 0;
        t1 = 0;
      }
      subList = J.sublist$2$ax(this.geo.vertices, t1, t1 + t2);
      this.partPos = this.partPos + this.partPerEnemy;
      return subList;
    },
    remove$0: function(_) {
      var t1, t2;
      t1 = this.drwContext;
      t2 = this.sys;
      t1.scene.remove$1(0, t2);
    },
    EnemyParticles$4: function(drwContext, _color, partCount, size) {
      var t1, t2, t3, pos, i;
      t1 = this.size;
      t2 = S.Color$(_color);
      t3 = $.MaterialCount;
      $.MaterialCount = t3 + 1;
      t3 = new S.ParticleBasicMaterial(t2, null, t1, true, 0, true, "", t3, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      this.mat = t3;
      t3.opacity = 1;
      this.geo = S.Geometry$();
      pos = new T.Vector3(new Float32Array(H._checkLength(3)));
      pos.setValues$3(0, -100, 0);
      for (t1 = this.partCount, i = 0; i < t1; ++i) {
        t2 = this.geo.vertices;
        t3 = new T.Vector3(new Float32Array(3));
        t3.setFrom$1(pos);
        J.add$1$ax(t2, t3);
      }
      t1 = S.ParticleSystem$(this.geo, this.mat);
      this.sys = t1;
      t1.renderDepth = -1;
      this.drwContext.scene.add$1(0, t1);
    },
    static: {EnemyParticles$: function(drwContext, _color, partCount, size) {
        var t1 = new S.EnemyParticles(partCount, 15, 0, size, null, null, null, drwContext);
        t1.EnemyParticles$4(drwContext, _color, partCount, size);
        return t1;
      }}
  }
}],
["Controls", "Dart/Controls.dart", , Z, {
  "^": "",
  Keyboard: {
    "^": "Object;_keys",
    Keyboard$1: function(_element) {
      var t1 = H.setRuntimeTypeInfo(new W._EventStream(window, "keydown", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new Z.Keyboard_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, "keyup", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new Z.Keyboard_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {Keyboard$: function(_element) {
        var t1 = new Z.Keyboard(P.HashMap_HashMap(null, null, null, P.$int, P.$int));
        t1.Keyboard$1(_element);
        return t1;
      }}
  },
  Keyboard_closure: {
    "^": "Closure:50;this_0",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.this_0._keys;
      t2 = J.getInterceptor$x(e);
      if (!t1.containsKey$1(0, t2.get$keyCode(e)))
        t1.$indexSet(0, t2.get$keyCode(e), t2.get$timeStamp(e));
      if (t2.get$keyCode(e) === 32) {
        t2.preventDefault$0(e);
        return false;
      }
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  Keyboard_closure0: {
    "^": "Closure:50;this_1",
    call$1: [function(e) {
      this.this_1._keys.remove$1(0, J.get$keyCode$x(e));
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  LockedMouse: {
    "^": "Object;_buttons,ClickCallback,LockCallback,UnlockCallback,Position,Delta,canvas,active,resetNextDelta,client>,offset>,movement>,isFirefox,ffPointerLock",
    ClickCallback$1: function(arg0) {
      return this.ClickCallback.call$1(arg0);
    },
    LockCallback$0: function() {
      return this.LockCallback.call$0();
    },
    UnlockCallback$0: function() {
      return this.UnlockCallback.call$0();
    },
    onContextMenu$1: [function(_, e) {
      J.preventDefault$0$x(e);
      return false;
    }, "call$1", "get$onContextMenu", 2, 0, 51, 17],
    onMouseDown$1: [function(_, e) {
      var t1, t2;
      if (this.ClickCallback$1(e) === true)
        this.canvas.requestPointerLock();
      t1 = this._buttons;
      t2 = J.getInterceptor$x(e);
      if (!t1.containsKey$1(0, t2.get$button(e)))
        t1.$indexSet(0, t2.get$button(e), t2.get$timeStamp(e));
      if (t2.get$button(e) === 2)
        t2.preventDefault$0(e);
    }, "call$1", "get$onMouseDown", 2, 0, 51, 17],
    onMouseUp$1: [function(_, e) {
      var t1 = J.getInterceptor$x(e);
      this._buttons.remove$1(0, t1.get$button(e));
      if (t1.get$button(e) === 2)
        t1.preventDefault$0(e);
    }, "call$1", "get$onMouseUp", 2, 0, 51, 17],
    onFFMove$2: [function(_movX, _movY) {
      var t1 = H.setRuntimeTypeInfo(new P.Point(_movX, _movY), [null]);
      this.movement = t1;
      if (this.active) {
        this.Position = this.Position.$add(0, t1);
        this.Delta = this.Delta.$add(0, this.movement);
        if (this.resetNextDelta) {
          this.Delta = H.setRuntimeTypeInfo(new P.Point(0, 0), [null]);
          this.resetNextDelta = false;
        }
      }
    }, "call$2", "get$onFFMove", 4, 0, 52, 53, 54],
    onFFLock$0: [function() {
      this.active = true;
      if (this.LockCallback != null)
        this.LockCallback$0();
    }, "call$0", "get$onFFLock", 0, 0, 55],
    onFFUnlock$0: [function() {
      this.active = false;
      if (this.UnlockCallback != null)
        this.UnlockCallback$0();
    }, "call$0", "get$onFFUnlock", 0, 0, 55],
    onMove$1: [function(e) {
      var t1 = J.getInterceptor$x(e);
      this.client = t1.get$client(e);
      this.offset = t1.get$offset(e);
      this.movement = t1.get$movement(e);
      if (this.active) {
        this.Position = this.Position.$add(0, t1.get$movement(e));
        this.Delta = this.Delta.$add(0, t1.get$movement(e));
        if (this.resetNextDelta) {
          this.Delta = H.setRuntimeTypeInfo(new P.Point(0, 0), [null]);
          this.resetNextDelta = false;
        }
      }
    }, "call$1", "get$onMove", 2, 0, 51, 17],
    LockedMouse$2: function(_canvas, ClickCallback) {
      var t1, t2;
      this.canvas = _canvas;
      t1 = J.getInterceptor$x(_canvas);
      t2 = t1.get$onMouseDown(_canvas);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(this.get$onMouseDown(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = t1.get$onMouseUp(_canvas);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(this.get$onMouseUp(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = t1.get$onContextMenu(_canvas);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(this.get$onContextMenu(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      if (this.isFirefox)
        this.ffPointerLock = P.JsObject_JsObject(J.$index$asx($.get$context(), "FFPointerLock"), [this.canvas, this.get$onFFMove(), this.get$onFFLock(), this.get$onFFUnlock()]);
      else {
        t1 = t1.get$onMouseMove(_canvas);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$onMove()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
    }
  }
}],
["Drawable", "Dart/drawable.dart", , Q, {
  "^": "",
  Drawable: {
    "^": "Object;x*,y*,spriteX,spriteY,height,width',size*,content',colorS,textAlign,type>,visible*,alpha*,rectangle<",
    SetColor$1: function(color) {
      var t1 = S.Color$(color);
      this.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t1._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._b * 255)) + ")";
    },
    Draw$2: function(context, sprite) {
      var t1, t2, t3;
      if (!this.visible)
        return;
      t1 = J.getInterceptor$x(context);
      t1.set$fillStyle(context, this.colorS);
      t1.set$globalAlpha(context, this.alpha);
      switch (this.type) {
        case 10:
          t2 = this.width;
          t3 = this.height;
          t1.drawImageScaledFromSource$9(context, sprite, this.spriteX, this.spriteY, t2, t3, this.x, this.y, t2, t3);
          break;
        case 20:
          t1.set$textAlign(context, this.textAlign);
          t1.set$font(context, "bold " + J.toString$0(this.size) + "px Consolas");
          t1.fillText$3(context, this.content, this.x, this.y);
          break;
        case 30:
          t1.fillRect$4(context, this.x, this.y, this.width, this.height);
          break;
      }
    },
    Drawable$rect$6$alpha: function(x, y, height, width, color, alpha) {
      var t1;
      this.type = 30;
      t1 = S.Color$(color);
      this.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t1._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._b * 255)) + ")";
      this.rectangle = P.Rectangle$(this.x, this.y, this.width, this.height, null);
    },
    static: {Drawable$rect: function(x, y, height, width, color, alpha) {
        var t1 = new Q.Drawable(x, y, null, null, height, width, null, null, "", null, null, true, alpha, null);
        t1.Drawable$rect$6$alpha(x, y, height, width, color, alpha);
        return t1;
      }}
  }
}],
["DrawingContext", "Dart/drawing_context.dart", , S, {
  "^": "",
  DrawingContext: {
    "^": "Object;domParent,scene,renderer,canvas,cam,ambLight,topLight,lights<,canvas2d,context2d,spriteImage2d,loaded2d,drawables2d,width',height",
    setLightColor$1: function(_color) {
      var t1;
      for (t1 = this.lights, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        J.get$color$x(t1.__internal$_current).setHex$1(_color);
    },
    addMesh$1: function(_mesh) {
      var obj = S.Object3D$();
      obj.add$1(0, _mesh);
      obj.receiveShadow = false;
      obj.castShadow = false;
      this.scene.add$1(0, obj);
      return obj;
    },
    addDrawable2d$2: function(d, atStart) {
      var t1 = this.drawables2d;
      if (atStart)
        C.JSArray_methods.insert$2(t1, 0, d);
      else
        t1.push(d);
      return d;
    },
    addDrawable2d$1: function(d) {
      return this.addDrawable2d$2(d, false);
    },
    remove$1: function(_, _object) {
      this.scene.remove$1(0, _object);
    },
    draw$0: function() {
      this.renderer._render$2(this.scene, this.cam);
      if (this.loaded2d) {
        J.clearRect$4$x(this.context2d, 0, 0, 800, 600);
        C.JSArray_methods.forEach$1(this.drawables2d, new S.DrawingContext_draw_closure(this));
      }
    },
    DrawingContext$4: function(domParent, width, height, spritePath) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, dirLight;
      P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1 = S.Color$(0);
      t2 = new S.WebGLRendererInfo(null, null);
      t2.WebGLRendererInfo$0();
      t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t4 = S.Frustum$();
      t5 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t5.setIdentity$0();
      t6 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t6.setIdentity$0();
      t6 = new S.WebGLRenderer(null, null, "highp", t1, 0, null, true, true, true, true, false, true, true, true, true, true, true, true, false, false, false, false, true, false, false, 1, 2, 8, 4, true, [], [], t2, [], 0, null, null, -1, null, null, 0, 0, t3, -1, -1, -1, -1, -1, -1, -1, -1, null, null, null, null, 0, 0, 0, 0, 0, 0, t4, t5, t6, new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))), null, true, null, null, null, null, null, null, null, null, null, null, null, null);
      t6.WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$devicePixelRatio$precision$premultipliedAlpha$preserveDrawingBuffer$stencil(true, true, null, 0, 0, null, "highp", true, false, true);
      t5 = this.width;
      t4 = this.height;
      J.set$width$x(t6.canvas, J.toInt$0$n(J.$mul$ns(t5, t6.devicePixelRatio)));
      t3 = t6.canvas;
      t2 = t6.devicePixelRatio;
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      J.set$height$x(t3, C.JSNumber_methods.toInt$0(t4 * t2));
      J.set$width$x(t6.canvas.style, H.S(t5) + "px");
      J.set$height$x(t6.canvas.style, "" + t4 + "px");
      t4 = J.get$width$x(t6.canvas);
      t5 = J.get$height$x(t6.canvas);
      t6._viewportX = 0;
      t6._viewportY = 0;
      t6._viewportWidth = t4 !== -1 ? t4 : J.get$width$x(t6.canvas);
      t1 = t5 !== -1 ? t5 : J.get$height$x(t6.canvas);
      t6._viewportHeight = t1;
      J.viewport$4$x(t6._gl, t6._viewportX, t6._viewportY, t6._viewportWidth, t1);
      t6.setClearColorHex$2(0, 1);
      this.renderer = t6;
      t1 = this.domParent;
      t1.appendChild(t6.canvas);
      this.canvas = this.renderer.canvas;
      t2 = this.width;
      t2 = W.CanvasElement_CanvasElement(this.height, t2);
      this.canvas2d = t2;
      J.set$left$x(t2.style, "0px");
      J.set$top$x(this.canvas2d.style, "0px");
      J.set$bottom$x(this.canvas2d.style, "0px");
      J.set$right$x(this.canvas2d.style, "0px");
      J.set$position$x(this.canvas2d.style, "absolute");
      J.set$pointerEvents$x(this.canvas2d.style, "none");
      t1.appendChild(this.canvas2d);
      if (spritePath === "") {
        t1 = J.getContext$1$x(this.canvas2d, "2d");
        this.context2d = t1;
        J.set$textBaseline$x(t1, "middle");
        J.set$textAlign$x(this.context2d, "center");
        this.loaded2d = true;
      } else {
        t1 = W.ImageElement_ImageElement(null, spritePath, null);
        this.spriteImage2d = t1;
        t1 = J.get$onLoad$x(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new S.DrawingContext_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
      t1 = J.$div$n(this.width, this.height);
      t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t2.setIdentity$0();
      t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t3.setIdentity$0();
      t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t4.setIdentity$0();
      t5 = $.Object3DCount;
      $.Object3DCount = t5 + 1;
      t6 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(0, 1, 0);
      t8 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t8.setValues$3(0, 0, 0);
      t9 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t9.setValues$3(0, 0, 0);
      t10 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t10.setValues$3(1, 1, 1);
      t11 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t11.setIdentity$0();
      t12 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t12.setIdentity$0();
      t13 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t13.setIdentity$0();
      t13 = new S.PerspectiveCamera(70, t1, null, null, null, null, null, null, t2, t3, t4, 0.1, 500, t5, "", t6, null, [], t7, t8, t9, t10, "XYZ", null, null, null, true, null, t11, t12, t13, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
      t13.updateProjectionMatrix$0();
      t13.position.setValues$3(0, 0, 0);
      t13.rotation.setValues$3(0, 3.9269908169872414, 0);
      t13.eulerOrder = "YXZ";
      this.cam = t13;
      t13 = S.Color$(6710886);
      t12 = $.Object3DCount;
      $.Object3DCount = t12 + 1;
      t11 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t10 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t10.setValues$3(0, 1, 0);
      t9 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t9.setValues$3(0, 0, 0);
      t8 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t8.setValues$3(0, 0, 0);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(1, 1, 1);
      t6 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t6.setIdentity$0();
      t5 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t5.setIdentity$0();
      t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t4.setIdentity$0();
      this.ambLight = new S.AmbientLight(t13, t12, "", t11, null, [], t10, t9, t8, t7, "XYZ", null, null, null, true, null, t6, t5, t4, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
      t4 = $.Object3DCount;
      $.Object3DCount = t4 + 1;
      t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t6.setValues$3(0, 1, 0);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(0, 0, 0);
      t8 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t8.setValues$3(0, 0, 0);
      t9 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t9.setValues$3(1, 1, 1);
      t10 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t10.setIdentity$0();
      t11 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t11.setIdentity$0();
      t12 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t12.setIdentity$0();
      t12 = new S.Scene(null, null, null, null, null, null, t4, "", t5, null, [], t6, t7, t8, t9, "XYZ", null, null, null, true, null, t10, t11, t12, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
      t12.Scene$0();
      t12.add$1(0, this.cam);
      this.scene = t12;
      dirLight = S.DirectionalLight$(16777215, 1, 0);
      dirLight.three$DirectionalLight$position.setValues$3(10, 10, 0);
      dirLight.target.position.setValues$3(0, -5, 0);
      dirLight.intensity = 0.3;
      this.scene.add$1(0, dirLight);
      this.lights.push(dirLight);
      dirLight = S.DirectionalLight$(16777215, 1, 0);
      dirLight.three$DirectionalLight$position.setValues$3(-10, 10, 0);
      dirLight.target.position.setValues$3(0, -5, 0);
      dirLight.intensity = 0.3;
      this.scene.add$1(0, dirLight);
      this.lights.push(dirLight);
      dirLight = S.DirectionalLight$(16777215, 1, 0);
      dirLight.three$DirectionalLight$position.setValues$3(0, 10, 10);
      dirLight.target.position.setValues$3(0, -5, 0);
      dirLight.intensity = 0.15;
      this.scene.add$1(0, dirLight);
      this.lights.push(dirLight);
      dirLight = S.DirectionalLight$(16777215, 1, 0);
      dirLight.three$DirectionalLight$position.setValues$3(0, 10, -10);
      dirLight.target.position.setValues$3(0, -5, 0);
      dirLight.intensity = 0.15;
      this.scene.add$1(0, dirLight);
      this.lights.push(dirLight);
    },
    static: {DrawingContext$: function(domParent, width, height, spritePath) {
        var t1 = new S.DrawingContext(domParent, null, null, null, null, null, null, [], null, null, null, false, H.setRuntimeTypeInfo([], [Q.Drawable]), width, height);
        t1.DrawingContext$4(domParent, width, height, spritePath);
        return t1;
      }}
  },
  DrawingContext_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(e) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getContext$1$x(t1.canvas2d, "2d");
      t1.context2d = t2;
      J.set$textBaseline$x(t2, "middle");
      J.set$textAlign$x(t1.context2d, "center");
      t1.loaded2d = true;
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  DrawingContext_draw_closure: {
    "^": "Closure:39;this_0",
    call$1: function(d) {
      var t1 = this.this_0;
      return d.Draw$2(t1.context2d, t1.spriteImage2d);
    }
  }
}],
["Enemies", "Dart/enemies.dart", , N, {
  "^": "",
  Enemy: {
    "^": "Updateable;parts@,partSep<,obj<,position>,audioSource@",
    remove$1: function($receiver, arg0) {
      return this.remove.call$1(arg0);
    },
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    InitEnemy$1: function(_context) {
      var t1;
      this.set$context(0, _context);
      this.get$context(this).updateables.push(this);
      $.get$Enemy_enemies().push(this);
      t1 = $.get$Enemy_enemies();
      if (t1.length > 175)
        t1[0].suicide = true;
      t1 = this.get$context(this).drawingContext;
      if ($.Enemy_particles == null)
        $.Enemy_particles = S.EnemyParticles$(t1, 16711680, 500, 0.5);
      this.set$audioSource(this.get$context(this).audioManager.makeSource$1("Enemy" + C.JSInt_methods.toString$0($.get$Enemy_enemies().length)));
      J.set$volume$x(this.get$audioSource(), 20 * $.AudioManager_positionalScale);
    },
    playBounce$0: function() {
      var t1, t2;
      J.setPosition$3$x(this.get$audioSource(), this.get$position(this).storage[0], this.get$position(this).storage[1], this.get$position(this).storage[2]);
      t1 = this.get$context(this);
      t2 = this.get$audioSource();
      t1.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t2), "ebounce", false);
    },
    UpdateEnemy$0: function() {
      var t1, t2, t3, v;
      if (this.justHit) {
        t1 = this.orb;
        t2 = t1.context.drawingContext;
        t3 = t1.obj;
        t2.scene.remove$1(0, t3);
        t1.context.enemiesByObjects.remove$1(0, t1.outObj);
        this.justHit = false;
        J.setPosition$3$x(this.get$audioSource(), this.get$position(this).storage[0], this.get$position(this).storage[1], this.get$position(this).storage[2]);
        t1 = this.get$context(this);
        t3 = this.get$audioSource();
        t1.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t3), "ebounce", false);
      }
      if (this.suicide)
        J.remove$1$ax($.get$Enemy_enemies(), this);
      if (this.remove) {
        if (this.hit)
          for (t1 = this.get$parts(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
            v = t1.__internal$_current;
            t2 = J.getInterceptor$x(v);
            t2.set$x(v, 0);
            t2.set$y(v, -100);
            t2.set$z(v, 0);
          }
        else {
          t1 = this.get$context(this).drawingContext;
          t2 = this.get$obj();
          t1.scene.remove$1(0, t2);
        }
        return true;
      }
      return false;
    },
    Hit$2: function(_face, countScore) {
      var t1, v, t2, t3, t4, t5;
      if (!this.hit) {
        this.hit = true;
        this.justHit = true;
        if (countScore) {
          $.GameContext_score = $.GameContext_score + (5 + this.get$context(this).targetsHit);
          ++this.get$context(this).targetsHit;
        }
        this.set$parts($.Enemy_particles.Reserve$0());
        if (this.deathBySuicide) {
          J.addAll$1$ax(this.get$parts(), $.Enemy_particles.Reserve$0());
          J.addAll$1$ax(this.get$parts(), $.Enemy_particles.Reserve$0());
        }
        for (t1 = this.get$parts(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          v = t1.__internal$_current;
          if (this.deathBySuicide) {
            t2 = J.getInterceptor$x(v);
            t2.set$x(v, -1 + C.C__JSRandom.nextDouble$0() * 2);
            t2.set$y(v, -1 + C.C__JSRandom.nextDouble$0() * 2);
            t2.set$z(v, -1 + C.C__JSRandom.nextDouble$0() * 2);
            t2.normalize$0(v);
            t2.multiply$1(v, this.get$obj().scale.$mul(0, 3));
            t2.add$1(v, this.get$position(this));
          } else {
            t2 = this.get$position(this).storage[0];
            t3 = -this.get$partSep();
            t4 = this.get$partSep();
            t5 = J.getInterceptor$x(v);
            t5.set$x(v, t2 + (t3 + C.C__JSRandom.nextDouble$0() * (t4 - t3)));
            t3 = this.get$position(this).storage[1];
            t4 = -this.get$partSep();
            t2 = this.get$partSep();
            t5.set$y(v, t3 + (t4 + C.C__JSRandom.nextDouble$0() * (t2 - t4)));
            t2 = this.get$position(this).storage[2];
            t3 = -this.get$partSep();
            t4 = this.get$partSep();
            t5.set$z(v, t2 + (t3 + C.C__JSRandom.nextDouble$0() * (t4 - t3)));
          }
        }
        return true;
      }
      return false;
    },
    Hit$1: function(_face) {
      return this.Hit$2(_face, true);
    }
  },
  EnemyOrb: {
    "^": "Object;context,obj<,mesh,outObj,outLine,parent*",
    EnemyOrb$2: function(context, $parent) {
      var t1, t2;
      N.EnemyOrb_InitStatics();
      this.mesh = S.Mesh$($.EnemyOrb_geo, $.EnemyOrb_mat);
      t1 = S.Mesh$($.EnemyOrb_geo, $.EnemyOrb_outMat);
      this.outLine = t1;
      t1.material.side = 1;
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(1.1, 1.1, 1.1);
      t1.scale = t2;
      this.outObj = this.context.drawingContext.addMesh$1(this.outLine);
      t2 = this.context.drawingContext.addMesh$1(this.mesh);
      this.obj = t2;
      t2.add$1(0, this.outObj);
      this.context.enemiesByObjects.$indexSet(0, this.outObj, this.parent);
    },
    static: {"^": "EnemyOrb_defaultRadius,EnemyOrb_mat,EnemyOrb_outMat,EnemyOrb_outMatAlt,EnemyOrb_geo", EnemyOrb$: function(context, $parent) {
        var t1 = new N.EnemyOrb(context, null, null, null, null, $parent);
        t1.EnemyOrb$2(context, $parent);
        return t1;
      }, EnemyOrb_InitStatics: function() {
        var t1, t2, t3, t4, t5, t6;
        if ($.EnemyOrb_geo == null)
          $.EnemyOrb_geo = S.SphereGeometry$(3, 8, 6, 0, 6.283185307179586, 0, 3.141592653589793);
        if ($.EnemyOrb_mat == null) {
          t1 = S.Color$(10027008);
          t2 = S.Color$(16777215);
          t3 = S.Color$(0);
          t4 = S.Color$(1118481);
          t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t5.setValues$3(1, 1, 1);
          t6 = $.MaterialCount;
          $.MaterialCount = t6 + 1;
          t6 = new S.MeshPhongMaterial(t1, t2, t3, t4, 30, false, false, false, t5, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
          t1 = new Float32Array(H._checkLength(2));
          t1[0] = 1;
          t1[1] = 1;
          t6.normalScale = new T.Vector2(t1);
          $.EnemyOrb_mat = t6;
          t1 = S.Color$(0);
          t2 = S.Color$(16777215);
          t3 = S.Color$(11141120);
          t4 = S.Color$(1118481);
          t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t5.setValues$3(1, 1, 1);
          t6 = $.MaterialCount;
          $.MaterialCount = t6 + 1;
          t6 = new S.MeshPhongMaterial(t1, t2, t3, t4, 30, false, false, false, t5, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
          t1 = new Float32Array(H._checkLength(2));
          t1[0] = 1;
          t1[1] = 1;
          t6.normalScale = new T.Vector2(t1);
          $.EnemyOrb_outMat = t6;
          t1 = S.Color$(0);
          t2 = S.Color$(16777215);
          t3 = S.Color$(16776960);
          t4 = S.Color$(1118481);
          t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t5.setValues$3(1, 1, 1);
          t6 = $.MaterialCount;
          $.MaterialCount = t6 + 1;
          t6 = new S.MeshPhongMaterial(t1, t2, t3, t4, 30, false, false, false, t5, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
          t1 = new Float32Array(H._checkLength(2));
          t1[0] = 1;
          t1[1] = 1;
          t6.normalScale = new T.Vector2(t1);
          $.EnemyOrb_outMatAlt = t6;
        }
      }}
  }
}],
["Follower", "Dart/follower.dart", , X, {
  "^": "",
  Follower: {
    "^": "Enemy;velocity,spawnArea,speed,maxSpeed,targetOffset,counter?,suicideCounter,timeToLive@,growth,parts,partSep,hit,remove,suicide,deathBySuicide,obj,orb,position,audioSource,justHit,context",
    Update$0: function() {
      var t1, v, t2, t3, t4, t5, sub, pingOff, a;
      if (this.UpdateEnemy$0())
        return true;
      if (this.hit) {
        t1 = this.counter;
        if (t1 >= 20)
          this.remove = true;
        else {
          this.counter = t1 + 1;
          for (t1 = this.parts, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
            v = t1.__internal$_current;
            t2 = J.getInterceptor$x(v);
            if (this.deathBySuicide) {
              t3 = t2.get$y(v);
              t2.set$y(v, J.$sub$n(t3, 0.1 + C.C__JSRandom.nextDouble$0() * 0.4));
            } else {
              t3 = t2.get$x(v);
              t4 = J.$sub$n(t2.get$x(v), this.position.storage[0]);
              t5 = this.counter;
              t2.set$x(v, J.$add$ns(t3, J.$div$n(t4, t5 * t5 / 2)));
              t5 = t2.get$y(v);
              t4 = J.$sub$n(t2.get$y(v), this.position.storage[1]);
              t3 = this.counter;
              t2.set$y(v, J.$add$ns(t5, J.$div$n(t4, t3 * t3 / 2)));
              t3 = t2.get$z(v);
              t4 = J.$sub$n(t2.get$z(v), this.position.storage[2]);
              t5 = this.counter;
              t2.set$z(v, J.$add$ns(t3, t4 / (t5 * t5 / 2)));
            }
          }
        }
        return false;
      }
      this.context.hitPlayer$2(this.position, 3 * this.obj.scale.storage[0]);
      if (this.suicide) {
        t1 = this.suicideCounter;
        if (t1 < 150) {
          t1 = C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(t1, 10), 2);
          t2 = this.orb;
          if (t1 === 0)
            t2.outLine.material = $.EnemyOrb_outMatAlt;
          else
            t2.outLine.material = $.EnemyOrb_outMat;
        } else if (t1 >= 165) {
          this.deathBySuicide = true;
          this.Hit$2(null, false);
        } else {
          this.orb.outLine.material = $.EnemyOrb_outMatAlt;
          this.obj.scale.add$1(0, this.growth);
        }
        ++this.suicideCounter;
        return false;
      } else if (--this.timeToLive <= 0)
        this.suicide = true;
      t1 = this.speed;
      if (t1 > this.maxSpeed)
        this.speed = t1 - 0.005;
      this.position.add$1(0, this.velocity);
      t1 = this.position;
      sub = new T.Vector3(new Float32Array(H._checkLength(3)));
      sub.setFrom$1(t1);
      sub.sub$1(this.context.playerPosition.$add(0, this.targetOffset));
      sub.normalize$0(0);
      this.velocity.sub$1(sub.$mul(0, this.maxSpeed).$div(0, 10));
      this.velocity.normalize$0(0);
      t1 = this.velocity.$mul(0, this.speed);
      this.velocity = t1;
      t2 = this.position.storage[1];
      t3 = this.context;
      if (t2 < t3.groundHeight && t1.storage[1] < 0) {
        t1 = t1.storage;
        t1[1] = -t1[1];
      }
      t1 = t3.areas;
      t1 = new H.ListIterator(t1, t1.length, 0, null);
      while (true) {
        if (!t1.moveNext$0()) {
          pingOff = false;
          break;
        }
        a = t1.__internal$_current;
        if (a.get$feature() != null)
          if (J.get$type$x(a) === 10) {
            t2 = this.position;
            t3 = a.get$feature().position;
            t2.toString;
            t4 = new T.Vector3(new Float32Array(3));
            t4.setFrom$1(t2);
            t3 = t4.sub$1(t3);
            t3 = t3.get$length(t3);
            t4 = a.get$featureSphere().radius;
            t2 = a.get$feature().scale.storage[0];
            if (typeof t4 !== "number")
              return t4.$mul();
            t2 = t3 < t4 * t2;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t2 = a.get$feature().position;
          t3 = this.position;
          t2.toString;
          t4 = new T.Vector3(new Float32Array(3));
          t4.setFrom$1(t2);
          t3 = t4.sub$1(t3);
          t3 = t3.get$length(t3);
          t4 = a.get$feature().position;
          t2 = this.position.$add(0, this.velocity);
          t4.toString;
          t5 = new T.Vector3(new Float32Array(3));
          t5.setFrom$1(t4);
          t2 = t5.sub$1(t2);
          if (t3 > t2.get$length(t2)) {
            pingOff = true;
            break;
          }
        }
      }
      if (pingOff) {
        this.playBounce$0();
        this.velocity = this.velocity.$negate(0);
      }
      return false;
    },
    Follower$1: function(spawnArea) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.spawnArea;
      t2 = t1.groundTile.position.storage[0];
      t3 = C.C__JSRandom.nextDouble$0();
      t4 = t1.groundTile.position.storage;
      t5 = t4[1];
      t4 = t4[2];
      t6 = C.C__JSRandom.nextDouble$0();
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 + (-3 + t3 * 6), t5 + 5, t4 + (-3 + t6 * 6));
      this.position = t7;
      t2 = C.C__JSRandom.nextDouble$0();
      t3 = C.C__JSRandom.nextDouble$0();
      t4 = C.C__JSRandom.nextDouble$0();
      t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t5.setValues$3(-0.5 + t2, -0.5 + t3, -0.5 + t4 * 0);
      this.targetOffset = t5;
      t5 = t1.context.level;
      this.maxSpeed = 0.3 + C.C__JSRandom.nextDouble$0() * (1 + t5 / 10 - 0.3);
      this.speed = 2;
      t2 = C.C__JSRandom.nextDouble$0();
      t3 = C.C__JSRandom.nextDouble$0();
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(-0.3 + t2 * 0.6, 2, -0.3 + t3 * 0.6);
      this.velocity = t4;
      this.InitEnemy$1(t1.context);
      t1 = N.EnemyOrb$(this.context, this);
      this.orb = t1;
      t1 = t1.obj;
      this.obj = t1;
      t1.position = this.position;
      t1.scale = t1.scale.$mul(0, 2 - this.maxSpeed);
    }
  }
}],
["GameContext", "Dart/game_context.dart", , K, {
  "^": "",
  GameContext: {
    "^": "Object;loaded,pause',inactiveHUD,soundBar,musicBar,soundBack,musicBack,enterButton,enterText,scoreTexts,scoreText,addScoreText,levelText,titleText,endTexts,endScoreText,endLevelText,endTotalText,levelUIBackground,levelUISquares,highscore,drawingContext,audioManager,musicStarted,baseSoundVolume,baseMusicVolume,idleMusic,levelDuration,levelCounter,levelJump,level,safeLevels,spawnerThresholds,rollerThresholds,counter?,trainCounter,trainFrequency,scorePerShot,targetsHit,groundHeight,state*,maxHealth,health,healthCounter,healthJump,healthBlocks,playerInBubble,playerPosition,targetPosition,moveVector,rotMatrix,sphereLight,gun,areas,updateables,enemiesByObjects,ground,groundColor,groundCenter,keys>,mouse,lightPos,activeColor,inactiveColor,turnAroundCounter,frontVectorO,upVectorO,frontVector,upVector,prevJumping,jumping,jumpVelocity,doubleJumpHeight,gunDir,playerHit",
    start$0: [function(_) {
      var t1, t2, t3;
      this.keys = Z.Keyboard$(this.drawingContext.canvas);
      t1 = this.drawingContext.canvas;
      t2 = this.get$shoot();
      t3 = new Z.LockedMouse(P.HashMap_HashMap(null, null, null, P.$int, P.$int), t2, null, null, H.setRuntimeTypeInfo(new P.Point(0, 0), [null]), H.setRuntimeTypeInfo(new P.Point(0, 0), [null]), null, false, true, H.setRuntimeTypeInfo(new P.Point(0, 0), [null]), H.setRuntimeTypeInfo(new P.Point(0, 0), [null]), H.setRuntimeTypeInfo(new P.Point(0, 0), [null]), true, null);
      t3.LockedMouse$2(t1, t2);
      this.mouse = t3;
      t3.UnlockCallback = new K.GameContext_start_closure(this);
      t3.LockCallback = new K.GameContext_start_closure0(this);
      this.loadAudio$0();
      this.addHUD$0();
      this.addGround$0();
      this.gun = V.Gun$(this, null);
      this.setGameState$1(15);
      this.work$1(0);
    }, "call$0", "get$start", 0, 0, null],
    loadAudio$0: function() {
      var audioFutures, t1;
      audioFutures = [];
      $.AudioManager_positionalScale = 0.1;
      $.AudioManager_minDistance = 15;
      t1 = new Q.AudioManager(0, 0, 0, null, null, null, null, null, null, "Sounds", P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Q.AudioClip), P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Q.AudioSource), null, null, false, false);
      t1.AudioManager$1("Sounds");
      this.audioManager = t1;
      t1.makeClip$2("shoot", "shoot.ogg");
      J.set$volume$x(this.audioManager.makeClip$2("reload", "reload.ogg").get$defaultSource(), 0.3);
      J.set$volume$x(this.audioManager.makeClip$2("reloaded", "reloaded.ogg").get$defaultSource(), 0.2);
      J.set$volume$x(this.audioManager.makeClip$2("hurt", "hurt.ogg").get$defaultSource(), 0.5);
      this.audioManager.makeClip$2("spop", "spop.ogg");
      this.audioManager.makeClip$2("sstart", "sstart.ogg");
      this.audioManager.makeClip$2("safe", "safe.ogg");
      this.audioManager.makeClip$2("spawn", "spawn.ogg");
      this.audioManager.makeClip$2("ebounce", "ebounce.ogg");
      this.audioManager.makeClip$2("epop", "epop.ogg");
      this.audioManager.makeClip$2("eTrain", "eTrain.ogg");
      audioFutures.push(this.audioManager.loadClips$0());
      t1 = this.audioManager.makeClip$2("music", "area.ogg");
      this.idleMusic = t1;
      audioFutures.push(J.load$0$x(t1));
      t1 = this.audioManager;
      t1._sourceGain.gain.value = this.baseSoundVolume * 0.5;
      t1._musicGain.gain.value = this.baseMusicVolume * 0.5;
      P.Future_wait(audioFutures, false).then$1(new K.GameContext_loadAudio_closure(this));
    },
    addHUD$0: function() {
      var t1, t2, t3, t4, i, t5;
      t1 = this.drawingContext;
      t2 = new Q.Drawable(60, 10, null, null, null, null, 16, "Score", "", "center", null, true, 1, null);
      t2.type = 20;
      t3 = S.Color$(16777215);
      t2.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t1.addDrawable2d$1(t2);
      t2 = this.drawingContext;
      t1 = new Q.Drawable(740, 10, null, null, null, null, 16, "Level", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.addDrawable2d$1(t1);
      t1 = this.healthBlocks;
      t1.push(this.drawingContext.addDrawable2d$1(Q.Drawable$rect(240, 10, 20, 100, 16711680, 0.5)));
      t1.push(this.drawingContext.addDrawable2d$1(Q.Drawable$rect(350, 10, 20, 100, 16711680, 0.5)));
      t1.push(this.drawingContext.addDrawable2d$1(Q.Drawable$rect(460, 10, 20, 100, 16711680, 0.5)));
      t1 = this.drawingContext;
      t2 = new Q.Drawable(60, 30, null, null, null, null, 16, "0", "", "center", null, true, 1, null);
      t2.type = 20;
      t3 = S.Color$(16777215);
      t2.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      this.scoreText = t1.addDrawable2d$1(t2);
      t2 = this.drawingContext;
      t1 = new Q.Drawable(60, 50, null, null, null, null, 16, "", "", "center", null, true, 0, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      this.addScoreText = t2.addDrawable2d$1(t1);
      t1 = this.drawingContext;
      t2 = new Q.Drawable(740, 30, null, null, null, null, 16, "1", "", "center", null, true, 1, null);
      t2.type = 20;
      t3 = S.Color$(16777215);
      t2.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      this.levelText = t1.addDrawable2d$1(t2);
      t2 = this.inactiveHUD;
      t2.push(Q.Drawable$rect(0, 0, 600, 800, 1118481, 0.8));
      t1 = Q.Drawable$rect(100, 100, 200, 600, 16777215, 0.3);
      this.enterButton = t1;
      t2.push(t1);
      t2.push(Q.Drawable$rect(100, 320, 180, 180, 16777215, 0.3));
      t2.push(Q.Drawable$rect(300, 320, 180, 200, 16777215, 0.3));
      t2.push(Q.Drawable$rect(520, 320, 180, 180, 16777215, 0.3));
      t1 = new Q.Drawable(400, 180, null, null, null, null, 50, "Loading...", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      this.titleText = t1;
      t2.push(t1);
      t1 = new Q.Drawable(400, 260, null, null, null, null, 30, "", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      this.enterText = t1;
      t2.push(t1);
      t1 = this.endTexts;
      t3 = new Q.Drawable(600, 125, null, null, null, null, 30, "0", "", "right", null, true, 1, null);
      t3.type = 20;
      t4 = S.Color$(16777215);
      t3.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
      this.endScoreText = t3;
      t1.push(t3);
      t3 = new Q.Drawable(600, 160, null, null, null, null, 30, "0", "", "right", null, true, 1, null);
      t3.type = 20;
      t4 = S.Color$(16777215);
      t3.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
      this.endLevelText = t3;
      t1.push(t3);
      t3 = new Q.Drawable(600, 205, null, null, null, null, 50, "0", "", "right", null, true, 1, null);
      t3.type = 20;
      t4 = S.Color$(16777215);
      t3.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
      this.endTotalText = t3;
      t1.push(t3);
      t3 = new Q.Drawable(200, 125, null, null, null, null, 30, "Score", "", "left", null, true, 1, null);
      t3.type = 20;
      t4 = S.Color$(16777215);
      t3.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
      t1.push(t3);
      t3 = new Q.Drawable(200, 160, null, null, null, null, 30, "Level", "", "left", null, true, 1, null);
      t3.type = 20;
      t4 = S.Color$(16777215);
      t3.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
      t1.push(t3);
      t3 = new Q.Drawable(200, 205, null, null, null, null, 50, "Total", "", "left", null, true, 1, null);
      t3.type = 20;
      t4 = S.Color$(16777215);
      t3.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
      t1.push(t3);
      C.JSArray_methods.forEach$1(t1, new K.GameContext_addHUD_closure());
      C.JSArray_methods.addAll$1(t2, t1);
      t1 = new Q.Drawable(610, 345, null, null, null, null, 30, "Options", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = Q.Drawable$rect(560, 395, 20, 104, 16777215, 1);
      this.soundBack = t1;
      t2.push(t1);
      t1 = Q.Drawable$rect(560, 455, 20, 104, 16777215, 1);
      this.musicBack = t1;
      t2.push(t1);
      t1 = new Q.Drawable(610, 385, null, null, null, null, 20, "Sound", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(610, 445, null, null, null, null, 20, "Music", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = Q.Drawable$rect(562, 397, 16, 50, 255, 1);
      this.soundBar = t1;
      t2.push(t1);
      t1 = Q.Drawable$rect(562, 457, 16, 50, 255, 1);
      this.musicBar = t1;
      t2.push(t1);
      t1 = new Q.Drawable(190, 345, null, null, null, null, 30, "Controls", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(190, 385, null, null, null, null, 18, "Movement....WASD", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(190, 410, null, null, null, null, 18, "Shoot........LMB", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(190, 435, null, null, null, null, 18, "Secondary....RMB", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(190, 460, null, null, null, null, 18, "Jump.......Space", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(190, 485, null, null, null, null, 18, "Pause........Esc", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      t1 = new Q.Drawable(400, 345, null, null, null, null, 22, "Local Highscore", "", "center", null, true, 1, null);
      t1.type = 20;
      t3 = S.Color$(16777215);
      t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t3._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t3._b * 255)) + ")";
      t2.push(t1);
      for (t1 = this.scoreTexts, t3 = this.highscore, i = 0; i < 5; ++i) {
        t4 = t3.scores;
        t5 = t4.length;
        if (t5 > i) {
          if (i >= t5)
            return H.ioore(t4, i);
          t4 = J.toString$0(t4[i]);
        } else
          t4 = "0";
        t4 = new Q.Drawable(400, 380 + 25 * i, null, null, null, null, 18, t4, "", "center", null, true, 1, null);
        t4.type = 20;
        t5 = new S.Color(1, 1, 1);
        t5.setHex$1(16777215);
        t4.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t5._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t5._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t5._b * 255)) + ")";
        t1.push(t4);
        if (i >= t1.length)
          return H.ioore(t1, i);
        t2.push(t1[i]);
      }
      this.SetScores$0();
      C.JSArray_methods.forEach$1(t2, new K.GameContext_addHUD_closure0(this));
    },
    addGround$0: function() {
      var geo, t1, t2, mat, i, t3, t4, j, t5, t6, t7, t8, t9, block, obj;
      geo = S.CubeGeometry$(49.5, 10, 49.5, 1, 1, 1, null, null);
      this.ground = H.setRuntimeTypeInfo(Array(6), [[P.List, S.Mesh]]);
      for (t1 = this.groundHeight - 5, t2 = this.groundColor, mat = null, i = 0; i < 6; ++i) {
        t3 = this.ground;
        t4 = Array(6);
        t4.$builtinTypeInfo = [S.Mesh];
        t3[i] = t4;
        for (t3 = i * 50, j = 0; j < 6; ++j) {
          t4 = C.JSNumber_methods.toInt$0(Math.floor(t2._r * 255));
          t5 = C.JSNumber_methods.toInt$0(Math.floor(t2._g * 255));
          t6 = C.JSNumber_methods.toInt$0(Math.floor(t2._b * 255));
          t7 = new S.Color(1, 1, 1);
          t7.setHex$1((t4 << 16 ^ t5 << 8 ^ t6) >>> 0);
          t4 = new S.Color(1, 1, 1);
          t4.setHex$1(16777215);
          t5 = new S.Color(1, 1, 1);
          t5.setHex$1(0);
          t6 = new S.Color(1, 1, 1);
          t6.setHex$1(1118481);
          t8 = new Float32Array(3);
          t9 = new T.Vector3(t8);
          t8[0] = 1;
          t8[1] = 1;
          t8[2] = 1;
          t8 = t9;
          t9 = $.MaterialCount;
          $.MaterialCount = t9 + 1;
          mat = new S.MeshPhongMaterial(t7, t4, t5, t6, 30, false, false, false, t8, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t9, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
          t4 = new Float32Array(2);
          t4[0] = 1;
          t4[1] = 1;
          mat.normalScale = new T.Vector2(t4);
          block = S.Mesh$(geo, mat);
          t4 = block.position.storage;
          t4[0] = t3;
          t4[1] = t1;
          t4[2] = j * 50;
          t4 = this.drawingContext;
          obj = S.Object3D$();
          obj.add$1(0, block);
          obj.receiveShadow = false;
          obj.castShadow = false;
          t4.scene.add$1(0, obj);
          this.ground[i][j] = block;
        }
      }
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(125, 0, 125);
      this.groundCenter = t1;
      $.GameContext_minX = -25;
      $.GameContext_minZ = -25;
      $.GameContext_maxX = 275;
      $.GameContext_maxZ = 275;
    },
    onGround$1: function(_pos) {
      var t1, t2, t3;
      t1 = _pos.storage;
      t2 = t1[0];
      t3 = $.GameContext_minX;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(t2 < t3)) {
        t3 = $.GameContext_maxX;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2)
        return false;
      t1 = t1[2];
      t2 = $.GameContext_minZ;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(t1 < t2)) {
        t2 = $.GameContext_maxZ;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 > t2;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        return false;
      return true;
    },
    SetScores$0: function() {
      var t1, t2, i, t3, t4, t5;
      for (t1 = this.highscore, t2 = this.scoreTexts, i = 0; i < 5; ++i) {
        if (i >= t2.length)
          return H.ioore(t2, i);
        t3 = t2[i];
        t4 = t1.scores;
        t5 = t4.length;
        if (t5 > i) {
          if (i >= t5)
            return H.ioore(t4, i);
          t4 = J.toString$0(t4[i]);
        } else
          t4 = "0";
        t3.content = t4;
      }
    },
    work$1: [function(time) {
      var t1, t2, i, t3, t4, t5, t6, t7;
      if ($.WebGLRenderer_programLinkFailed) {
        t1 = this.enterText;
        t1.size = 20;
        t2 = S.Color$(16711680);
        t1.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t2._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t2._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t2._b * 255)) + ")";
        this.enterText.content = "is currently not supported by your Browser, sorry";
      } else if (this.pause)
        this.handleInput$0();
      else {
        t1 = this.inactiveHUD;
        if (this.mouse.active) {
          C.JSArray_methods.forEach$1(t1, new K.GameContext_work_closure());
          this.playerInBubble = false;
          C.JSArray_methods.forEach$1(this.areas, new K.GameContext_work_closure0());
          for (t1 = this.updateables, i = t1.length - 1; i >= 0; --i) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            if (t1[i].Update$0())
              C.JSArray_methods.removeAt$1(t1, i);
          }
          t1 = $.Enemy_particles;
          if (t1 != null)
            t1.geo.get$_data().$indexSet(0, "verticesNeedUpdate", true);
          t1 = $.GunOrb_particles;
          if (t1 != null)
            t1.geo.get$_data().$indexSet(0, "verticesNeedUpdate", true);
          if (this.playerInBubble && this.health < this.maxHealth)
            if (++this.healthCounter >= this.healthJump) {
              ++this.health;
              this.healthCounter = 0;
            }
          for (t1 = this.maxHealth, t2 = this.healthBlocks, i = 0; i < t1; ++i) {
            t3 = this.health;
            t4 = t2.length;
            t5 = t2[i];
            if (t3 > i) {
              if (i >= t4)
                return H.ioore(t2, i);
              t5.SetColor$1(65280);
            } else {
              if (i >= t4)
                return H.ioore(t2, i);
              t5.SetColor$1(16711680);
            }
          }
          if (this.state === 100)
            this.drawingContext.renderer.setClearColorHex$2(11141120, 1);
          else {
            t1 = this.playerHit;
            if (t1 > 0) {
              this.playerHit = t1 - 1;
              this.drawingContext.renderer.setClearColorHex$2(8947712, 1);
            } else
              this.drawingContext.renderer.setClearColorHex$2(0, 1);
          }
          this.gun.Update$0();
          this.updateState$0();
          t1 = this.audioManager;
          t2 = this.playerPosition.storage;
          t1.setPosition$3(0, t2[0], t2[1], t2[2]);
          t2 = this.frontVector;
          this.frontVectorO.copyInto$1(t2);
          t1 = this.upVector;
          this.upVectorO.copyInto$1(t1);
          t2.applyProjection$1(this.drawingContext.cam.matrixWorld);
          t1.applyProjection$1(this.drawingContext.cam.matrixWorld);
          t2.sub$1(this.drawingContext.cam.position);
          t1.sub$1(this.drawingContext.cam.position);
          t3 = this.audioManager;
          t2 = t2.storage;
          t4 = t2[0];
          t5 = t2[1];
          t2 = t2[2];
          t1 = t1.storage;
          t6 = t1[0];
          t7 = t1[1];
          t1 = t1[2];
          t3._listener.setOrientation(t4, t5, t2, t6, t7, t1);
          this.handleInput$0();
          J.set$content$x(this.levelText, C.JSInt_methods.toString$0(this.level));
          t1 = $.GameContext_score;
          t2 = $.GameContext_displayScore;
          if (t1 > t2)
            if (t1 - t2 >= 5) {
              t1 = t2 + 5;
              $.GameContext_displayScore = t1;
            } else {
              t1 = t2 + 1;
              $.GameContext_displayScore = t1;
            }
          else {
            $.GameContext_lastScore = 0;
            t1 = t2;
          }
          J.set$content$x(this.scoreText, C.JSInt_methods.toString$0(t1));
          if (J.$gt$n(J.get$alpha$x(this.addScoreText), 0)) {
            t1 = this.addScoreText;
            t2 = J.getInterceptor$x(t1);
            t2.set$alpha(t1, P.max(J.$sub$n(t2.get$alpha(t1), 0.01), 0));
          }
          if (J.$gt$n(J.get$size$x(this.addScoreText), 16)) {
            t1 = this.addScoreText;
            t2 = J.getInterceptor$x(t1);
            t2.set$size(t1, P.max(J.$sub$n(t2.get$size(t1), 1), 16));
          }
        } else {
          C.JSArray_methods.forEach$1(t1, new K.GameContext_work_closure1());
          this.updateUI$0();
        }
      }
      this.drawingContext.draw$0();
      t1 = $.debugDiv;
      if (t1 != null)
        J.set$innerHtml$x(t1, "Jump:" + C.JSInt_methods.toString$0(this.levelJump) + " LevelCounter:" + C.JSInt_methods.toString$0(this.levelCounter) + " Counter:" + C.JSInt_methods.toString$0(this.counter));
      C.Window_methods.get$animationFrame(window).then$1(this.get$work());
    }, "call$1", "get$work", 2, 0, 56, 57],
    setAddScoreText$0: function() {
      var t1, t2, addScoreColor, addScoreSize;
      t1 = this.addScoreText;
      t2 = this.targetsHit;
      J.set$content$x(t1, t2 > 0 ? C.JSInt_methods.toString$0(t2) + " for " + C.JSInt_methods.toString$0(this.scorePerShot) + " " : "");
      J.set$alpha$x(this.addScoreText, 1);
      t1 = this.targetsHit;
      if (t1 >= 30) {
        addScoreColor = 16711680;
        addScoreSize = 28;
      } else if (t1 >= 20) {
        addScoreColor = 10040064;
        addScoreSize = 26;
      } else if (t1 >= 10) {
        addScoreColor = 22015;
        addScoreSize = 24;
      } else if (t1 >= 5) {
        addScoreColor = 3381759;
        addScoreSize = 22;
      } else if (t1 >= 3) {
        addScoreColor = 65280;
        addScoreSize = 20;
      } else if (t1 >= 2) {
        addScoreColor = 39168;
        addScoreSize = 18;
      } else {
        addScoreColor = 16777215;
        addScoreSize = 16;
      }
      this.addScoreText.SetColor$1(addScoreColor);
      J.set$size$x(this.addScoreText, addScoreSize);
    },
    updateUI$0: function() {
      if (!this.loaded) {
        C.JSArray_methods.forEach$1(this.endTexts, new K.GameContext_updateUI_closure());
        return;
      }
      if (this.state === 15) {
        var t1 = this.endTexts;
        if ($.GameContext_totalScore > 0) {
          C.JSArray_methods.forEach$1(t1, new K.GameContext_updateUI_closure0());
          this.enterText.content = "Click here to replay";
          this.titleText.content = "";
        } else {
          C.JSArray_methods.forEach$1(t1, new K.GameContext_updateUI_closure1());
          this.titleText.content = "Areas";
          this.enterText.content = "Click here to start";
        }
      } else {
        C.JSArray_methods.forEach$1(this.endTexts, new K.GameContext_updateUI_closure2());
        this.titleText.content = "Areas";
        this.enterText.content = "Click here to resume";
      }
    },
    initLevelSquares$1: function(clear) {
      var t1, t2, widthPerJump, t3, i, xPos, background, t4, t5, square, t6;
      t1 = this.levelUISquares;
      C.JSArray_methods.forEach$1(t1, new K.GameContext_initLevelSquares_closure(this));
      t2 = this.levelUIBackground;
      C.JSArray_methods.forEach$1(t2, new K.GameContext_initLevelSquares_closure0(this));
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.set$length(t2, 0);
      if (clear)
        return;
      widthPerJump = C.JSInt_methods.$tdiv(100, this.levelJump);
      for (t3 = widthPerJump - 4, i = 0; i < this.levelJump; ++i) {
        xPos = 690 + widthPerJump * i + 2;
        background = new Q.Drawable(xPos, 45, null, null, 10, t3, null, null, "", null, null, true, 0.3, null);
        background.type = 30;
        t4 = new S.Color(1, 1, 1);
        t4.setHex$1(16777215);
        background.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t4._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t4._b * 255)) + ")";
        t4 = t3 < 0 ? -t3 * 0 : t3;
        t4 = new P.Rectangle(xPos, 45, t4, 10);
        t4.$builtinTypeInfo = [null];
        background.rectangle = t4;
        t4 = xPos + 2;
        t5 = t3 - 4;
        square = new Q.Drawable(t4, 47, null, null, 6, t5, null, null, "", null, null, true, 0.5, null);
        square.type = 30;
        t6 = new S.Color(1, 1, 1);
        t6.setHex$1(16750848);
        square.colorS = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t6._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t6._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t6._b * 255)) + ")";
        if (t5 < 0)
          t5 = -t5 * 0;
        t4 = new P.Rectangle(t4, 47, t5, 6);
        t4.$builtinTypeInfo = [null];
        square.rectangle = t4;
        t4 = this.drawingContext;
        C.JSArray_methods.insert$2(t4.drawables2d, 0, square);
        t1.push(square);
        t4 = this.drawingContext;
        C.JSArray_methods.insert$2(t4.drawables2d, 0, background);
        t2.push(background);
      }
      if (C.JSArray_methods.contains$1(this.safeLevels, this.level))
        C.JSArray_methods.get$last(t1).SetColor$1(26367);
    },
    initLevelSquares$0: function() {
      return this.initLevelSquares$1(false);
    },
    updateLevelSquares$0: function() {
      var t1, i, t2, t3, square;
      for (t1 = this.levelUISquares, i = 0; t2 = t1.length, i < t2; ++i) {
        t3 = t2 - 1 - i;
        if (t3 < 0)
          return H.ioore(t1, t3);
        square = t1[t3];
        t2 = this.levelCounter;
        if (i < t2)
          J.set$width$x(square, 0);
        else if (i === t2)
          J.set$width$x(square, J.$tdiv$n(J.$mul$ns(square.get$rectangle().width, this.counter), this.levelDuration));
      }
    },
    updateState$0: function() {
      var box_0, t1, t2, box_00, color;
      switch (this.state) {
        case 10:
          box_0 = {};
          for (box_0.i_0 = 0; t1 = box_0.i_0, t2 = this.ground, t2.length, t1 < 6; box_00 = {}, t1 = box_0.i_0, box_00.i_0 = t1, box_00.i_0 = t1 + 1, box_0 = box_00)
            J.forEach$1$ax(t2[t1], new K.GameContext_updateState_closure(box_0, this));
          t1 = this.counter;
          if (t1 === 150) {
            this.counter = 0;
            if (++this.lightPos >= 6)
              this.lightPos = 0;
            t1 = 0;
          }
          this.counter = t1 + 1;
          break;
        case 15:
          t1 = this.counter;
          if (t1 === 10) {
            this.setGameState$1(30);
            return;
          }
          this.counter = t1 + 1;
          break;
        case 20:
          --this.counter;
          this.updateLevelSquares$0();
          color = this.levelCounter + 1 >= this.levelJump ? 8978312 : 16777096;
          t1 = this.counter;
          if (t1 < 20)
            this.drawingContext.setLightColor$1(color);
          else if (t1 < 40)
            this.drawingContext.setLightColor$1(16777215);
          else if (t1 < 60)
            this.drawingContext.setLightColor$1(color);
          if (this.counter <= 0) {
            this.drawingContext.setLightColor$1(16777215);
            this.setGameState$1(30);
          }
          t1 = this.trainFrequency;
          if (t1 > 0)
            if (++this.trainCounter >= t1) {
              this.trainCounter = 0;
              t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
              t1.setValues$3(20, 0, 20);
              new K.Train(null, null, null, null, C.TrainState_0, null, 0, null, null, null, t1, 35, null, null, null, null, Array(6), 0, 0, null).Train$1(this);
            }
          break;
        case 30:
          if (!H.IterableMixinWorkaround_any(this.areas, new K.GameContext_updateState_closure0()))
            this.setGameState$1(20);
          break;
        case 100:
          if (!H.IterableMixinWorkaround_any(this.areas, new K.GameContext_updateState_closure1()))
            this.setGameState$1(110);
          ++this.counter;
          break;
        case 110:
          this.highscore.Add$1($.GameContext_totalScore);
          this.SetScores$0();
          t1 = this.mouse;
          if (!t1.isFirefox)
            t1.active = false;
          document.exitPointerLock();
          this.setGameState$1(15);
          break;
      }
    },
    getGroundState$2: function(_x, _y) {
      var t1, a;
      if (_x < 0 || _y < 0 || _x >= 6 || _y >= 6)
        return -1;
      t1 = this.areas;
      a = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new K.GameContext_getGroundState_closure(_x, _y)), [H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0)]);
      if (a.get$length(a) === 0)
        return 0;
      return J.get$type$x(a.get$first(a));
    },
    setGameState$1: function(newState) {
      var i, t1, t2, t3, currentSpawners, spawners, thres, currentRollers, rollers;
      if (newState === this.state)
        return;
      this.counter = 0;
      this.state = newState;
      switch (newState) {
        case 10:
          break;
        case 15:
          this.enemiesByObjects.clear$0(0);
          C.JSArray_methods.set$length(this.areas, 0);
          this.playerHit = 0;
          $.GameContext_score = 0;
          $.GameContext_displayScore = 0;
          $.GameContext_lastScore = 0;
          this.scorePerShot = 0;
          this.targetsHit = 0;
          this.health = this.maxHealth;
          for (i = 0; t1 = this.ground, t1.length, i < 6; ++i)
            J.forEach$1$ax(t1[i], new K.GameContext_setGameState_closure(this));
          break;
        case 20:
          for (t1 = this.areas, i = t1.length - 1; i >= 0; --i) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            if (t1[i].get$timeToLive() === 0)
              C.JSArray_methods.removeAt$1(t1, i);
          }
          C.JSArray_methods.forEach$1(t1, new K.GameContext_setGameState_closure0());
          t1 = C.JSNumber_methods.toInt$0(Math.ceil(500 + 1000 * (this.level / 10)));
          this.counter = t1;
          this.levelDuration = t1;
          break;
        case 30:
          t1 = this.areas;
          C.JSArray_methods.forEach$1(t1, new K.GameContext_setGameState_closure1());
          t2 = ++this.levelCounter;
          t3 = this.levelJump;
          if (t2 >= t3) {
            t2 = ++this.level;
            this.levelCounter = 0;
            if (t2 <= 10 && C.JSInt_methods.$mod(t2, 2) === 0)
              this.levelJump = t3 + 1;
            if (C.JSArray_methods.contains$1(this.safeLevels, t2))
              D.Area$(10, this);
            this.initLevelSquares$0();
          }
          t2 = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new K.GameContext_setGameState_closure2()), [H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0)]);
          currentSpawners = t2.get$length(t2);
          for (t2 = new H.ListIterator(this.spawnerThresholds, 6, 0, null), spawners = 1; t2.moveNext$0();) {
            thres = t2.__internal$_current;
            t3 = this.level;
            if (typeof thres !== "number")
              return H.iae(thres);
            if (t3 >= thres)
              ++spawners;
          }
          spawners -= currentSpawners;
          for (i = 0; i < spawners; ++i)
            D.Area$(20, this);
          t1 = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new K.GameContext_setGameState_closure3()), [H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0)]);
          currentRollers = t1.get$length(t1);
          for (t1 = new H.ListIterator(this.rollerThresholds, 3, 0, null), rollers = 0; t1.moveNext$0();) {
            thres = t1.__internal$_current;
            t2 = this.level;
            if (typeof thres !== "number")
              return H.iae(thres);
            if (t2 >= thres)
              ++rollers;
          }
          rollers -= currentRollers;
          for (i = 0; i < rollers; ++i)
            D.Area$(20, this).enemyType = 1;
          if (this.level >= 5)
            this.trainFrequency = 1500;
          if (this.levelUIBackground.length === 0)
            this.initLevelSquares$0();
          break;
        case 100:
          C.JSArray_methods.forEach$1(this.areas, new K.GameContext_setGameState_closure4());
          t1 = this.enemiesByObjects;
          t1.get$values(t1).forEach$1(0, new K.GameContext_setGameState_closure5());
          break;
        case 110:
          t1 = $.GameContext_score;
          $.GameContext_totalScore = t1 + $.GameContext_scorePerLevel * this.level;
          this.endScoreText.content = C.JSInt_methods.toString$0(t1);
          this.endLevelText.content = C.JSInt_methods.toString$0(this.level) + " x " + C.JSInt_methods.toString$0($.GameContext_scorePerLevel) + " = " + C.JSInt_methods.toString$0(this.level * $.GameContext_scorePerLevel);
          this.endTotalText.content = C.JSInt_methods.toString$0($.GameContext_totalScore);
          this.levelCounter = -1;
          this.levelJump = 2;
          this.level = 1;
          this.initLevelSquares$1(true);
          this.counter = 0;
          t1 = this.audioManager;
          t1.pauseSources$0();
          t2 = t1._music._sound;
          if (t2 != null)
            t2.set$pause(0, true);
          t1._musicPaused = true;
          break;
      }
    },
    handleInput$0: function() {
      var t1, groundX, groundY, t2, t3, camLevel, t4, t5, t6, groundXd, groundYd, p;
      t1 = this.drawingContext.cam.position;
      this.playerPosition = t1;
      this.moveVector = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1 = t1.storage;
      groundX = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1[0] / 50)), 0, 5);
      groundY = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1[2] / 50)), 0, 5);
      t2 = this.ground;
      t2.length;
      if (groundX >>> 0 !== groundX || groundX >= 6)
        return H.ioore(t2, groundX);
      t2 = t2[groundX];
      t2.length;
      if (groundY >>> 0 !== groundY || groundY >= 6)
        return H.ioore(t2, groundY);
      t3 = this.groundHeight;
      camLevel = t2[groundY].position.storage[1] - t3 + 5;
      if (this.keys._keys.containsKey$1(0, 32) && this.state === 10)
        this.setGameState$1(15);
      if (this.keys._keys.containsKey$1(0, 32)) {
        if (!this.prevJumping) {
          this.prevJumping = true;
          t2 = this.jumping;
          if (t2 < 2) {
            this.jumping = t2 + 1;
            this.jumpVelocity = 1.8;
          }
        }
      } else
        this.prevJumping = false;
      t2 = this.jumping;
      if (t2 > 0) {
        t4 = t1[1];
        t5 = t4 <= camLevel && this.jumpVelocity < 0;
        t6 = this.moveVector;
        if (t5) {
          t6.storage[1] = camLevel - t4;
          this.jumping = 0;
          t2 = 0;
        } else {
          t4 = this.jumpVelocity;
          t6.storage[1] = t4;
          this.jumpVelocity = t4 - 0.04;
        }
      } else {
        t4 = this.moveVector;
        t5 = t1[1];
        t4 = t4.storage;
        t4[1] = camLevel - t5;
        t5 = t4[1];
        if (t5 > 1)
          t4[1] = 0;
        else if (t5 < -1) {
          this.jumping = 1;
          this.jumpVelocity = 0;
          t4[1] = 0;
          t2 = 1;
        }
      }
      if (t2 > 0)
        $.GameContext_moveSpeed = 1;
      else
        $.GameContext_moveSpeed = 1.5;
      if (this.keys._keys.containsKey$1(0, 83)) {
        t2 = this.moveVector.storage;
        t2[2] = t2[2] + $.GameContext_moveSpeed;
      }
      if (this.keys._keys.containsKey$1(0, 87)) {
        t2 = this.moveVector.storage;
        t2[2] = t2[2] - $.GameContext_moveSpeed;
      }
      if (this.keys._keys.containsKey$1(0, 68)) {
        t2 = this.moveVector.storage;
        t2[0] = t2[0] + $.GameContext_moveSpeed;
      }
      if (this.keys._keys.containsKey$1(0, 65)) {
        t2 = this.moveVector.storage;
        t2[0] = t2[0] - $.GameContext_moveSpeed;
      }
      if (this.keys._keys.containsKey$1(0, 69) && this.turnAroundCounter === 0)
        this.turnAroundCounter = 20;
      t2 = this.drawingContext.cam.rotation.storage[1];
      t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t4.Matrix4$rotationY$1(-t2);
      this.rotMatrix = t4;
      t4 = t4.rotate3$1(this.moveVector);
      this.moveVector = t4;
      this.drawingContext.cam.position.add$1(0, t4);
      groundXd = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1[0] / 50)), 0, 5);
      groundYd = C.JSInt_methods.clamp$2(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1[2] / 50)), 0, 5);
      t4 = this.ground;
      t4.length;
      if (groundXd >>> 0 !== groundXd || groundXd >= 6)
        return H.ioore(t4, groundXd);
      t4 = t4[groundXd];
      t4.length;
      if (groundYd >>> 0 !== groundYd || groundYd >= 6)
        return H.ioore(t4, groundYd);
      t4 = t4[groundYd].position.storage[1];
      if (this.jumping === 0 && t4 - t3 + 5 > camLevel + 1) {
        if (groundXd !== groundX)
          t1[0] = t1[0] - this.moveVector.storage[0];
        if (groundYd !== groundY)
          t1[2] = t1[2] - this.moveVector.storage[2];
      }
      t1 = new Float32Array(H._checkLength(3));
      t2 = this.turnAroundCounter;
      if (t2 === 0) {
        t2 = this.mouse;
        t3 = t2.Delta;
        p = H.setRuntimeTypeInfo(new P.Point(t3.x, t3.y), [null]);
        t2.Delta = H.setRuntimeTypeInfo(new P.Point(0, 0), [null]);
        t1[1] = J.$div$n(J.$negate$n(p.x), 1000);
        t1[0] = J.$div$n(J.$negate$n(p.y), 1000);
      } else {
        t1[1] = t1[1] - 0.15707963267948966;
        this.turnAroundCounter = t2 - 1;
      }
      this.drawingContext.cam.rotation.add$1(0, new T.Vector3(t1));
      if (this.keys._keys.containsKey$1(0, 77))
        this.drawingContext.cam.position.storage[1] = 100;
      this.pause = this.keys._keys.containsKey$1(0, 80);
      t1 = this.drawingContext.cam.position.storage;
      t1[0] = P.max(t1[0], -25);
      t1 = this.drawingContext.cam.position.storage;
      t1[2] = P.max(t1[2], -25);
      t1 = this.drawingContext.cam.position.storage;
      t1[0] = P.min(t1[0], 275);
      t1 = this.drawingContext.cam.position.storage;
      t1[2] = P.min(t1[2], 275);
    },
    shoot$1: [function(e) {
      var t1, t2, cent;
      if (this.mouse.active) {
        if (this.gun.Ready$0() && J.get$button$x(e) === 0) {
          $.Ray_checkedFaces = 0;
          $.Ray_intersectCount = 0;
          $.Ray_parallels = 0;
          this.targetsHit = 0;
          this.scorePerShot = $.GameContext_score;
          t1 = this.gun.object;
          t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t2.setValues$3(-15, 0, 4);
          cent = t1.localToWorld$1(t2);
          t2 = this.gun.object;
          t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t1.setValues$3(-30, 0, 4);
          this.castRay$2(cent, t2.localToWorld$1(t1));
          t1 = this.gun.object;
          t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t2.setValues$3(-15, 0, -4);
          cent = t1.localToWorld$1(t2);
          t2 = this.gun.object;
          t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t1.setValues$3(-30, 0, -4);
          this.castRay$2(cent, t2.localToWorld$1(t1));
          t1 = this.gun.object;
          t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t2.setValues$3(-15, -4, 0);
          cent = t1.localToWorld$1(t2);
          t2 = this.gun.object;
          t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t1.setValues$3(-30, -4, 0);
          this.castRay$2(cent, t2.localToWorld$1(t1));
          t1 = this.gun.object;
          t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t2.setValues$3(-15, 4, 0);
          cent = t1.localToWorld$1(t2);
          t2 = this.gun.object;
          t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t1.setValues$3(-30, 4, 0);
          this.castRay$2(cent, t2.localToWorld$1(t1));
          this.gun.Shoot$1($.get$GameContext_center());
          this.scorePerShot = $.GameContext_score - this.scorePerShot;
          this.setAddScoreText$0();
        }
      } else if (this.loaded && this.enterButton.rectangle.containsPoint$1(0, J.get$offset$x(e)))
        return true;
      else {
        t1 = J.getInterceptor$x(e);
        if (this.soundBack.rectangle.containsPoint$1(0, t1.get$offset(e))) {
          t2 = this.audioManager;
          t1 = this.setVolume$2(this.soundBar, t1.get$offset(e));
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2._sourceGain.gain.value = this.baseSoundVolume * t1;
        } else if (this.musicBack.rectangle.containsPoint$1(0, t1.get$offset(e))) {
          t2 = this.audioManager;
          t1 = this.setVolume$2(this.musicBar, t1.get$offset(e));
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2._musicGain.gain.value = this.baseMusicVolume * t1;
        }
      }
      return false;
    }, "call$1", "get$shoot", 2, 0, 51],
    castRay$2: function(cent, dir) {
      var t1, r, objs, intersects;
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 0, -1);
      this.moveVector = t1;
      this.moveVector = this.rotMatrix.rotate3$1(t1);
      S.Projector$();
      dir = dir.$sub(0, cent);
      dir.normalize$0(0);
      this.gunDir.setFrom$1(dir);
      if (this.gun.chargedSecondary)
        return;
      r = new S.Ray(cent, dir, 0, 1 / 0, 0.0001);
      r.Ray$4(cent, dir, 0, 1 / 0);
      objs = [];
      if (this.state === 10)
        ;
      else {
        t1 = this.enemiesByObjects;
        t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)]);
        objs = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }
      intersects = r.intersectObjects$2$recursive(objs, true);
      if (this.state === 10)
        ;
      else
        C.JSArray_methods.forEach$1(intersects, new K.GameContext_castRay_closure(this));
    },
    hitPlayer$2: function(enemyPos, radius) {
      var t1, t2;
      if (this.playerHit > 0 || this.playerInBubble)
        return;
      t1 = this.playerPosition;
      t1.toString;
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setFrom$1(t1);
      t2 = t2.sub$1(enemyPos);
      t2 = t2.get$length(t2);
      if (typeof radius !== "number")
        return H.iae(radius);
      if (t2 < 2.5 + radius) {
        this.audioManager.playClipFromSourceIn$4(0, "hurt_default", "hurt", false);
        this.playerHit = 30;
        if (--this.health <= 0)
          this.setGameState$1(100);
      }
    },
    setVolume$2: function(draw, p) {
      var t1 = J.$sub$n(p.get$x(p), draw.x);
      draw.width = t1;
      if (J.$lt$n(t1, 10))
        draw.width = 0;
      else if (J.$gt$n(draw.width, 90))
        draw.width = 100;
      return J.$div$n(draw.width, 100);
    },
    static: {"^": "GameContext_soundDir,GameContext_modelDir,GameContext_score,GameContext_displayScore,GameContext_lastScore,GameContext_scorePerLevel,GameContext_totalScore,GameContext_center,GameContext_groundBlocks,GameContext_groundBlockWidth,GameContext_minX,GameContext_maxX,GameContext_minZ,GameContext_maxZ,GameContext_constrainMovement,GameContext_moveSpeed,GameContext_rayRad,GameContext_hitDistance"}
  },
  GameContext_start_closure: {
    "^": "Closure:55;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t1.mouse.active = false;
      t1.SetScores$0();
      t1 = t1.audioManager;
      t1.pauseSources$0();
      t2 = t1._music._sound;
      if (t2 != null)
        t2.set$pause(0, true);
      t1._musicPaused = true;
    }
  },
  GameContext_start_closure0: {
    "^": "Closure:55;this_1",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.this_1;
      t2 = t1.audioManager;
      t2.resumeSources$0();
      t3 = t2._music._sound;
      if (t3 != null)
        t3.set$pause(0, false);
      t2._musicPaused = false;
      if (!t1.musicStarted) {
        t1.musicStarted = true;
        t2 = t1.audioManager._music;
        t2._stop$0();
        t3 = new Q.AudioSound(t2._simple_audio$_source, t2._clip, true, null, null, null, null, 1, false, false, null);
        t3._setupSourceNodeForPlayback$0();
        t2._sound = t3;
        t3.play$0(0);
      }
      t1.mouse.resetNextDelta = true;
    }
  },
  GameContext_loadAudio_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(e) {
      var t1 = this.this_0;
      t1.audioManager._music._clip = t1.idleMusic;
      t1.loaded = true;
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  GameContext_addHUD_closure: {
    "^": "Closure:39;",
    call$1: function(e) {
      J.set$visible$x(e, false);
      return false;
    }
  },
  GameContext_addHUD_closure0: {
    "^": "Closure:39;this_0",
    call$1: function(d) {
      return this.this_0.drawingContext.addDrawable2d$1(d);
    }
  },
  GameContext_work_closure: {
    "^": "Closure:39;",
    call$1: function(d) {
      J.set$visible$x(d, false);
      return false;
    }
  },
  GameContext_work_closure0: {
    "^": "Closure:39;",
    call$1: function(a) {
      return a.Update$0();
    }
  },
  GameContext_work_closure1: {
    "^": "Closure:39;",
    call$1: function(d) {
      J.set$visible$x(d, true);
      return true;
    }
  },
  GameContext_updateUI_closure: {
    "^": "Closure:39;",
    call$1: function(e) {
      J.set$visible$x(e, false);
      return false;
    }
  },
  GameContext_updateUI_closure0: {
    "^": "Closure:39;",
    call$1: function(e) {
      J.set$visible$x(e, true);
      return true;
    }
  },
  GameContext_updateUI_closure1: {
    "^": "Closure:39;",
    call$1: function(e) {
      J.set$visible$x(e, false);
      return false;
    }
  },
  GameContext_updateUI_closure2: {
    "^": "Closure:39;",
    call$1: function(e) {
      J.set$visible$x(e, false);
      return false;
    }
  },
  GameContext_initLevelSquares_closure: {
    "^": "Closure:39;this_0",
    call$1: function(s) {
      C.JSArray_methods.remove$1(this.this_0.drawingContext.drawables2d, s);
      return;
    }
  },
  GameContext_initLevelSquares_closure0: {
    "^": "Closure:39;this_1",
    call$1: function(b) {
      C.JSArray_methods.remove$1(this.this_1.drawingContext.drawables2d, b);
      return;
    }
  },
  GameContext_updateState_closure: {
    "^": "Closure:39;box_0,this_1",
    call$1: [function(b) {
      var t1, t2;
      t1 = b.get$material();
      t1 = t1.get$color(t1);
      t2 = this.this_1;
      return t1.setHex$1(this.box_0.i_0 === t2.lightPos ? t2.activeColor : t2.inactiveColor);
    }, "call$1", null, 2, 0, null, 58, "call"]
  },
  GameContext_updateState_closure0: {
    "^": "Closure:39;",
    call$1: function(a) {
      var t1 = J.getInterceptor$x(a);
      return !J.$eq(t1.get$state(a), 20) && !J.$eq(t1.get$state(a), 15);
    }
  },
  GameContext_updateState_closure1: {
    "^": "Closure:39;",
    call$1: function(a) {
      return J.get$completed$x(a) === false;
    }
  },
  GameContext_getGroundState_closure: {
    "^": "Closure:39;_x_0,_y_1",
    call$1: function(a) {
      var t1 = J.getInterceptor$x(a);
      return J.$eq(t1.get$x(a), this._x_0) && J.$eq(t1.get$y(a), this._y_1);
    }
  },
  GameContext_setGameState_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(b) {
      var t1 = b.get$material();
      return t1.get$color(t1).setHex$1(this.this_0.inactiveColor);
    }, "call$1", null, 2, 0, null, 58, "call"]
  },
  GameContext_setGameState_closure0: {
    "^": "Closure:39;",
    call$1: function(a) {
      J.set$state$x(a, 20);
      return 20;
    }
  },
  GameContext_setGameState_closure1: {
    "^": "Closure:39;",
    call$1: function(a) {
      a.set$timeToLive(a.get$timeToLive() - 1);
      if (a.get$timeToLive() === 0) {
        J.set$state$x(a, 11);
        a.set$counter(0);
      }
    }
  },
  GameContext_setGameState_closure2: {
    "^": "Closure:39;",
    call$1: function(a) {
      return a.get$enemyType() === 0 && J.get$type$x(a) === 20 && a.get$timeToLive() > 0;
    }
  },
  GameContext_setGameState_closure3: {
    "^": "Closure:39;",
    call$1: function(a) {
      return a.get$enemyType() === 1 && J.get$type$x(a) === 20 && a.get$timeToLive() > 0;
    }
  },
  GameContext_setGameState_closure4: {
    "^": "Closure:39;",
    call$1: function(a) {
      J.set$state$x(a, 11);
      a.set$counter(0);
      a.set$timeToLive(0);
    }
  },
  GameContext_setGameState_closure5: {
    "^": "Closure:39;",
    call$1: function(e) {
      return e.Hit$2(null, false);
    }
  },
  GameContext_castRay_closure: {
    "^": "Closure:39;this_0",
    call$1: function(i) {
      return this.this_0.enemiesByObjects.$index(0, J.get$parent$x(i.get$object())).Hit$1(i.get$face());
    }
  }
}],
["GameContextExtended", "Dart/game_context_extended.dart", , M, {
  "^": "",
  Updateable: {
    "^": "Object;context*",
    Update$0: function() {
      return false;
    }
  }
}],
["Gun", "Dart/gun.dart", , V, {
  "^": "",
  Gun0: {
    "^": "Object;gameContext,drawingContext,loader,readyMesh,reloadingMesh,object<,rayMesh,ray1,ray2,blastMeshes,reloadMeshes,reloadCounter,reload,blastCounter,chargeCounter,maxCharge,chargingSecondary,chargedSecondary,firedSecondary,currentOrb,orbPosition",
    TargetLoaded$1: function(obj) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = J.getInterceptor$x(obj);
      t1.set$name(obj, "Gun");
      J.where$1$ax(t1.get$children(obj), new V.Gun_TargetLoaded_closure()).forEach$1(0, new V.Gun_TargetLoaded_closure0());
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(0.2, 0.2, 0.2);
      t1.set$scale(obj, t2);
      t1.get$position(obj).setValues$3(1.4, -1.3, -3);
      obj.get$rotation().setValues$3(0, -1.4959965017094252, 3.141592653589793);
      obj.set$renderDepth(-100);
      this.drawingContext.scene.add$1(0, obj);
      this.drawingContext.cam.add$1(0, obj);
      this.object = obj;
      t1 = J.where$1$ax(J.get$children$x(obj), new V.Gun_TargetLoaded_closure1());
      this.readyMesh = t1.get$first(t1);
      t1 = J.where$1$ax(J.get$children$x(this.object), new V.Gun_TargetLoaded_closure2());
      this.reloadingMesh = t1.get$first(t1);
      t1 = J.where$1$ax(J.get$children$x(this.object), new V.Gun_TargetLoaded_closure3());
      this.rayMesh = t1.get$first(t1);
      t1 = this.blastMeshes;
      C.JSArray_methods.addAll$1(t1, J.where$1$ax(J.get$children$x(this.object), new V.Gun_TargetLoaded_closure4()));
      C.JSArray_methods.addAll$1(this.reloadMeshes, J.where$1$ax(J.get$children$x(this.object), new V.Gun_TargetLoaded_closure5()));
      C.JSArray_methods.forEach$1(t1, new V.Gun_TargetLoaded_closure6());
      t1 = V.GunOrb$(this.gameContext);
      this.currentOrb = t1;
      t2 = this.orbPosition.storage;
      t1.Gun$GunOrb$position.setValues$3(t2[0], t2[1], t2[2]);
      this.currentOrb.scale.setValues$3(5, 5, 5);
      t2 = this.currentOrb.Gun$GunOrb$obj;
      t2.visible = false;
      J.add$1$ax(this.object, t2);
      this.object.updateMatrixWorld$0();
      t2 = S.SphereGeometry$(0.1, 8, 6, 0, 6.283185307179586, 0, 3.141592653589793);
      t1 = S.Color$(16777215);
      t3 = S.Color$(16777215);
      t4 = S.Color$(16776960);
      t5 = S.Color$(1118481);
      t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t6.setValues$3(1, 1, 1);
      t7 = $.MaterialCount;
      $.MaterialCount = t7 + 1;
      t7 = new S.MeshPhongMaterial(t1, t3, t4, t5, 30, false, false, false, t6, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t7, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t1 = new Float32Array(H._checkLength(2));
      t1[0] = 1;
      t1[1] = 1;
      t7.normalScale = new T.Vector2(t1);
      t1 = S.Mesh$(t2, t7);
      t2 = this.object;
      t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t3.setValues$3(0, 0, 0);
      t1.position = t2.localToWorld$1(t3);
      this.ray1 = t1;
      t1 = S.SphereGeometry$(0.1, 8, 6, 0, 6.283185307179586, 0, 3.141592653589793);
      t3 = S.Color$(16777215);
      t2 = S.Color$(16777215);
      t4 = S.Color$(16776960);
      t5 = S.Color$(1118481);
      t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t6.setValues$3(1, 1, 1);
      t7 = $.MaterialCount;
      $.MaterialCount = t7 + 1;
      t7 = new S.MeshPhongMaterial(t3, t2, t4, t5, 30, false, false, false, t6, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t7, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = 1;
      t2[1] = 1;
      t7.normalScale = new T.Vector2(t2);
      t1 = S.Mesh$(t1, t7);
      t2 = this.object;
      t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t3.setValues$3(-10, 0, 0);
      t1.position = t2.localToWorld$1(t3);
      this.ray2 = t1;
    },
    Update$0: function() {
      var t1, t2, scale;
      if (this.object == null)
        return;
      if (!this.Ready$0() && !this.chargingSecondary && this.blastCounter === 0) {
        t1 = this.reload;
        if (--this.reloadCounter === t1 - 3)
          this.gameContext.audioManager.playClipFromSourceIn$4(0, "reload_default", "reload", false);
        if (this.reloadCounter === 1)
          this.gameContext.audioManager.playClipFromSourceIn$4(0, "reloaded_default", "reloaded", false);
        if (this.reloadCounter < t1 - 2)
          this.object.get$rotation().setValues$3(0.7853981633974483 * (P.max(0, this.reloadCounter - t1 / 1.5) / t1), -1.4959965017094252, 0);
        C.JSArray_methods.forEach$1(this.reloadMeshes, new V.Gun_Update_closure(this));
      } else {
        C.JSArray_methods.forEach$1(this.reloadMeshes, new V.Gun_Update_closure0());
        this.object.get$rotation().setValues$3(0, -1.4959965017094252, 0);
      }
      t1 = this.blastCounter;
      t2 = this.blastMeshes;
      if (t1 > 0) {
        this.blastCounter = t1 - 1;
        C.JSArray_methods.forEach$1(t2, new V.Gun_Update_closure1());
      } else
        C.JSArray_methods.forEach$1(t2, new V.Gun_Update_closure2());
      if (this.gameContext.mouse._buttons.containsKey$1(0, 2)) {
        if (!this.firedSecondary) {
          this.chargingSecondary = true;
          if (!this.chargedSecondary)
            if (++this.chargeCounter >= this.maxCharge)
              this.chargedSecondary = true;
        }
      } else {
        this.firedSecondary = false;
        t1 = this.chargeCounter;
        if (t1 > 0)
          if (this.chargedSecondary)
            this.ReleaseOrb$1(false);
          else {
            --t1;
            this.chargeCounter = t1;
            this.chargedSecondary = false;
            if (t1 <= 0)
              this.chargingSecondary = false;
          }
      }
      t1 = this.chargeCounter;
      t2 = this.currentOrb;
      if (t1 > 0) {
        t2 = t2.Gun$GunOrb$obj;
        t2.visible = true;
        scale = 5 * t1 / this.maxCharge;
        t2.scale.setValues$3(scale, scale, scale);
      } else {
        t1 = t2.Gun$GunOrb$obj;
        t1.visible = false;
        t1.scale.setValues$3(0, 0, 0);
      }
      t1 = this.Ready$0();
      t2 = this.readyMesh;
      if (t1) {
        J.set$visible$x(t2, true);
        J.set$visible$x(this.reloadingMesh, false);
      } else {
        J.set$visible$x(t2, false);
        J.set$visible$x(this.reloadingMesh, true);
      }
    },
    Shoot$1: function(point) {
      this.gameContext.audioManager.playClipFromSourceIn$4(0, "shoot_default", "shoot", false);
      this.reloadCounter = this.reload;
      if (this.chargedSecondary)
        this.ReleaseOrb$1(true);
      else {
        C.JSArray_methods.forEach$1(this.blastMeshes, new V.Gun_Shoot_closure());
        this.blastCounter = 3;
      }
    },
    ReleaseOrb$1: function(fire) {
      var t1, orb, pos, t2;
      this.firedSecondary = true;
      this.chargedSecondary = false;
      this.chargingSecondary = false;
      this.chargeCounter = 0;
      t1 = this.gameContext;
      orb = V.GunOrb$(t1);
      pos = new T.Vector3(new Float32Array(H._checkLength(3)));
      pos.setFrom$1(this.orbPosition);
      this.object.localToWorld$1(pos);
      orb.Gun$GunOrb$position.setFrom$1(pos);
      t2 = t1.gunDir;
      t2 = t2.$mul(0, fire ? 0.3 : 0);
      t1 = t1.moveVector;
      orb.velocity = t2.$add(0, t1.$mul(0, fire ? 1.5 : 0));
      t1 = orb.Gun$GunOrb$context;
      orb.Gun$GunOrb$context = t1;
      t1.updateables.push(orb);
    },
    Ready$0: function() {
      if (this.reloadCounter <= 0)
        var t1 = this.chargedSecondary || !this.chargingSecondary;
      else
        t1 = false;
      return t1;
    },
    Gun$2: function(gameContext, drawingContext) {
      var t1 = this.drawingContext;
      this.drawingContext = t1 == null ? this.gameContext.drawingContext : t1;
      t1 = new S.RSMtlObjLoader(null, "Models/arenaGun.obj", null, [], null, null, null, null, null);
      t1.RSMtlObjLoader$2("Models/arenaGun.obj", null);
      this.loader = t1;
      t1.load$0(0).then$1(new V.Gun_closure(this));
    },
    static: {Gun$: function(gameContext, drawingContext) {
        var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t1.setValues$3(-30, 0, 0);
        t1 = new V.Gun0(gameContext, drawingContext, null, null, null, null, null, null, null, [], [], 0, 30, 0, 0, 50, false, false, false, null, t1);
        t1.Gun$2(gameContext, drawingContext);
        return t1;
      }}
  },
  Gun_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(me) {
      return this.this_0.TargetLoaded$1(me);
    }, "call$1", null, 2, 0, null, 59, "call"]
  },
  Gun_TargetLoaded_closure: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.startsWith$1$s(J.get$name$x(m), "CylinderBOOL");
    }
  },
  Gun_TargetLoaded_closure0: {
    "^": "Closure:60;",
    call$1: function(m) {
      J.set$visible$x(m, false);
      return false;
    }
  },
  Gun_TargetLoaded_closure1: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.startsWith$1$s(J.get$name$x(m), "READY");
    }
  },
  Gun_TargetLoaded_closure2: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.startsWith$1$s(J.get$name$x(m), "RELOADING");
    }
  },
  Gun_TargetLoaded_closure3: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.startsWith$1$s(J.get$name$x(m), "BLAST2");
    }
  },
  Gun_TargetLoaded_closure4: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.startsWith$1$s(J.get$name$x(m), "BLAST");
    }
  },
  Gun_TargetLoaded_closure5: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.startsWith$1$s(J.get$name$x(m), "L");
    }
  },
  Gun_TargetLoaded_closure6: {
    "^": "Closure:39;",
    call$1: function(b) {
      J.set$visible$x(b, false);
      return false;
    }
  },
  Gun_Update_closure: {
    "^": "Closure:60;this_0",
    call$1: function(m) {
      var t1 = this.this_0;
      return J.get$position$x(m).setValues$3(4 / t1.reload * t1.reloadCounter + 1, 0, 0);
    }
  },
  Gun_Update_closure0: {
    "^": "Closure:60;",
    call$1: function(m) {
      return J.get$position$x(m).setValues$3(0, 0, 0);
    }
  },
  Gun_Update_closure1: {
    "^": "Closure:39;",
    call$1: function(b) {
      J.set$visible$x(b, true);
      return true;
    }
  },
  Gun_Update_closure2: {
    "^": "Closure:39;",
    call$1: function(b) {
      J.set$visible$x(b, false);
      return false;
    }
  },
  Gun_Shoot_closure: {
    "^": "Closure:39;",
    call$1: function(b) {
      J.set$visible$x(b, true);
      return true;
    }
  },
  GunOrb: {
    "^": "Enemy;context:Gun$GunOrb$context*,geo,obj:Gun$GunOrb$obj<,mesh,outLine,hitCounter,ttl,mat,orbColor,position:Gun$GunOrb$position>,velocity,scale',growth,parts:Gun$GunOrb$parts@,partSep:Gun$GunOrb$partSep<,score,targetsHit,audioSource:Gun$GunOrb$audioSource@,parts,partSep,hit,remove,suicide,deathBySuicide,obj,orb,position,audioSource,justHit,context",
    Update$0: function() {
      var t1, e, t2, t3, t4, v;
      this.Gun$GunOrb$position.add$1(0, this.velocity);
      if (this.hitCounter <= 70)
        for (t1 = $.get$Enemy_enemies(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          e = t1.__internal$_current;
          t2 = e.get$obj().position;
          t3 = this.Gun$GunOrb$obj.position;
          t2.toString;
          t4 = new T.Vector3(new Float32Array(3));
          t4.setFrom$1(t2);
          t3 = t4.sub$1(t3);
          if (t3.get$length(t3) < 3 * this.scale.storage[0] + 1)
            if (e.Hit$2(null, false) === true) {
              t2 = this.score;
              t3 = this.targetsHit;
              this.score = t2 + (5 + t3);
              this.targetsHit = t3 + 1;
            }
        }
      if (this.hitCounter === 1) {
        t1 = this.Gun$GunOrb$context;
        t2 = this.Gun$GunOrb$audioSource;
        t1.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t2), "sstart", false);
      }
      t1 = this.hitCounter;
      if (t1 > 0) {
        ++t1;
        this.hitCounter = t1;
      }
      if (t1 >= 100) {
        for (t1 = this.Gun$GunOrb$parts, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          v = t1.__internal$_current;
          t2 = J.getInterceptor$x(v);
          t2.set$x(v, 0);
          t2.set$y(v, -100);
          t2.set$z(v, 0);
        }
        return true;
      } else if (t1 > 70)
        for (t1 = this.Gun$GunOrb$parts, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          v = t1.__internal$_current;
          t2 = J.getInterceptor$x(v);
          t3 = t2.get$y(v);
          t2.set$y(v, J.$sub$n(t3, 0.1 + C.C__JSRandom.nextDouble$0() * 0.4));
        }
      else if (t1 === 70) {
        t1 = this.targetsHit;
        if (t1 > 0) {
          t2 = $.GameContext_score;
          t3 = this.score;
          $.GameContext_score = t2 + t3;
          t2 = this.Gun$GunOrb$context;
          t2.targetsHit = t1;
          t2.scorePerShot = t3;
          t2.setAddScoreText$0();
        }
        t1 = this.Gun$GunOrb$context.drawingContext;
        t2 = this.Gun$GunOrb$obj;
        t1.scene.remove$1(0, t2);
        t2 = $.GunOrb_particles.Reserve$0();
        this.Gun$GunOrb$parts = t2;
        for (t1 = new H.ListIterator(t2, t2.length, 0, null); t1.moveNext$0();) {
          v = t1.__internal$_current;
          t2 = J.getInterceptor$x(v);
          t2.set$x(v, -1 + C.C__JSRandom.nextDouble$0() * 2);
          t2.set$y(v, -1 + C.C__JSRandom.nextDouble$0() * 2);
          t2.set$z(v, -1 + C.C__JSRandom.nextDouble$0() * 2);
          t2.normalize$0(v);
          t2.multiply$1(v, this.scale.$mul(0, 3));
          t2.add$1(v, this.Gun$GunOrb$position);
        }
        t1 = this.Gun$GunOrb$audioSource;
        if (t1 != null)
          this.Gun$GunOrb$context.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t1), "spop", false);
      } else if (t1 >= 20) {
        t1 = this.orbColor;
        t1._g += 0.005;
        t1._r += 0.005;
        this.mat.color.setHex$1(t1.getHex$0());
      } else if (t1 > 0)
        this.scale.add$1(0, this.growth);
      else if (--this.ttl <= 0)
        this.hitCounter = 69;
      return false;
    },
    Hit$2: function(f, countScore) {
      var t1, t2;
      if (this.hitCounter === 0 && this.velocity != null) {
        this.hitCounter = 1;
        this.velocity.setValues$3(0, 0, 0);
        t1 = this.Gun$GunOrb$context.audioManager.makeSource$1("GunOrb");
        this.Gun$GunOrb$audioSource = t1;
        t2 = this.Gun$GunOrb$position.storage;
        J.setPosition$3$x(t1, t2[0], t2[1], t2[2]);
        J.set$volume$x(this.Gun$GunOrb$audioSource, 40 * $.AudioManager_positionalScale);
      }
    },
    Hit$1: function(f) {
      return this.Hit$2(f, true);
    },
    GunOrb$1: function(context) {
      var t1, t2, t3, t4, t5, t6, t7, outobj;
      this.geo = S.SphereGeometry$(3, 8, 6, 0, 6.283185307179586, 0, 3.141592653589793);
      t1 = S.Color$(153);
      this.orbColor = t1;
      t1 = S.Color$(t1.getHex$0());
      t2 = S.Color$(16777215);
      t3 = S.Color$(0);
      t4 = S.Color$(1118481);
      t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t5.setValues$3(1, 1, 1);
      t6 = $.MaterialCount;
      $.MaterialCount = t6 + 1;
      t6 = new S.MeshPhongMaterial(t1, t2, t3, t4, 30, false, false, false, t5, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t1 = new Float32Array(H._checkLength(2));
      t1[0] = 1;
      t1[1] = 1;
      t6.normalScale = new T.Vector2(t1);
      this.mat = t6;
      this.mesh = S.Mesh$(this.geo, t6);
      t1 = this.geo;
      t2 = S.Color$(0);
      t3 = S.Color$(16777215);
      t4 = S.Color$(170);
      t5 = S.Color$(1118481);
      t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t6.setValues$3(1, 1, 1);
      t7 = $.MaterialCount;
      $.MaterialCount = t7 + 1;
      t7 = new S.MeshPhongMaterial(t2, t3, t4, t5, 30, false, false, false, t6, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t7, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = 1;
      t2[1] = 1;
      t7.normalScale = new T.Vector2(t2);
      t1 = S.Mesh$(t1, t7);
      this.outLine = t1;
      t1.material.side = 1;
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(1.1, 1.1, 1.1);
      t1.scale = t2;
      t2 = this.Gun$GunOrb$context.drawingContext.addMesh$1(this.mesh);
      this.Gun$GunOrb$obj = t2;
      t2.position = this.Gun$GunOrb$position;
      t2.scale = this.scale;
      outobj = this.Gun$GunOrb$context.drawingContext.addMesh$1(this.outLine);
      this.Gun$GunOrb$obj.add$1(0, outobj);
      this.Gun$GunOrb$context.enemiesByObjects.$indexSet(0, outobj, this);
      if ($.GunOrb_particles == null) {
        t1 = S.EnemyParticles$(this.Gun$GunOrb$context.drawingContext, 255, 100, 0.5);
        $.GunOrb_particles = t1;
        t1.partPerEnemy = 50;
      }
    },
    static: {"^": "GunOrb_particles", GunOrb$: function(context) {
        var t1, t2, t3;
        t1 = new Float32Array(H._checkLength(3));
        t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t2.setValues$3(1, 1, 1);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0.4, 0.4, 0.4);
        t3 = new V.GunOrb(context, null, null, null, null, 0, 300, null, null, new T.Vector3(t1), null, t2, t3, null, 3, 0, 0, null, null, 0.5, false, false, false, false, null, null, null, null, false, null);
        t3.GunOrb$1(context);
        return t3;
      }}
  }
}],
["LocalHighscore", "Dart/local_highscore.dart", , M, {
  "^": "",
  LocalHighscore: {
    "^": "Object;scores,localStorage",
    Load$0: function() {
      var scoreStr, scoreStrings, i;
      scoreStr = this.localStorage.getItem("AreasScore");
      if (scoreStr == null)
        return;
      scoreStrings = scoreStr.split(";");
      for (i = 0; i < scoreStrings.length; ++i)
        this.scores.push(H.Primitives_parseInt(scoreStrings[i], null, null));
    },
    Add$1: function(score) {
      var t1;
      this.scores.push(score);
      t1 = this.scores;
      C.JSArray_methods.checkMutable$1(t1, "sort");
      H.IterableMixinWorkaround_sortList(t1, new M.LocalHighscore_Add_closure());
      t1 = this.scores;
      if (t1.length > 5) {
        t1 = C.JSArray_methods.sublist$2(t1, 0, 5);
        this.scores = t1;
      }
      this.localStorage.setItem("AreasScore", C.JSArray_methods.join$1(t1, ";"));
    },
    static: {"^": "LocalHighscore_amount,LocalHighscore_lStoreName"}
  },
  LocalHighscore_Add_closure: {
    "^": "Closure:61;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(b, a);
    }
  }
}],
["Roller", "Dart/roller.dart", , U, {
  "^": "",
  Roller: {
    "^": "Enemy;torusMesh,torusObj,outTorusMesh,outTorusObj,cylinderMeshes,cylinderObjs,velocity,spawnArea,speed,maxSpeed,targetOffset,counter?,dir,dirX,dirY,outerRad,oob,growth,scaleGrowth,parts,partSep,hit,remove,suicide,deathBySuicide,obj,orb,position,audioSource,justHit,context",
    SetDirs$0: function() {
      this.dirX = 0;
      this.dirY = 0;
      switch (this.dir) {
        case 0:
          this.dirX = -1;
          break;
        case 1:
          this.dirY = 1;
          break;
        case 2:
          this.dirX = 1;
          break;
        case 3:
          this.dirY = -1;
          break;
      }
    },
    Update$0: function() {
      var t1, t2, v, t3, t4, t5, pingOff, a;
      t1 = this.growth;
      if (t1 < 20)
        ;
      else if (t1 < 70) {
        this.obj.scale.add$1(0, this.scaleGrowth);
        t1 = $.Roller_torusGeo;
        t2 = t1.radius;
        t1 = t1.tube;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.outerRad = (t2 + t1) * this.obj.scale.storage[0];
      }
      ++this.growth;
      if (this.UpdateEnemy$0())
        return true;
      if (this.hit) {
        t1 = this.counter;
        if (t1 >= 20)
          this.remove = true;
        else {
          this.counter = t1 + 1;
          for (t1 = this.parts, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
            v = t1.__internal$_current;
            t2 = J.getInterceptor$x(v);
            t3 = t2.get$x(v);
            t4 = J.$sub$n(t2.get$x(v), this.position.storage[0]);
            t5 = this.counter;
            t2.set$x(v, J.$add$ns(t3, J.$div$n(t4, t5 * t5 / 2)));
            t5 = t2.get$y(v);
            t4 = J.$sub$n(t2.get$y(v), this.position.storage[1]);
            t3 = this.counter;
            t2.set$y(v, J.$add$ns(t5, J.$div$n(t4, t3 * t3 / 2)));
            t3 = t2.get$z(v);
            t4 = J.$sub$n(t2.get$z(v), this.position.storage[2]);
            t5 = this.counter;
            t2.set$z(v, J.$add$ns(t3, t4 / (t5 * t5 / 2)));
          }
        }
        return false;
      }
      this.context.hitPlayer$2(this.position, this.outerRad);
      t1 = this.velocity;
      t2 = t1.storage;
      t2[1] = t2[1] - 0.1;
      this.position.add$1(0, t1);
      if (this.oob) {
        if (this.position.storage[1] < -250)
          this.remove = true;
      } else {
        t1 = this.position;
        t2 = t1.storage[1];
        t3 = this.context;
        t4 = t3.groundHeight;
        t5 = this.outerRad;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (t2 < t4 + t5 && this.velocity.storage[1] < 0)
          if (t3.onGround$1(t1)) {
            this.playBounce$0();
            t1 = this.velocity.storage;
            t1[1] = -t1[1];
          } else
            this.oob = true;
      }
      t1 = this.dir;
      t1 = t1 === 0 || t1 === 1;
      t2 = this.obj;
      if (t1) {
        t1 = t2.rotation.storage;
        t1[2] = t1[2] + 3.141592653589793 / (32 * t2.scale.storage[0]);
      } else {
        t1 = t2.rotation.storage;
        t1[2] = t1[2] - 3.141592653589793 / (32 * t2.scale.storage[0]);
      }
      t1 = this.context.areas;
      t1 = new H.ListIterator(t1, t1.length, 0, null);
      while (true) {
        if (!t1.moveNext$0()) {
          pingOff = false;
          break;
        }
        a = t1.__internal$_current;
        if (a.get$feature() != null)
          if (J.get$type$x(a) === 10) {
            t2 = this.position;
            t3 = a.get$feature().position;
            t2.toString;
            t4 = new T.Vector3(new Float32Array(3));
            t4.setFrom$1(t2);
            t3 = t4.sub$1(t3);
            t3 = t3.get$length(t3);
            t4 = a.get$featureSphere().radius;
            t2 = a.get$feature().scale.storage[0];
            if (typeof t4 !== "number")
              return t4.$mul();
            t5 = this.outerRad;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = t3 < t4 * t2 + t5;
            t2 = t5;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t2 = a.get$feature().position;
          t3 = this.position;
          t2.toString;
          t4 = new T.Vector3(new Float32Array(3));
          t4.setFrom$1(t2);
          t3 = t4.sub$1(t3);
          t3 = t3.get$length(t3);
          t4 = a.get$feature().position;
          t2 = this.position.$add(0, this.velocity);
          t4.toString;
          t5 = new T.Vector3(new Float32Array(3));
          t5.setFrom$1(t4);
          t2 = t5.sub$1(t2);
          if (t3 > t2.get$length(t2)) {
            pingOff = true;
            break;
          }
        }
      }
      if (pingOff) {
        this.playBounce$0();
        this.velocity = this.velocity.$negate(0);
        t1 = this.dir += 2;
        if (t1 > 3)
          this.dir = t1 - 4;
      }
      return false;
    },
    Roller$1: function(spawnArea) {
      var availableDirs, t1, t2, t3, t4, t5, t6, t7, i, cMesh, obj;
      this.partSep = 1;
      availableDirs = [];
      for (t1 = this.spawnArea; this.dir < 4;) {
        this.dir = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * 5)));
        this.SetDirs$0();
        t2 = t1.context;
        t3 = this.dirX;
        t4 = t1.x;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = this.dirY;
        t6 = t1.y;
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (t2.getGroundState$2(t3 + t4, t5 + t6) === 0)
          availableDirs.push(this.dir);
      }
      t2 = availableDirs.length;
      if (t2 === 0) {
        this.remove = true;
        return;
      }
      t2 = Z.randInt(0, t2 - 1);
      if (t2 < 0 || t2 >= availableDirs.length)
        return H.ioore(availableDirs, t2);
      this.dir = availableDirs[t2];
      this.SetDirs$0();
      t2 = t1.groundTile.position.storage[0];
      t3 = C.C__JSRandom.nextDouble$0();
      t4 = t1.groundTile.position.storage;
      t5 = t4[1];
      t4 = t4[2];
      t6 = C.C__JSRandom.nextDouble$0();
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 + (-3 + t3 * 6), t5 + 5, t4 + (-3 + t6 * 6));
      this.position = t7;
      this.InitEnemy$1(t1.context);
      t1 = C.C__JSRandom.nextDouble$0();
      t2 = C.C__JSRandom.nextDouble$0();
      t3 = C.C__JSRandom.nextDouble$0();
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(-0.5 + t1, -0.5 + t2, -0.5 + t3 * 0);
      this.targetOffset = t4;
      this.speed = 3 + C.C__JSRandom.nextDouble$0();
      t1 = C.C__JSRandom.nextDouble$0();
      t2 = this.dirX;
      t3 = C.C__JSRandom.nextDouble$0();
      t4 = this.dirY;
      t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t5.setValues$3((0.2 + t1 * 0.2) * t2, 1, (0.2 + t3 * 0.2) * t4);
      this.velocity = t5;
      t5.normalize$0(0);
      this.velocity = this.velocity.$mul(0, this.speed);
      t5 = N.EnemyOrb$(this.context, this);
      this.orb = t5;
      t5 = t5.obj;
      this.obj = t5;
      t5.position = this.position;
      t4 = t5.scale;
      t3 = this.speed;
      if (typeof t3 !== "number")
        return t3.$sub();
      t5.scale = t4.$mul(0, t3 - 2.5);
      t1 = this.dir;
      if (t1 === 1 || t1 === 3)
        this.obj.rotation.storage[1] = 1.5707963267948966;
      t1 = $.Roller_torusGeo;
      if (t1 == null) {
        t1 = S.TorusGeometry$(9, 1.5, 16, 12, 6.283185307179586);
        $.Roller_torusGeo = t1;
      }
      t1 = S.Mesh$(t1, $.EnemyOrb_mat);
      this.torusMesh = t1;
      t1 = this.context.drawingContext.addMesh$1(t1);
      this.torusObj = t1;
      this.obj.add$1(0, t1);
      t1 = S.Mesh$($.Roller_torusGeo, $.EnemyOrb_outMat);
      this.outTorusMesh = t1;
      t1.material.side = 1;
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(1.05, 1.05, 1.05);
      t1.scale = t2;
      t2 = this.context.drawingContext.addMesh$1(this.outTorusMesh);
      this.outTorusObj = t2;
      this.torusObj.add$1(0, t2);
      if ($.Roller_cylinderGeo == null) {
        t1 = S.CylinderGeometry$(1, 1, 9, 4, 1, false);
        $.Roller_cylinderGeo = t1;
        t2 = t1.height;
        if (typeof t2 !== "number")
          return t2.$div();
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, t2 / 2, 0);
        t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t2.setIdentity$0();
        t2.setTranslation$1(t3);
        t1.applyMatrix$1(t2);
      }
      for (t1 = this.cylinderMeshes, t2 = this.cylinderObjs, i = 0; i < 4; ++i) {
        cMesh = S.Mesh$($.Roller_cylinderGeo, $.EnemyOrb_mat);
        t1.push(cMesh);
        t3 = this.context.drawingContext;
        obj = S.Object3D$();
        obj.add$1(0, cMesh);
        obj.receiveShadow = false;
        obj.castShadow = false;
        t3.scene.add$1(0, obj);
        t2.push(obj);
        obj.rotation.storage[2] = 1.5707963267948966 * i;
        this.obj.add$1(0, obj);
      }
      t1 = $.Roller_torusGeo;
      t2 = t1.radius;
      t1 = t1.tube;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.outerRad = (t2 + t1) * this.obj.scale.storage[0];
      this.context.enemiesByObjects.$indexSet(0, this.torusObj, this);
    },
    static: {"^": "Roller_torusGeo,Roller_cylinderGeo", Roller$: function(spawnArea) {
        var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t1.setValues$3(0.01, 0.01, 0.01);
        t1 = new U.Roller(null, null, null, null, [], [], null, spawnArea, null, null, null, 0, 0, 0, 0, null, false, 0, t1, null, 0.5, false, false, false, false, null, null, null, null, false, null);
        t1.Roller$1(spawnArea);
        return t1;
      }}
  }
}],
["ThreeMath", "package:three/src/core/three_math.dart", , Z, {
  "^": "",
  randInt: function(low, high) {
    return low + C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(C.C__JSRandom.nextDouble$0() * (high - low + 1))));
  }
}],
["Train", "Dart/train.dart", , K, {
  "^": "",
  Train: {
    "^": "Updateable;mesh,outMesh,obj<,outObj,state*,parts,partPos,trainNum,audioSource,audioSound,velocity,stretch,passes,line,orientation,direction,groundMeshes,counter?,subCounter,context",
    GetPos$1: function(i) {
      var x, y, t0;
      x = this.line;
      y = this.direction === 1 ? i : 6 - (i + 1);
      if (this.orientation === 1) {
        t0 = y;
        y = x;
        x = t0;
      }
      return [x, y];
    },
    Update$0: function() {
      var t1, i, pos, x, y, t2, mat, part, t3, done;
      switch (this.state) {
        case C.TrainState_0:
          this.passes = Z.randInt(3, 5);
          this.line = Z.randInt(0, 5);
          this.orientation = Z.randInt(0, 1);
          this.direction = Z.randInt(0, 1) === 1 ? 1 : -1;
          for (t1 = this.groundMeshes, i = 0; i < 6; ++i) {
            pos = this.GetPos$1(i);
            x = pos[0];
            y = pos[1];
            if (J.contains$1$asx($.get$Area_reservedTiles(), J.toString$0(x) + J.toString$0(y)))
              return false;
            t2 = this.context.ground;
            t2.length;
            if (x >>> 0 !== x || x >= 6)
              return H.ioore(t2, x);
            t2 = t2[x];
            t2.length;
            if (y >>> 0 !== y || y >= 6)
              return H.ioore(t2, y);
            t1[i] = t2[y];
          }
          for (i = 0; i < 6; ++i) {
            pos = this.GetPos$1(i);
            x = pos[0];
            y = pos[1];
            $.get$Area_reservedTiles().push(J.toString$0(x) + J.toString$0(y));
          }
          t1 = this.orientation;
          t2 = this.velocity;
          if (t1 === 1) {
            this.obj.rotation.storage[2] = 1.5707963267948966;
            t2.storage[2] = 0;
          } else
            t2.storage[0] = 0;
          t1 = this.direction;
          t1.toString;
          this.velocity = t2.$mul(0, t1);
          this.state = C.TrainState_1;
          break;
        case C.TrainState_1:
          if (this.subCounter > 15) {
            this.subCounter = 0;
            t1 = this.groundMeshes;
            t2 = this.counter;
            if (t2 < 0 || t2 >= 6)
              return H.ioore(t1, t2);
            mat = t1[t2].material;
            mat.get$color(mat).setHex$1($.EnemyOrb_mat.color.getHex$0());
            if (++this.counter === 6) {
              this.counter = 0;
              this.subCounter = 0;
              this.state = C.TrainState_2;
              t1 = this.context;
              t2 = this.audioSource;
              this.audioSound = t1.audioManager.playClipFromSourceIn$4(0, J.get$name$x(t2), "eTrain", true);
            }
          }
          ++this.subCounter;
          break;
        case C.TrainState_2:
          for (i = 0; i < 2; ++i) {
            t1 = this.parts;
            t2 = this.partPos;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            part = t1[t2];
            t1 = J.getInterceptor$x(part);
            t1.set$x(part, -1 + C.C__JSRandom.nextDouble$0() * 2);
            t1.set$y(part, -1 + C.C__JSRandom.nextDouble$0() * 2);
            t1.set$z(part, -1 + C.C__JSRandom.nextDouble$0() * 2);
            t1.normalize$0(part);
            t2 = $.Train_geo.radiusTop;
            t3 = new Float32Array(3);
            t3[0] = t2;
            t3[1] = t2;
            t3[2] = t2;
            t1.multiply$1(part, new T.Vector3(t3));
            t1.add$1(part, this.obj.position);
            part.sub$1(this.velocity);
            part.sub$1(this.velocity);
            if (++this.partPos >= this.parts.length)
              this.partPos = 0;
          }
          this.context.hitPlayer$2(this.obj.position, 25);
          t1 = this.counter;
          t2 = this.obj;
          if (t1 === 0) {
            t2.position.setFrom$1(this.context.groundCenter.$sub(0, this.velocity.$mul(0, this.stretch)));
            t1 = this.orientation;
            t2 = this.obj;
            if (t1 === 1) {
              t1 = t2.position;
              t2 = $.get$GameContext_center().storage[0];
              t3 = this.line;
              if (typeof t3 !== "number")
                return t3.$mul();
              t1.storage[2] = t2 + t3 * 50;
            } else {
              t1 = t2.position;
              t2 = $.get$GameContext_center().storage[2];
              t3 = this.line;
              if (typeof t3 !== "number")
                return t3.$mul();
              t1.storage[0] = t2 + t3 * 50;
            }
            t2 = C.C__JSRandom.nextDouble$0();
            t1.storage[1] = 0 + t2 * 20;
            this.counter = 1;
          } else {
            t1 = this.audioSource;
            t2 = t2.position.storage;
            J.setPosition$3$x(t1, t2[0], t2[1], t2[2]);
            t2 = this.audioSource;
            t1 = this.velocity.storage;
            J.setVelocity$3$x(t2, t1[0], t1[1], t1[2]);
            this.obj.position.add$1(0, this.velocity);
            done = Math.abs(this.velocity.storage[0]) > 0 && Math.abs(this.obj.position.storage[0]) > Math.abs(this.velocity.storage[0]) * this.stretch * 2 && true;
            if (Math.abs(this.velocity.storage[2]) > 0 && Math.abs(this.obj.position.storage[2]) > Math.abs(this.velocity.storage[2]) * this.stretch * 2 ? true : done) {
              t1 = this.passes;
              if (typeof t1 !== "number")
                return t1.$sub();
              this.passes = t1 - 1;
              this.counter = 0;
            }
          }
          if (this.passes === 0) {
            this.audioSound.stop$0(0);
            this.counter = 5;
            this.subCounter = 0;
            this.state = C.TrainState_3;
          }
          break;
        case C.TrainState_3:
          if (this.subCounter > 15) {
            this.subCounter = 0;
            t1 = this.groundMeshes;
            t2 = this.counter;
            if (t2 < 0 || t2 >= 6)
              return H.ioore(t1, t2);
            mat = t1[t2].material;
            mat.get$color(mat).setHex$1(this.context.groundColor.getHex$0());
            if (--this.counter < 0) {
              for (i = 0; i < 6; ++i) {
                pos = this.GetPos$1(i);
                x = pos[0];
                y = pos[1];
                J.remove$1$ax($.get$Area_reservedTiles(), J.toString$0(x) + J.toString$0(y));
              }
              this.counter = 0;
              this.subCounter = 0;
              this.state = C.TrainState_4;
            }
          }
          ++this.subCounter;
          break;
        case C.TrainState_4:
          t1 = this.context.drawingContext;
          t2 = this.obj;
          t1.scene.remove$1(0, t2);
          return true;
      }
      return false;
    },
    Train$1: function(_context) {
      var t1, t2;
      this.context = _context;
      _context.updateables.push(this);
      t1 = $.Train_nextTrainNum;
      this.trainNum = t1;
      $.Train_nextTrainNum = t1 + 1;
      if ($.Train_geo == null)
        $.Train_geo = S.CylinderGeometry$(25, 25, 150, 8, 1, false);
      N.EnemyOrb_InitStatics();
      t1 = _context.drawingContext;
      if ($.Enemy_particles == null)
        $.Enemy_particles = S.EnemyParticles$(t1, 16711680, 500, 0.5);
      t1 = S.Mesh$($.Train_geo, $.EnemyOrb_mat);
      this.mesh = t1;
      this.obj = this.context.drawingContext.addMesh$1(t1);
      t1 = S.Mesh$($.Train_geo, $.EnemyOrb_outMat);
      this.outMesh = t1;
      t1.material.side = 1;
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(1.05, 1.05, 1.05);
      t1.scale = t2;
      t2 = this.context.drawingContext.addMesh$1(this.outMesh);
      this.outObj = t2;
      this.obj.add$1(0, t2);
      t2 = this.obj;
      t2.rotation.storage[0] = 1.5707963267948966;
      t2.position.storage[1] = -1000;
      t2 = $.Enemy_particles.Reserve$0();
      this.parts = t2;
      C.JSArray_methods.addAll$1(t2, $.Enemy_particles.Reserve$0());
      J.addAll$1$ax(this.parts, $.Enemy_particles.Reserve$0());
      t2 = this.context.audioManager.makeSource$1("Train" + J.toString$0(this.trainNum));
      this.audioSource = t2;
      J.set$volume$x(t2, 100 * $.AudioManager_positionalScale);
    },
    static: {"^": "Train_geo,Train_nextTrainNum"}
  },
  TrainState: {
    "^": "Object;index",
    toString$0: function(_) {
      return C.Map_yTOCB.$index(0, this.index);
    },
    static: {"^": "TrainState_LookupLane,TrainState_ColorLane,TrainState_Drive,TrainState_UncolorLane,TrainState_Done,TrainState_values"}
  }
}],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, null, 62],
    "%": "ANGLEInstancedArrays|AnimationEffect|AnimationTimeline|CSS|Cache|CanvasGradient|CanvasPattern|ConsoleBase|Coordinates|Counter|CredentialsContainer|Crypto|DOMFileSystemSync|DOMImplementation|DOMParser|DataTransfer|Database|DatabaseSync|DeprecatedStorageInfo|DeprecatedStorageQuota|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTBlendMinMax|EXTFragDepth|EXTShaderTextureLOD|EXTTextureFilterAnisotropic|EntrySync|FetchBodyStream|FileEntrySync|FileReaderSync|FileWriterSync|FormData|Geofencing|Geolocation|Geoposition|HTMLAllCollection|IDBFactory|ImageBitmap|InjectedScriptHost|MediaDeviceInfo|MediaError|MediaKeyError|MediaKeys|MediaQueryList|MemoryInfo|MessageChannel|MutationObserver|Navigator|NodeFilter|NodeIterator|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|PagePopupController|Path2D|PerformanceTiming|PeriodicWave|PositionError|PushManager|PushRegistration|RGBColor|RTCIceCandidate|ReadableStream|Rect|Request|Response|SQLError|SQLResultSet|SQLTransaction|SQLTransactionSync|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGPreserveAspectRatio|SVGRenderingIntent|SVGUnitTypes|SVGViewSpec|Screen|ServiceWorkerClients|ServiceWorkerContainer|SpeechRecognitionAlternative|StorageInfo|StorageQuota|SubtleCrypto|TextMetrics|Timing|TreeWalker|ValidityState|VideoPlaybackQuality|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTextureETC1|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLRenderbuffer|WebGLShader|WebGLShaderPrecisionFormat|WebGLTexture|WebGLUniformLocation|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WorkerConsole|WorkerLocation|WorkerNavigator|WorkerPerformance|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: [function(receiver, invocation) {
      return J.Interceptor.prototype.noSuchMethod$1.call(this, receiver, invocation);
    }, "call$1", "get$noSuchMethod", 2, 0, null, 62]
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      this.checkGrowable$1(receiver, "removeAt");
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      this.checkGrowable$1(receiver, "insert");
      receiver.splice(index, 0, value);
    },
    remove$1: function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, f), [H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(receiver, 0)]), 0)]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var $length, i;
      $length = receiver.length;
      for (i = 0; i < $length; ++i) {
        f.call$1(receiver[i]);
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E", ret: P.Iterable, args: [{func: "dynamic__E", args: [E]}]};
      }, this.$receiver, "JSArray");
    }, 63],
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    fold$2: function(receiver, initialValue, combine) {
      return H.IterableMixinWorkaround_fold(receiver, initialValue, combine);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, null, null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    any$1: function(receiver, f) {
      return H.IterableMixinWorkaround_any(receiver, f);
    },
    sort$1: function(receiver, compare) {
      this.checkMutable$1(receiver, "sort");
      H.IterableMixinWorkaround_sortList(receiver, compare);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = Array;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength, null, null));
      this.checkGrowable$1(receiver, "set length");
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      this.checkMutable$1(receiver, "indexed set");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isJSIndexable: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isInfinite: function(receiver) {
      return receiver == Infinity || receiver == -Infinity;
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(P.ArgumentError$(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      H.checkNum(fractionDigits);
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$(fractionDigits));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      H.checkString(string);
      H.checkInt(start);
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H.allMatchesInStringUnchecked(receiver, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.checkInt(index);
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex, null, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $isJSIndexable: true,
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 16, 17],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__getJSFunctionFromName: function(functionName) {
    return init.globalFunctions[functionName]();
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:55;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:55;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log) {
              self.console.log(object);
            } else {
              self.postMessage(serialize(object));
            }
          };
        }(H._Manager__serializePrintMessage);
      }
    },
    static: {_Manager__serializePrintMessage: [function(object) {
        return H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null));
      }, "call$1", "_Manager__serializePrintMessage$closure", 2, 0, null, 15]}
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(0, new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = init;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      }
 finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "getErrors":
          this.errorPorts.add$1(0, t1.$index(message, 1));
          break;
        case "stopErrors":
          this.errorPorts.remove$1(0, t1.$index(message, 1));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(0, portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current.__isolate_helper$_close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1.__internal$_current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 27]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:27;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:27;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.get$delayedEvents().push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:55;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, null, "call"]
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:27;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: [function() {
      var t1, t2, t3;
      this.context_4.set$initialized(true);
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:55;box_0,this_1,shouldSerialize_2",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        J.__isolate_helper$_add$1$x(t1, this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, null, "call"]
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    __isolate_helper$_add$1: function(_, dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    },
    visitFunction$1: function(topLevelFunction) {
      var $name = !!topLevelFunction.$isClosure ? topLevelFunction.$name : null;
      if ($name == null)
        throw H.wrapException(P.UnsupportedError$("only top-level functions can be sent."));
      return ["function", $name];
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    },
    visitFunction$1: function(topLevelFunction) {
      var $name = !!topLevelFunction.$isClosure ? topLevelFunction.$name : null;
      if ($name == null)
        throw H.wrapException(P.UnsupportedError$("only top-level functions can be sent."));
      return H.IsolateNatives__getJSFunctionFromName($name);
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    },
    deserializeFunction$1: function(list) {
      return H.IsolateNatives__getJSFunctionFromName(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      if (!!t1.$isFunction)
        return this.visitFunction$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      J.forEach$1$ax(map, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitFunction$1: function(f) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:61;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1, t2;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      t2 = J.getInterceptor$x(map);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(t2.get$keys(map))), this._serializeList$1(J.toList$0$ax(t2.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitFunction$1: function(f) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        case "function":
          return this.deserializeFunction$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function(_) {
      var t1;
      if (self.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        t1 = this._handle;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:27;this_0,callback_1",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:27;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash, t1, t2;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      t2 = t1.$shr(hash, 0);
      t1 = t1.$tdiv(hash, 4294967296);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t2 ^ t1;
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string, null, null));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 18],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    H.checkString(source);
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (t1.codeUnitAt$1(digitsPart, i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    H.checkString(source);
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t1.argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1.argumentCount_0 + t1.names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = P.List_List$from(positionalArguments, true, null);
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    argumentCount = positionalArguments.length;
    C.JSArray_methods.addAll$1($arguments, positionalArguments);
    jsFunction = $function["call$" + argumentCount];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index, null, null));
  },
  checkNum: function(value) {
    if (typeof value !== "number")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkInt: function(value) {
    if (typeof value !== "number" || Math.floor(value) !== value)
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkString: function(value) {
    if (typeof value !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(false, null, null, null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 19, 20, 21, 22, 23, 24, 25],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = Array;
    reflectionInfo.fixed$length = Array;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  listTypeCast: function(value) {
    if (!!J.getInterceptor(value).$isList || value == null)
      return value;
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "List"));
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  getIsolateAffinityTag: function($name) {
    return init.getIsolateTag($name);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  computeTypeName: function(isField, $arguments) {
    var t1 = J.getInterceptor$asx(isField);
    return (t1.substring$2(isField, 3, t1.get$length(isField)) + H.joinArguments($arguments, 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  subtypeCast: function(object, isField, checks, asField) {
    if (object != null && !H.checkSubtype(object, isField, checks, asField))
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(object), H.computeTypeName(isField, checks)));
    return object;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = Array;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_oRe();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  allMatchesInStringUnchecked: function(needle, haystack, startIndex) {
    var result, $length, patternLength, position, endIndex;
    result = H.setRuntimeTypeInfo([], [P.Match]);
    $length = haystack.length;
    patternLength = needle.length;
    for (; true;) {
      position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
      if (position === -1)
        break;
      result.push(new H.StringMatch(position, haystack, needle));
      endIndex = position + patternLength;
      if (endIndex === $length)
        break;
      else
        startIndex = position === endIndex ? startIndex + 1 : endIndex;
    }
    return result;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    var t1;
    if (typeof other === "string")
      return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
    else {
      t1 = J.getInterceptor(other);
      if (!!t1.$isJSSyntaxRegExp)
        return other._nativeRegExp.test(H.checkString(C.JSString_methods.substring$1(receiver, startIndex)));
      else
        return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
    }
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1;
    H.checkString(to);
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(0, to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          t1 = result._contents += t1;
          result._contents = t1 + to;
        }
        t1 = result._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace(/\$/g, "$$$$"));
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    remove$1: function(_, key) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true,
    $asMap: null
  },
  GeneralConstantMap: {
    "^": "ConstantMap;_jsData",
    _getMap$0: function() {
      if (!this.$map)
        this.$map = H.fillLiteralMap(this._jsData, P.LinkedHashMap_LinkedHashMap(null, null, null, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)));
      return this.$map;
    },
    $index: function(_, key) {
      return J.$index$asx(this._getMap$0(), key);
    },
    forEach$1: function(_, f) {
      J.forEach$1$ax(this._getMap$0(), f);
    },
    get$keys: function(_) {
      return J.get$keys$x(this._getMap$0());
    },
    get$values: function(_) {
      return J.get$values$x(this._getMap$0());
    },
    get$length: function(_) {
      return J.get$length$asx(this._getMap$0());
    }
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
      }
      return map;
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    },
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys(positions);
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        C.JSArray_methods.checkMutable$1(t2, "sort");
        H.IterableMixinWorkaround_sortList(t2, null);
        C.JSArray_methods.forEach$1(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = Array;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:18;box_0,this_1,positions_2",
    call$1: function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0.index_0++;
      t3 = this.positions_2.$index(0, $name);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    }
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:64;box_0,arguments_1,namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      ++t1.argumentCount_0;
    }
  },
  Primitives_applyFunction_closure: {
    "^": "Closure:64;box_0,defaultArguments_1",
    call$2: function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(0, parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    }
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:39;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:55;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:55;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:55;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:55;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:55;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isClosure: true,
    $isFunction: true,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = Array;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = Object.create(null);
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  initHooks_closure: {
    "^": "Closure:39;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:65;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:18;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/";
    },
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    firstMatch$1: function(string) {
      var m = this._nativeRegExp.exec(H.checkString(string));
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    allMatches$2: function(_, string, start) {
      H.checkString(string);
      H.checkInt(start);
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    $isJSSyntaxRegExp: true,
    $isRegExp: true,
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        H.checkString(source);
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + source + ", " + errorMessage, null, null));
      }}
  },
  _MatchImplementation: {
    "^": "Object;pattern,_match",
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "^": "IterableBase;_re,_string,_start",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, this._start, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, match, t3, nextIndex;
      t1 = this._string;
      if (t1 == null)
        return false;
      t2 = this._nextIndex;
      if (t2 <= t1.length) {
        match = this._regExp._execGlobal$2(t1, t2);
        if (match != null) {
          this.__js_helper$_current = match;
          t1 = match._match;
          t2 = t1.index;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t3 = J.get$length$asx(t1[0]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          nextIndex = t2 + t3;
          this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
          return true;
        }
      }
      this.__js_helper$_current = null;
      this._string = null;
      return false;
    }
  },
  StringMatch: {
    "^": "Object;start,input,pattern",
    $index: function(_, g) {
      if (!J.$eq(g, 0))
        H.throwExpression(P.RangeError$value(g, null, null));
      return this.pattern;
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooMany: function() {
    return new P.StateError("Too many elements");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(0, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    map$1: [function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E0", ret: P.Iterable, args: [{func: "dynamic__E0", args: [E]}]};
      }, this.$receiver, "ListIterable");
    }, 63],
    toList$1$growable: function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      i = 0;
      while (true) {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,__internal$_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (J.$ge$n(t1, $length))
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length))
        return J.$sub$n($length, t1);
      return J.$sub$n(t2, t1);
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    take$1: function(_, count) {
      var t1, t2, newEnd;
      if (count < 0)
        throw H.wrapException(P.RangeError$value(count, null, null));
      t1 = this._endOrLength;
      t2 = this.__internal$_start;
      if (t1 == null)
        return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), H.getTypeArgumentByIndex(this, 0));
      else {
        newEnd = J.$add$ns(t2, count);
        if (J.$lt$n(t1, newEnd))
          return this;
        return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
      }
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, $length, result, t3, i, t4;
      start = this.__internal$_start;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = this._endOrLength;
      if (end0 != null && J.$lt$n(end0, end))
        end = end0;
      $length = J.$sub$n(end, start);
      if (J.$lt$n($length, 0))
        $length = 0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, $length);
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        t3 = Array($length);
        t3.fixed$length = init;
        result = H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(this, 0)]);
      }
      if (typeof $length !== "number")
        return H.iae($length);
      t3 = J.getInterceptor$ns(start);
      i = 0;
      for (; i < $length; ++i) {
        t4 = t2.elementAt$1(t1, t3.$add(start, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t4;
        if (J.$lt$n(t2.get$length(t1), end))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2, t3;
      t1 = this.__internal$_start;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0))
        throw H.wrapException(P.RangeError$value(t1, null, null));
      t3 = this._endOrLength;
      if (t3 != null) {
        if (J.$lt$n(t3, 0))
          throw H.wrapException(P.RangeError$value(t3, null, null));
        if (t2.$gt(t1, t3))
          throw H.wrapException(P.RangeError$range(t1, 0, t3, null, null));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (!J.$eq(this.__internal$_length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        this.__internal$_current = null;
        return false;
      }
      this.__internal$_current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;__internal$_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.__internal$_current = this._f$1(t1.get$current());
        return true;
      }
      this.__internal$_current = null;
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  IterableMixinWorkaround: {
    "^": "Object;",
    static: {IterableMixinWorkaround_any: function(iterable, f) {
        var t1;
        for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
          if (f.call$1(t1.__internal$_current) === true)
            return true;
        return false;
      }, IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
        var t1;
        for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
          initialValue = combine.call$2(initialValue, t1.__internal$_current);
        return initialValue;
      }, IterableMixinWorkaround_sortList: function(list, compare) {
        if (compare == null)
          compare = P.Comparable_compare$closure();
        H.Sort__doSort(list, 0, list.length - 1, compare);
      }, IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
        var $length;
        if (start < 0 || start > list.length)
          H.throwExpression(P.RangeError$range(start, 0, list.length, null, null));
        if (end < start || end > list.length)
          H.throwExpression(P.RangeError$range(end, start, list.length, null, null));
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          throw H.wrapException(P.ArgumentError$(skipCount));
        if (skipCount + $length > from.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        H.Lists_copy(from, skipCount, list, start, $length);
      }}
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  },
  Symbol0: {
    "^": "Object;_name<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol0 && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol0: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern"}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = Array;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1.storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
      return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 26],
  _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 26],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 26],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_Future$error: function(error, stackTrace, $T) {
    var t1;
    error = error != null ? error : new P.NullThrownError();
    t1 = $.Zone__current;
    if (t1 !== C.C__RootZone)
      t1.toString;
    t1 = H.setRuntimeTypeInfo(new P._Future(0, t1, null), [$T]);
    t1._asyncCompleteError$2(error, stackTrace);
    return t1;
  },
  Future_Future$delayed: function(duration, computation, $T) {
    var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
    P.Timer_Timer(duration, new P.Future_Future$delayed_closure(computation, result));
    return result;
  },
  Future_wait: function(futures, eagerError) {
    var t1, result, t2, t3, values;
    t1 = {};
    result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.List]);
    t1.values_0 = null;
    t1.remaining_1 = 0;
    t1.error_2 = null;
    t1.stackTrace_3 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError, result);
    for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();)
      t3.__internal$_current.then$2$onError(new P.Future_wait_closure(t1, eagerError, result, t1.remaining_1++), t2);
    t2 = t1.remaining_1;
    if (t2 === 0) {
      t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(C.List_empty);
      return t1;
    }
    values = Array(t2);
    values.fixed$length = init;
    t1.values_0 = values;
    return result;
  },
  _completeWithErrorCallback: function(result, error, stackTrace) {
    $.Zone__current.toString;
    result._completeError$2(error, stackTrace);
  },
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = J.get$next$x(t1);
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 27],
  _scheduleAsyncCallback: function(callback) {
    var t1, newEntry;
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (C.C__RootZone === t1) {
      P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
      return;
    }
    P._rootScheduleMicrotask(null, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 28, 29],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 30, 3, 31, 32],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 27],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, replacement, error, stackTrace, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.toString;
      replacement = null;
      if (replacement == null)
        onError.call$2(e, s);
      else {
        t1 = J.get$error$x(replacement);
        error = t1;
        stackTrace = replacement.get$stackTrace();
        onError.call$2(error, stackTrace);
      }
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0(0);
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0(0);
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  _addErrorWithReplacement: function(sink, error, stackTrace) {
    $.Zone__current.toString;
    sink._addError$2(error, stackTrace);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createTimer(duration, callback);
    }
    return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    var t1, entry, t2;
    t1 = new P._rootHandleUncaughtError_closure(error, stackTrace);
    entry = new P._AsyncCallbackEntry(t1, null);
    t2 = $._nextCallback;
    if (t2 == null) {
      P._scheduleAsyncCallback(t1);
      $._lastPriorityCallback = $._lastCallback;
    } else {
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = t2;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t1.next;
        t1.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    var t1 = C.C__RootZone !== zone;
    if (t1)
      f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone));
    P._scheduleAsyncCallback(f);
  },
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:39;box_0",
    call$1: [function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this.box_0;
      f = t1.storedCallback_0;
      t1.storedCallback_0 = null;
      f.call$0();
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:67;box_0,div_1,span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this.box_0.storedCallback_0 = callback;
      t1 = this.div_1;
      t2 = this.span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    }
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:55;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
    "^": "Closure:55;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  _UncaughtAsyncError: {
    "^": "AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError$: function(error, stackTrace) {
        return new P._UncaughtAsyncError(error, P._UncaughtAsyncError__getBestStackTrace(error, stackTrace));
      }, _UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_Future$delayed_closure: {
    "^": "Closure:55;computation_0,result_1",
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = this.computation_0.call$0();
        this.result_1._complete$1(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        P._completeWithErrorCallback(this.result_1, e, s);
      }

    }
  },
  Future_wait_handleError: {
    "^": "Closure:61;box_0,eagerError_1,result_2",
    call$2: [function(theError, theStackTrace) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = t1.values_0;
      t1.values_0 = null;
      t3 = --t1.remaining_1;
      if (t2 != null)
        if (t3 === 0 || this.eagerError_1)
          this.result_2._completeError$2(theError, theStackTrace);
        else {
          t1.error_2 = theError;
          t1.stackTrace_3 = theStackTrace;
        }
      else if (t3 === 0 && !this.eagerError_1)
        this.result_2._completeError$2(t1.error_2, t1.stackTrace_3);
    }, "call$2", null, 4, 0, null, 68, 69, "call"]
  },
  Future_wait_closure: {
    "^": "Closure:70;box_0,eagerError_3,result_4,pos_5",
    call$1: [function(value) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = --t1.remaining_1;
      t3 = t1.values_0;
      if (t3 != null) {
        t1 = this.pos_5;
        if (t1 < 0 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t3[t1] = value;
        if (t2 === 0)
          this.result_4._completeWithValue$1(t3);
      } else if (t2 === 0 && !this.eagerError_3)
        this.result_4._completeError$2(t1.error_2, t1.stackTrace_3);
    }, "call$1", null, 2, 0, null, 29, "call"]
  },
  _Completer: {
    "^": "Object;",
    completeError$2: [function(error, stackTrace) {
      error = error != null ? error : new P.NullThrownError();
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 71, 3, 31, 32]
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  },
  _SyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  },
  _FutureListener: {
    "^": "Object;_nextListener@,result>,state>,callback,errorCallback",
    callback$0: function() {
      return this.callback.call$0();
    },
    get$_zone: function() {
      return this.result.get$_zone();
    },
    get$handlesValue: function() {
      return (this.state & 1) !== 0;
    },
    get$hasErrorTest: function() {
      return this.state === 6;
    },
    get$handlesComplete: function() {
      return this.state === 8;
    },
    get$_onValue: function() {
      return this.callback;
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return this.callback;
    },
    get$_whenCompleteAction: function() {
      return this.callback;
    },
    static: {"^": "_FutureListener_MASK_VALUE,_FutureListener_MASK_ERROR,_FutureListener_MASK_TEST_ERROR,_FutureListener_MASK_WHENCOMPLETE,_FutureListener_STATE_CHAIN,_FutureListener_STATE_THEN,_FutureListener_STATE_THEN_ONERROR,_FutureListener_STATE_CATCHERROR,_FutureListener_STATE_CATCHERROR_TEST,_FutureListener_STATE_WHENCOMPLETE"}
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners",
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var result, t1;
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1 = result._zone;
      if (t1 !== C.C__RootZone) {
        t1.toString;
        if (onError != null)
          onError = P._registerErrorHandler(onError, t1);
      }
      t1 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(null, result, t1, f, onError));
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      if (t1 !== C.C__RootZone)
        t1.toString;
      this._addListener$1(new P._FutureListener(null, result, 8, action, null));
      return result;
    },
    _markPendingCompletion$0: function() {
      if (this._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      this._state = 1;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 30, 3, 31, 32],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              this._markPendingCompletion$0();
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future__chainForeignFuture: function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        var listener;
        target.set$_isChained(true);
        listener = new P._FutureListener(null, target, 0, null, null);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, listener);
        else
          source._addListener$1(listener);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceValue, zone, oldZone, chainSource, result;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          hasError = t2.get$_hasError();
          if (listeners == null) {
            if (hasError) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
            }
            return;
          }
          for (; listeners.get$_nextListener() != null; listeners = listeners0) {
            listeners0 = listeners.get$_nextListener();
            listeners.set$_nextListener(null);
            P._Future__propagateToListeners(t1.source_4, listeners);
          }
          t3.listenerHasValue_1 = true;
          sourceValue = hasError ? null : t1.source_4.get$_async$_value();
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              if (t4 == null ? zone != null : t4 !== zone) {
                t4 = t4.get$errorZone();
                zone.toString;
                t4 = t4 === zone;
              } else
                t4 = true;
              t4 = !t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$handlesValue())
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$handlesComplete())
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              result = J.get$result$x(listeners);
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  result.set$_isChained(true);
                  t1.source_4 = chainSource;
                  listeners = new P._FutureListener(null, result, 0, null, null);
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, result);
              else
                P._Future__chainForeignFuture(chainSource, result);
              return;
            }
          }
          result = J.get$result$x(listeners);
          listeners = result._removeListeners$0();
          t2 = t3.listenerHasValue_1;
          t3 = t3.listenerValueOrError_2;
          if (t2 === true)
            result._setValue$1(t3);
          else
            result._setErrorObject$1(t3);
          t1.source_4 = result;
          t2 = result;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:55;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:39;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 29, "call"]
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:72;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 3, 31, 32, "call"]
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:55;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:55;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:55;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:73;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(this.listener_3.get$_onValue(), this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P.AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:27;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      matchesTest = true;
      t1 = this.listener_6;
      if (t1.get$hasErrorTest()) {
        test = t1.get$_errorTest();
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      }
      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:27;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, completeResult, t2, exception, result;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        completeResult = this.zone_10.run$1(this.listener_9.get$_whenCompleteAction());
        t1.completeResult_0 = completeResult;
        t2 = completeResult;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P.AsyncError(e, s);
        t2.listenerHasValue_1 = false;
        return;
      }

      if (!!J.getInterceptor(t2).$isFuture) {
        result = J.get$result$x(this.listener_9);
        result.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:39;box_2,result_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, new P._FutureListener(null, this.result_11, 0, null, null));
    }, "call$1", null, 2, 0, null, 74, "call"]
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:72;box_0,result_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, new P._FutureListener(null, this.result_12, 0, null, null));
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 3, 31, 32, "call"]
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next*",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    map$1: [function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Stream__dynamic__T", ret: P.Stream, args: [{func: "dynamic__T", args: [T]}]};
      }, this.$receiver, "Stream");
    }, 75],
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  },
  Stream_contains_closure: {
    "^": "Closure;box_0,this_1,needle_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 41, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_contains__closure: {
    "^": "Closure:55;needle_4,element_5",
    call$0: function() {
      return J.$eq(this.element_5, this.needle_4);
    }
  },
  Stream_contains__closure0: {
    "^": "Closure:76;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    }
  },
  Stream_contains_closure0: {
    "^": "Closure:55;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 41, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:55;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:39;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:55;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_length_closure: {
    "^": "Closure:39;box_0",
    call$1: [function(_) {
      ++this.box_0.count_0;
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  Stream_length_closure0: {
    "^": "Closure:55;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_isEmpty_closure: {
    "^": "Closure:39;box_0,future_1",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:55;future_2",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_toList_closure: {
    "^": "Closure;this_0,result_1",
    call$1: [function(data) {
      this.result_1.push(data);
    }, "call$1", null, 2, 0, null, 77, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:55;result_2,future_3",
    call$0: [function() {
      this.future_3._complete$1(this.result_2);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    }, "call$1", null, 2, 0, null, 29, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:55;future_3",
    call$0: [function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        P._completeWithErrorCallback(this.future_3, e, s);
      }

    }, "call$0", null, 0, 0, null, "call"]
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onError<,_zone<",
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function(_) {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(_, data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 27],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 27],
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = this._zone;
      t1.toString;
      this._async$_onData = onData;
      this._onError = P._registerErrorHandler(onError, t1);
      this._onDone = onDone;
    }
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:27;this_0,error_1,stackTrace_2",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._onError;
      t3 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
      t4 = t1._zone;
      t5 = this.error_1;
      t6 = t1._onError;
      if (t3)
        t4.runBinaryGuarded$3(t6, t5, this.stackTrace_2);
      else
        t4.runUnaryGuarded$2(t6, t5);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:27;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _DelayedEvent: {
    "^": "Object;next*"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value>,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function(_) {
      return;
    },
    set$next: function(_, _0) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:55;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        J.set$next$x(t1, $event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = J.get$next$x($event);
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:55;future_0,error_1,stackTrace_2",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:78;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:55;future_0,value_1",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      t4 = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      t4._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
      t4._ForwardingStreamSubscription$5(this, onData, onError, onDone, cancelOnError, t1, t2);
      return t4;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(0, data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(_, data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 27],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0(0);
    }, "call$0", "get$_onResume", 0, 0, 27],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0(0);
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 77],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 79, 31, 32],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 27],
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }

      J._async$_add$1$x(sink, outputEvent);
    }
  },
  AsyncError: {
    "^": "Object;error>,stackTrace<",
    toString$0: function(_) {
      return J.toString$0(this.error);
    },
    $isError: true
  },
  _Zone: {
    "^": "Object;"
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:55;error_0,stackTrace_1",
    call$0: function() {
      throw H.wrapException(P._UncaughtAsyncError$(this.error_0, this.stackTrace_1));
    }
  },
  _RootZone: {
    "^": "_Zone;",
    get$parent: function(_) {
      return;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$2(arg1, arg2);
          return t1;
        }
        t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    static: {"^": "_RootZone__rootMap,_RootZone__rootDelegate"}
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:55;this_0,f_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.f_1);
    }
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:55;this_2,f_3",
    call$0: function() {
      return this.this_2.run$1(this.f_3);
    }
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:39;this_0,f_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.f_1, arg);
    }, "call$1", null, 2, 0, null, 80, "call"]
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:39;this_2,f_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.f_3, arg);
    }, "call$1", null, 2, 0, null, 80, "call"]
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 33],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 34, 35],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = P.StringBuffer$(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1.write$1(0, rightDelimiter);
    t1 = t1._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = P.StringBuffer$(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    J.write$1$x(buffer, rightDelimiter);
    t1 = buffer.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$K, $V];
    return t1;
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      J.write$1$x(result, "{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      J.write$1$x(result, "}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = result.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_collection$_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var nums;
      if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._collection$_keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._collection$_keys = null;
        }
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(0, key);
    },
    _remove$1: function(_, key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      --this._collection$_length;
      this._collection$_keys = null;
      return bucket.splice(index, 2)[1];
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._collection$_keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._collection$_keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    $asMap: null,
    static: {_HashMap__getTableEntry: function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, _HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 81, "call"]
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(0, element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._collection$_keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._collection$_keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(0, key);
    },
    _remove$1: function(_, key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(cell), cell.get$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(J.get$_key$x(bucket[i]), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    $asMap: null,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 81, "call"]
  },
  LinkedHashMapCell: {
    "^": "Object;_key>,_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(0, element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key(cell));
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key(t1);
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: [function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E1", ret: P.Iterable, args: [{func: "dynamic__E1", args: [E]}]};
      }, this.$receiver, "IterableBase");
    }, 63],
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    any$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (f.call$1(t1.get$current()) === true)
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index, null, null));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  },
  ListBase: {
    "^": "Object_ListMixin;"
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    contains$1: function(receiver, element) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < this.get$length(receiver); ++i) {
        if (J.$eq(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    map$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E2", ret: P.Iterable, args: [{func: "dynamic__E2", args: [E]}]};
      }, this.$receiver, "ListMixin");
    }, 63],
    toList$1$growable: function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = Array(this.get$length(receiver));
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    remove$1: function(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
          this.set$length(receiver, this.get$length(receiver) - 1);
          return true;
        }
      return false;
    },
    sort$1: function(receiver, compare) {
      H.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, compare);
    },
    _rangeCheck$2: function(receiver, start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver), null, null));
      if (typeof start !== "number")
        return H.iae(start);
      if (end < start || end > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver), null, null));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t1, t2, i;
      this._rangeCheck$2(receiver, start, end);
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      t1 = J.getInterceptor$n(skipCount);
      if (t1.$lt(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      t2 = J.getInterceptor$asx(iterable);
      if (J.$gt$n(t1.$add(skipCount, $length), t2.get$length(iterable)))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (t1.$lt(skipCount, start))
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t2.$index(iterable, t1.$add(skipCount, i)));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t2.$index(iterable, t1.$add(skipCount, i)));
    },
    removeAt$1: function(receiver, index) {
      var result = this.$index(receiver, index);
      this.setRange$4(receiver, index, this.get$length(receiver) - 1, receiver, J.$add$ns(index, 1));
      this.set$length(receiver, this.get$length(receiver) - 1);
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:61;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(0, ", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(0, k);
      t1.write$1(0, ": ");
      t1.write$1(0, v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, element) {
      this._add$1(0, element);
    },
    remove$1: function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(0, i);
          ++this._modificationCount;
          return true;
        }
      }
      return false;
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(_, element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _remove$1: function(_, offset) {
      var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
      t1 = this._table;
      t2 = t1.length;
      mask = t2 - 1;
      t3 = this._head;
      t4 = this._tail;
      if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
        for (i = offset; i !== t3; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t2)
            return H.ioore(t1, prevOffset);
          t4 = t1[prevOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        this._head = (t3 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t3 = (t4 - 1 & mask) >>> 0;
        this._tail = t3;
        for (i = offset; i !== t3; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t2)
            return H.ioore(t1, nextOffset);
          t4 = t1[nextOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        return offset;
      }
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.checkMutable$1(newTable, "set range");
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t2 = this._head;
      t1 = this._table;
      C.JSArray_methods.checkMutable$1(newTable, "set range");
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t2, t1, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.checkMutable$1(target, "set range");
        H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.checkMutable$1(target, "set range");
        H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
        t1 = this._tail;
        t2 = this._table;
        C.JSArray_methods.checkMutable$1(target, "set range");
        H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
        return this._tail + firstPartSize;
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"^": "ListQueue__INITIAL_CAPACITY", ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        this.add$1(0, t1.__internal$_current);
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1._collection$_current;
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1: [function(_, f) {
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E3", ret: P.Iterable, args: [{func: "dynamic__E3", args: [E]}]};
      }, this.$receiver, "SetMixin");
    }, 63],
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    $isEfficientLength: true
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: function(namedArguments) {
    return;
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 36],
  Error_safeToString: function(object) {
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string")
      return JSON.stringify(object);
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 37],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 38],
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = Array;
    return list;
  },
  List_List$generate: function($length, generator, growable, $E) {
    var result, i, t1;
    if (growable) {
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
    } else
      result = H.setRuntimeTypeInfo(Array($length), [$E]);
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  num_parse: function(input, onError) {
    var source, result;
    source = J.trim$0$s(input);
    result = H.Primitives_parseInt(source, null, P.num__returnNull$closure());
    if (result != null)
      return result;
    result = H.Primitives_parseDouble(source, P.num__returnNull$closure());
    if (result != null)
      return result;
    throw H.wrapException(P.FormatException$(input, null, null));
  },
  num__returnNull: [function(_) {
    return;
  }, "call$1", "num__returnNull$closure", 2, 0, 39],
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  Function__toMangledNames_closure: {
    "^": "Closure:61;result_0",
    call$2: function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(), value);
    }
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:82;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(0, ", ");
      t1.sb_0.write$1(0, key.get$_name());
      t1.sb_0.write$1(0, ": ");
      t1.sb_0.write$1(0, P.Error_safeToString(value));
      ++t1.i_1;
    }
  },
  bool: {
    "^": "Object;",
    $isbool: true
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSInt_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSInt_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    abs$0: function(_) {
      return P.Duration$(0, 0, Math.abs(this._duration), 0, 0, 0);
    },
    $negate: function(_) {
      return P.Duration$(0, 0, -this._duration, 0, 0, 0);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:83;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:83;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;_hasValue,invalidValue,name>,message",
    toString$0: function(_) {
      var t1;
      if (!this._hasValue) {
        t1 = this.message;
        return t1 != null ? "Invalid arguments(s): " + H.S(t1) : "Invalid arguments(s)";
      }
      return H.S(this.message) + ": " + H.S(P.Error_safeToString(this.invalidValue));
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(false, null, null, message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
    toString$0: function(_) {
      var value, t1, explanation, t2, t3;
      if (!this._hasValue)
        return "RangeError: " + H.S(this.message);
      value = P.Error_safeToString(this.invalidValue);
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          t3 = J.getInterceptor$n(t2);
          if (t3.$gt(t2, t1))
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive.";
          else
            explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
      }
      return "RangeError: " + H.S(this.message) + " (" + H.S(value) + ")" + explanation;
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(null, null, false, null, null, message);
      }, RangeError$value: function(value, $name, message) {
        return new P.RangeError(null, null, true, value, $name, "Value not in range");
      }, RangeError$range: function(invalidValue, start, end, $name, message) {
        return new P.RangeError(start, end, true, invalidValue, $name, "Invalid value");
      }}
  },
  IndexError: {
    "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
    toString$0: function(_) {
      var target, explanation, t1;
      target = P.Error_safeToString(this.indexable);
      explanation = "index should be less than " + this.length;
      t1 = this.invalidValue;
      if (J.$lt$n(t1, 0))
        explanation = "index must not be negative";
      return "RangeError: " + H.S(this.message) + " (" + H.S(target) + "[" + H.S(t1) + "]): " + explanation;
    },
    $isError: true,
    static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
        var t1 = J.get$length$asx(indexable);
        return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      for (t2 = this._core$_arguments, t3 = 0; t4 = t2.length, t3 < t4; t3 = ++t1.i_1) {
        if (t3 > 0) {
          t5 = t1.sb_0;
          t5._contents += ", ";
        }
        t5 = t1.sb_0;
        if (t3 < 0)
          return H.ioore(t2, t3);
        str = P.Error_safeToString(t2[t3]);
        t5._contents += typeof str === "string" ? str : H.S(str);
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + this._memberName.toString$0(0) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
    },
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(this.modifiedObject)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message,source,offset>",
    toString$0: function(_) {
      var t1, report;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      return report;
    },
    static: {FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0(0));
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(0), value);
    },
    _getKey$0: function(_) {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Iterable: {
    "^": "Object;"
  },
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  "+List": 0,
  Map: {
    "^": "Object;",
    $isMap: true,
    $asMap: null
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  },
  Match: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    write$1: function(_, obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0) {
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      } else {
        this.write$1(0, iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  _EntryArray: {
    "^": "Interceptor;",
    $isList: true,
    $asList: function() {
      return [W.Entry];
    },
    $isEfficientLength: true,
    "%": "EntryArray"
  },
  AnchorElement: {
    "^": "HtmlElement;target=,type=,hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AnimationNode: {
    "^": "Interceptor;duration=",
    "%": "Animation|AnimationNode"
  },
  AreaElement: {
    "^": "HtmlElement;target=,hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  AudioTrack: {
    "^": "Interceptor;id=",
    "%": "AudioTrack"
  },
  AudioTrackList: {
    "^": "EventTarget;length=",
    "%": "AudioTrackList"
  },
  BarProp: {
    "^": "Interceptor;visible=",
    "%": "BarProp"
  },
  BaseElement: {
    "^": "HtmlElement;href},target=",
    "%": "HTMLBaseElement"
  },
  Blob: {
    "^": "Interceptor;size=,type=",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "load", false), [null]);
    },
    $isBodyElement: true,
    $isEventTarget: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;name%,type=,value%",
    "%": "HTMLButtonElement"
  },
  CacheStorage: {
    "^": "Interceptor;",
    keys$0: [function(receiver) {
      return receiver.keys();
    }, "call$0", "get$keys", 0, 0, 0],
    "%": "CacheStorage"
  },
  Canvas2DContextAttributes: {
    "^": "Interceptor;alpha%,storage=",
    "%": "Canvas2DContextAttributes"
  },
  CanvasElement: {
    "^": "HtmlElement;height%,width%",
    getContext$2: function(receiver, contextId, attrs) {
      if (attrs != null)
        return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attrs));
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      var options, context;
      options = P.LinkedHashMap_LinkedHashMap$_literal(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer], null, null);
      context = this.getContext$2(receiver, "webgl", options);
      return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
    },
    getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil: function($receiver, alpha, antialias, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, alpha, antialias, true, premultipliedAlpha, preserveDrawingBuffer, stencil);
    },
    $isCanvasElement: true,
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext2D: {
    "^": "Interceptor;fillStyle},font},globalAlpha},textAlign},textBaseline}",
    lineWidth$1: function($receiver, arg0) {
      return $receiver.lineWidth.call$1(arg0);
    },
    clearRect$4: function(receiver, x, y, width, height) {
      return receiver.clearRect(x, y, width, height);
    },
    fillRect$4: function(receiver, x, y, width, height) {
      return receiver.fillRect(x, y, width, height);
    },
    drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
      return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
    },
    fillText$4: function(receiver, text, x, y, maxWidth) {
      receiver.fillText(text, x, y);
    },
    fillText$3: function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;length=",
    "%": "CDATASection|Comment|Text;CharacterData"
  },
  Credential: {
    "^": "Interceptor;id=,name=",
    "%": "Credential|FederatedCredential|LocalCredential"
  },
  CryptoKey: {
    "^": "Interceptor;type=",
    "%": "CryptoKey"
  },
  CssFilterRule: {
    "^": "CssRule;style=",
    "%": "WebKitCSSFilterRule"
  },
  CssFontFaceRule: {
    "^": "CssRule;style=",
    "%": "CSSFontFaceRule"
  },
  CssKeyframeRule: {
    "^": "CssRule;style=",
    "%": "CSSKeyframeRule|MozCSSKeyframeRule|WebKitCSSKeyframeRule"
  },
  CssKeyframesRule: {
    "^": "CssRule;name%",
    "%": "CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule"
  },
  CssPageRule: {
    "^": "CssRule;style=",
    "%": "CSSPageRule"
  },
  CssRule: {
    "^": "Interceptor;type=",
    "%": "CSSCharsetRule|CSSImportRule|CSSMediaRule|CSSSupportsRule|CSSUnknownRule;CSSRule"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
      return propValue != null ? propValue : "";
    },
    _getPropertyValueHelper$1: function(receiver, propertyName) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return receiver.getPropertyValue(propertyName);
      else {
        t1 = P.Device_cssPrefix();
        if (t1 == null)
          return t1.$add();
        return receiver.getPropertyValue(t1 + propertyName);
      }
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return this._setPropertyHelper$3(receiver, propertyName, value, priority);
      else {
        t1 = P.Device_cssPrefix();
        if (t1 == null)
          return t1.$add();
        return this._setPropertyHelper$3(receiver, t1 + propertyName, value, priority);
      }
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  CssStyleRule: {
    "^": "CssRule;style=",
    "%": "CSSStyleRule"
  },
  CssViewportRule: {
    "^": "CssRule;style=",
    "%": "CSSViewportRule"
  },
  DataTransferItem: {
    "^": "Interceptor;type=",
    "%": "DataTransferItem"
  },
  DataTransferItemList: {
    "^": "Interceptor;length=",
    add$2: function(receiver, data_OR_file, type) {
      return receiver.add(data_OR_file, type);
    },
    add$1: function($receiver, data_OR_file) {
      return $receiver.add(data_OR_file);
    },
    remove$1: function(receiver, index) {
      return receiver.remove(index);
    },
    $index: function(receiver, index) {
      return receiver[index];
    },
    "%": "DataTransferItemList"
  },
  DeviceAcceleration: {
    "^": "Interceptor;x=,y=,z=",
    "%": "DeviceAcceleration"
  },
  DeviceLightEvent: {
    "^": "Event;value=",
    "%": "DeviceLightEvent"
  },
  DeviceOrientationEvent: {
    "^": "Event;alpha=",
    "%": "DeviceOrientationEvent"
  },
  DeviceRotationRate: {
    "^": "Interceptor;alpha=",
    "%": "DeviceRotationRate"
  },
  Document: {
    "^": "Node;",
    $isDocument: true,
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    set$innerHtml: function(receiver, value) {
      this._clearChildren$0(receiver);
      receiver.appendChild(J.createFragment$3$treeSanitizer$validator$x(document.body, value, null, null));
    },
    "%": ";DocumentFragment"
  },
  DomError: {
    "^": "Interceptor;name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "^": "Interceptor;",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  DomMatrix: {
    "^": "DomMatrixReadOnly;",
    get$a: function(receiver) {
      return receiver.a;
    },
    get$b: function(receiver) {
      return receiver.b;
    },
    get$c: function(receiver) {
      return receiver.c;
    },
    get$d: function(receiver) {
      return receiver.d;
    },
    "%": "DOMMatrix"
  },
  DomMatrixReadOnly: {
    "^": "Interceptor;a=,b=,c=,d=",
    "%": ";DOMMatrixReadOnly"
  },
  DomPoint: {
    "^": "DomPointReadOnly;",
    get$w: function(receiver) {
      return receiver.w;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    set$x: function(receiver, value) {
      receiver.x = value;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    set$y: function(receiver, value) {
      receiver.y = value;
    },
    get$z: function(receiver) {
      return receiver.z;
    },
    set$z: function(receiver, value) {
      receiver.z = value;
    },
    "%": "DOMPoint"
  },
  DomPointReadOnly: {
    "^": "Interceptor;w=,x=,y=,z=",
    "%": ";DOMPointReadOnly"
  },
  DomRectReadOnly: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=,x=,y=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$width(receiver);
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$height(receiver);
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(this.get$width(receiver));
      t4 = J.get$hashCode$(this.get$height(receiver));
      return W._JenkinsSmiHash_finish0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.left, receiver.top), [null]);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": ";DOMRectReadOnly"
  },
  DomSettableTokenList: {
    "^": "DomTokenList;value%",
    "%": "DOMSettableTokenList"
  },
  DomStringList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    contains$1: function(receiver, string) {
      return receiver.contains(string);
    },
    $isList: true,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "DOMStringList"
  },
  DomTokenList: {
    "^": "Interceptor;length=",
    add$1: function(receiver, tokens) {
      return receiver.add(tokens);
    },
    contains$1: function(receiver, token) {
      return receiver.contains(token);
    },
    remove$1: function(receiver, tokens) {
      return receiver.remove(tokens);
    },
    "%": ";DOMTokenList"
  },
  Element: {
    "^": "Node;id%,style=,tagName=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$client: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientHeight)), null);
    },
    get$offset: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetHeight)), null);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    set$innerHtml: function(receiver, html) {
      this.setInnerHtml$1(receiver, html);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    get$onContextMenu: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "contextmenu", false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "load", false), [null]);
    },
    get$onMouseDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousedown", false), [null]);
    },
    get$onMouseMove: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousemove", false), [null]);
    },
    get$onMouseUp: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseup", false), [null]);
    },
    $isElement: true,
    $isEventTarget: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height%,name%,src},type=,width%",
    "%": "HTMLEmbedElement"
  },
  Entry: {
    "^": "Interceptor;name=",
    _html$_remove$2: function(receiver, successCallback, errorCallback) {
      return receiver.remove(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
    },
    remove$0: function(receiver) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      this._html$_remove$2(receiver, new W.Entry_remove_closure(completer), new W.Entry_remove_closure0(completer));
      return completer.future;
    },
    "%": "DirectoryEntry|Entry|FileEntry"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;timeStamp=,type=",
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    $isEvent: true,
    "%": "AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|ProgressEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RelatedEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    _addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    _removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": "AnimationPlayer|ApplicationCache|BatteryManager|DOMApplicationCache|EventSource|MIDIAccess|MessagePort|Notification|OfflineResourceList|Performance|RTCPeerConnection|ServiceWorkerRegistration|SpeechRecognition|SpeechSynthesis|mozRTCPeerConnection;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
  },
  FieldSetElement: {
    "^": "HtmlElement;name%,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    $isFile: true,
    "%": "File"
  },
  FileList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isFileList: true,
    $isList: true,
    $asList: function() {
      return [W.File];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "FileList"
  },
  FileReader: {
    "^": "EventTarget;error=",
    get$result: function(receiver) {
      var res = receiver.result;
      if (!!J.getInterceptor(res).$isByteBuffer)
        return new Uint8Array(res, 0);
      return res;
    },
    "%": "FileReader"
  },
  FileStream: {
    "^": "Interceptor;type=",
    "%": "Stream"
  },
  FileSystem: {
    "^": "Interceptor;name=",
    "%": "DOMFileSystem"
  },
  FileWriter: {
    "^": "EventTarget;error=,length=,position=",
    write$1: function(receiver, data) {
      return receiver.write(data);
    },
    "%": "FileWriter"
  },
  FontFace: {
    "^": "Interceptor;style=",
    load$0: function(receiver) {
      return receiver.load();
    },
    "%": "FontFace"
  },
  FontFaceSet: {
    "^": "EventTarget;size=",
    add$1: function(receiver, fontFace) {
      return receiver.add(fontFace);
    },
    forEach$2: function(receiver, callback, thisArg) {
      return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
    },
    forEach$1: function($receiver, callback) {
      callback = H.convertDartClosureToJS(callback, 3);
      return $receiver.forEach(callback);
    },
    "%": "FontFaceSet"
  },
  FormElement: {
    "^": "HtmlElement;length=,name%,target=",
    "%": "HTMLFormElement"
  },
  Gamepad: {
    "^": "Interceptor;id=",
    "%": "Gamepad"
  },
  GamepadButton: {
    "^": "Interceptor;value=",
    "%": "GamepadButton"
  },
  GeofencingRegion: {
    "^": "Interceptor;id=",
    "%": "CircularRegion|GeofencingRegion"
  },
  HRElement: {
    "^": "HtmlElement;color=",
    "%": "HTMLHRElement"
  },
  Headers: {
    "^": "Interceptor;size=",
    forEach$2: function(receiver, callback, thisArg) {
      return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
    },
    forEach$1: function($receiver, callback) {
      callback = H.convertDartClosureToJS(callback, 3);
      return $receiver.forEach(callback);
    },
    "%": "Headers"
  },
  History: {
    "^": "Interceptor;length=",
    get$state: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.state, true);
    },
    "%": "History"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;",
    get$response: function(receiver) {
      return W._convertNativeToDart_XHR_Response(receiver.response);
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    open$2: function($receiver, method, url) {
      return $receiver.open(method, url);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": "XMLHttpRequestUpload;XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height%,name%,src},width%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height%,src},width%",
    $isImageElement: true,
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height%,name%,size%,src},type=,value%,width%",
    $isElement: true,
    $isEventTarget: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  InputMethodContext: {
    "^": "EventTarget;target=",
    "%": "InputMethodContext"
  },
  KeyboardEvent: {
    "^": "UIEvent;",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;name%,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;href},type=",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name%",
    "%": "HTMLMapElement"
  },
  MediaController: {
    "^": "EventTarget;duration=,volume}",
    "%": "MediaController"
  },
  MediaElement: {
    "^": "HtmlElement;duration=,error=,src},volume}",
    preload$0: function($receiver) {
      return $receiver.preload.call$0();
    },
    load$0: function(receiver) {
      return receiver.load();
    },
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaKeySession: {
    "^": "EventTarget;error=",
    "%": "MediaKeySession"
  },
  MediaList: {
    "^": "Interceptor;length=",
    "%": "MediaList"
  },
  MediaSource: {
    "^": "EventTarget;duration=",
    "%": "MediaSource"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    clone$0: function(receiver) {
      return receiver.clone();
    },
    "%": "MediaStream"
  },
  MediaStreamTrack: {
    "^": "EventTarget;id=",
    clone$0: function(receiver) {
      return receiver.clone();
    },
    "%": "MediaStreamTrack"
  },
  MenuElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLMenuElement"
  },
  MenuItemElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLMenuItemElement"
  },
  MetaElement: {
    "^": "HtmlElement;content},name%",
    "%": "HTMLMetaElement"
  },
  Metadata: {
    "^": "Interceptor;size=",
    "%": "Metadata"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  MimeType: {
    "^": "Interceptor;type=",
    "%": "MimeType"
  },
  MimeTypeArray: {
    "^": "Interceptor_ListMixin_ImmutableListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.MimeType];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "MimeTypeArray"
  },
  MouseEvent: {
    "^": "UIEvent;button=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    get$movement: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.webkitMovementX, receiver.webkitMovementY), [null]);
    },
    get$offset: function(receiver) {
      var target, point;
      if (!!receiver.offsetX)
        return H.setRuntimeTypeInfo(new P.Point(receiver.offsetX, receiver.offsetY), [null]);
      else {
        if (!J.getInterceptor(W._convertNativeToDart_EventTarget(receiver.target)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = W._convertNativeToDart_EventTarget(receiver.target);
        point = H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]).$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
        return H.setRuntimeTypeInfo(new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y)), [null]);
      }
    },
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  MutationRecord: {
    "^": "Interceptor;target=,type=",
    "%": "MutationRecord"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;name=",
    "%": "NavigatorUserMediaError"
  },
  NetworkInformation: {
    "^": "EventTarget;type=",
    "%": "NetworkInformation"
  },
  Node: {
    "^": "EventTarget;parent:parentElement=",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode: true,
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin3;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;height%,name%,type=,width%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;name%,type=,value%",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name%,value%",
    "%": "HTMLParamElement"
  },
  PerformanceEntry: {
    "^": "Interceptor;duration=,name=",
    "%": "PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceResourceTiming"
  },
  PerformanceNavigation: {
    "^": "Interceptor;type=",
    "%": "PerformanceNavigation"
  },
  Plugin: {
    "^": "Interceptor;length=,name=",
    "%": "Plugin"
  },
  PluginArray: {
    "^": "Interceptor_ListMixin_ImmutableListMixin4;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Plugin];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "PluginArray"
  },
  PopStateEvent: {
    "^": "Event;",
    get$state: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.state, true);
    },
    "%": "PopStateEvent"
  },
  ProcessingInstruction: {
    "^": "CharacterData;target=",
    "%": "ProcessingInstruction"
  },
  ProgressElement: {
    "^": "HtmlElement;position=,value%",
    "%": "HTMLProgressElement"
  },
  Range: {
    "^": "Interceptor;",
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    "%": "Range"
  },
  RtcDataChannel: {
    "^": "EventTarget;id=",
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "DataChannel|RTCDataChannel"
  },
  RtcDtmfSender: {
    "^": "EventTarget;duration=",
    "%": "RTCDTMFSender"
  },
  RtcSessionDescription: {
    "^": "Interceptor;type=",
    "%": "RTCSessionDescription|mozRTCSessionDescription"
  },
  RtcStatsReport: {
    "^": "Interceptor;id=,type=",
    "%": "RTCStatsReport"
  },
  RtcStatsResponse: {
    "^": "Interceptor;",
    result$0: [function(receiver) {
      return receiver.result();
    }, "call$0", "get$result", 0, 0, 1],
    "%": "RTCStatsResponse"
  },
  ScreenOrientation: {
    "^": "EventTarget;type=",
    "%": "ScreenOrientation"
  },
  ScriptElement0: {
    "^": "HtmlElement;src},type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length%,name%,size%,type=,value%",
    "%": "HTMLSelectElement"
  },
  Selection: {
    "^": "Interceptor;type=",
    "%": "Selection"
  },
  ServiceWorkerClient: {
    "^": "Interceptor;id=",
    "%": "ServiceWorkerClient"
  },
  ShadowRoot: {
    "^": "DocumentFragment;innerHtml:innerHTML}",
    "%": "ShadowRoot"
  },
  SharedWorker: {
    "^": "EventTarget;",
    $isEventTarget: true,
    "%": "SharedWorker"
  },
  SharedWorkerGlobalScope: {
    "^": "WorkerGlobalScope;name=",
    "%": "SharedWorkerGlobalScope"
  },
  SourceBuffer: {
    "^": "EventTarget;",
    "%": "SourceBuffer"
  },
  SourceBufferList: {
    "^": "EventTarget_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "SourceBufferList"
  },
  SourceElement: {
    "^": "HtmlElement;src},type=",
    "%": "HTMLSourceElement"
  },
  SourceInfo: {
    "^": "Interceptor;id=",
    "%": "SourceInfo"
  },
  SpeechGrammar: {
    "^": "Interceptor;",
    "%": "SpeechGrammar"
  },
  SpeechGrammarList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin5;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "SpeechGrammarList"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  SpeechRecognitionResult: {
    "^": "Interceptor;length=",
    "%": "SpeechRecognitionResult"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  SpeechSynthesisUtterance: {
    "^": "EventTarget;volume}",
    "%": "SpeechSynthesisUtterance"
  },
  SpeechSynthesisVoice: {
    "^": "Interceptor;name=",
    "%": "SpeechSynthesisVoice"
  },
  Storage: {
    "^": "Interceptor;",
    $index: function(receiver, key) {
      return receiver.getItem(key);
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(key, value);
    },
    remove$1: function(receiver, key) {
      var value = receiver.getItem(key);
      receiver.removeItem(key);
      return value;
    },
    forEach$1: function(receiver, f) {
      var i, key;
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = [];
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = [];
      this.forEach$1(receiver, new W.Storage_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    },
    "%": "Storage"
  },
  StyleElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  StyleMedia: {
    "^": "Interceptor;type=",
    "%": "StyleMedia"
  },
  StyleSheet: {
    "^": "Interceptor;type=",
    "%": "CSSStyleSheet|StyleSheet"
  },
  TableElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
      return fragment;
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    },
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "^": "HtmlElement;",
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
      receiver.content.appendChild(fragment);
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;name%,type=,value%",
    "%": "HTMLTextAreaElement"
  },
  TextTrack: {
    "^": "EventTarget;id=",
    "%": "TextTrack"
  },
  TextTrackCue: {
    "^": "EventTarget;id%",
    "%": ";TextTrackCue"
  },
  TextTrackCueList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin6;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    $isList: true,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLength: true,
    "%": "TextTrackCueList"
  },
  TextTrackList: {
    "^": "EventTarget_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.TextTrack];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "TextTrackList"
  },
  TimeRanges: {
    "^": "Interceptor;length=",
    "%": "TimeRanges"
  },
  Touch: {
    "^": "Interceptor;",
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientX)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientY))), [null]);
    },
    "%": "Touch"
  },
  TouchList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin7;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "TouchList"
  },
  TrackElement: {
    "^": "HtmlElement;src}",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;",
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent|TouchEvent;UIEvent"
  },
  Url: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "URL"
  },
  VideoElement: {
    "^": "MediaElement;height%,width%",
    $isVideoElement: true,
    "%": "HTMLVideoElement"
  },
  VideoTrack: {
    "^": "Interceptor;id=",
    "%": "VideoTrack"
  },
  VideoTrackList: {
    "^": "EventTarget;length=",
    "%": "VideoTrackList"
  },
  VttCue: {
    "^": "TextTrackCue;position=,size%",
    "%": "VTTCue"
  },
  VttRegion: {
    "^": "Interceptor;id%,width}",
    "%": "VTTRegion"
  },
  VttRegionList: {
    "^": "Interceptor;length=",
    "%": "VTTRegionList"
  },
  WebSocket: {
    "^": "EventTarget;",
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "WebSocket"
  },
  Window: {
    "^": "EventTarget;name%",
    get$animationFrame: function(receiver) {
      var t1, completer;
      t1 = P.num;
      completer = H.setRuntimeTypeInfo(new P._SyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._ensureRequestAnimationFrame$0(receiver);
      this._requestAnimationFrame$1(receiver, W._wrapZone(new W.Window_animationFrame_closure(completer)));
      return completer.future;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    $isWindow: true,
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  Worker: {
    "^": "EventTarget;",
    $isEventTarget: true,
    "%": "Worker"
  },
  WorkerGlobalScope: {
    "^": "EventTarget;",
    "%": "DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope;WorkerGlobalScope"
  },
  _Attr: {
    "^": "Node;name=,value%",
    "%": "Attr"
  },
  _CSSValue: {
    "^": "Interceptor;",
    "%": "CSSPrimitiveValue;CSSValue;_CSSValue_ListMixin|_CSSValue_ListMixin_ImmutableListMixin"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      return W._JenkinsSmiHash_finish0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.left, receiver.top), [null]);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect"
  },
  _ClientRectList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin8;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    $isList: true,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: true,
    "%": "ClientRectList|DOMRectList"
  },
  _CssRuleList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin9;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.CssRule];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "CSSRuleList"
  },
  _CssValueList: {
    "^": "_CSSValue_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W._CSSValue];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue"
  },
  _DomPoint: {
    "^": "Interceptor;x%,y%",
    "%": "WebKitPoint"
  },
  _DomRect: {
    "^": "DomRectReadOnly;",
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    set$width: function(receiver, value) {
      receiver.width = value;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    set$x: function(receiver, value) {
      receiver.x = value;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    set$y: function(receiver, value) {
      receiver.y = value;
    },
    "%": "DOMRect"
  },
  _GamepadList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin10;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Gamepad];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "GamepadList"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin11;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  _ServiceWorker: {
    "^": "EventTarget;",
    $isEventTarget: true,
    "%": "ServiceWorker"
  },
  _SpeechRecognitionResultList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin12;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "SpeechRecognitionResultList"
  },
  _StyleSheetList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin13;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true,
    "%": "StyleSheetList"
  },
  CanvasElement_CanvasElement: function(height, width) {
    var e = document.createElement("canvas", null);
    if (width != null)
      J.set$width$x(e, width);
    if (height != null)
      J.set$height$x(e, height);
    return e;
  },
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
    xhr.responseType = responseType;
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "load", false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "error", false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  },
  ImageElement_ImageElement: function(height, src, width) {
    var e = document.createElement("img", null);
    if (src != null)
      J.set$src$x(e, src);
    return e;
  },
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window;
    if (e == null)
      return;
    if ("postMessage" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _convertNativeToDart_XHR_Response: function(o) {
    if (!!J.getInterceptor(o).$isDocument)
      return o;
    return P.convertNativeToDart_AcceptStructuredClone(o, true);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    set$background: function(receiver, value) {
      this.setProperty$3(receiver, "background", value, "");
    },
    set$borderColor: function(receiver, value) {
      this.setProperty$3(receiver, "border-color", value, "");
    },
    set$bottom: function(receiver, value) {
      this.setProperty$3(receiver, "bottom", value, "");
    },
    get$color: function(receiver) {
      return this.getPropertyValue$1(receiver, "color");
    },
    set$color: function(receiver, value) {
      this.setProperty$3(receiver, "color", value, "");
    },
    set$content: function(receiver, value) {
      this.setProperty$3(receiver, "content", value, "");
    },
    set$fontSize: function(receiver, value) {
      this.setProperty$3(receiver, "font-size", value, "");
    },
    set$height: function(receiver, value) {
      this.setProperty$3(receiver, "height", value, "");
    },
    set$left: function(receiver, value) {
      this.setProperty$3(receiver, "left", value, "");
    },
    get$opacity: function(receiver) {
      return this.getPropertyValue$1(receiver, "opacity");
    },
    set$padding: function(receiver, value) {
      this.setProperty$3(receiver, "padding", value, "");
    },
    set$pointerEvents: function(receiver, value) {
      this.setProperty$3(receiver, "pointer-events", value, "");
    },
    get$position: function(receiver) {
      return this.getPropertyValue$1(receiver, "position");
    },
    set$position: function(receiver, value) {
      this.setProperty$3(receiver, "position", value, "");
    },
    set$right: function(receiver, value) {
      this.setProperty$3(receiver, "right", value, "");
    },
    get$size: function(receiver) {
      return this.getPropertyValue$1(receiver, "size");
    },
    set$size: function(receiver, value) {
      this.setProperty$3(receiver, "size", value, "");
    },
    set$textAlign: function(receiver, value) {
      this.setProperty$3(receiver, "text-align", value, "");
    },
    set$top: function(receiver, value) {
      this.setProperty$3(receiver, "top", value, "");
    },
    set$width: function(receiver, value) {
      this.setProperty$3(receiver, "width", value, "");
    },
    set$zIndex: function(receiver, value) {
      this.setProperty$3(receiver, "z-index", value, "");
    }
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: true
  },
  _ChildrenElementList: {
    "^": "ListBase;_element,_childElements",
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty: function(_) {
      return this._element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    remove$1: function(_, object) {
      var t1;
      if (!!J.getInterceptor(object).$isElement) {
        t1 = this._element;
        if (object.parentNode === t1) {
          t1.removeChild(object);
          return true;
        }
      }
      return false;
    },
    removeAt$1: function(_, index) {
      var t1, result;
      t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      result = t1[index];
      this._element.removeChild(result);
      return result;
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    }
  },
  Element_Element$html_closure: {
    "^": "Closure:39;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    }
  },
  Entry_remove_closure: {
    "^": "Closure:55;completer_0",
    call$0: [function() {
      this.completer_0.complete$0(0);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Entry_remove_closure0: {
    "^": "Closure:39;completer_1",
    call$1: [function(error) {
      this.completer_1.completeError$1(error);
    }, "call$1", null, 2, 0, null, 31, "call"]
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.File];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.File];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure:61;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    }
  },
  HttpRequest_request_closure: {
    "^": "Closure:39;completer_1,xhr_2",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  Interceptor_ListMixin2: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.MimeType];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin2: {
    "^": "Interceptor_ListMixin2+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.MimeType];
    },
    $isEfficientLength: true
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    },
    removeAt$1: function(_, index) {
      var t1, t2, result;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      result = t2[index];
      t1.removeChild(result);
      return result;
    },
    remove$1: function(_, object) {
      var t1;
      if (!J.getInterceptor(object).$isNode)
        return false;
      t1 = this._this;
      if (t1 !== object.parentNode)
        return false;
      t1.removeChild(object);
      return true;
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin3: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin3: {
    "^": "Interceptor_ListMixin3+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin4: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Plugin];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin4: {
    "^": "Interceptor_ListMixin4+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Plugin];
    },
    $isEfficientLength: true
  },
  EventTarget_ListMixin: {
    "^": "EventTarget+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLength: true
  },
  EventTarget_ListMixin_ImmutableListMixin: {
    "^": "EventTarget_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin5: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin5: {
    "^": "Interceptor_ListMixin5+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLength: true
  },
  Storage_keys_closure: {
    "^": "Closure:61;keys_0",
    call$2: function(k, v) {
      return this.keys_0.push(k);
    }
  },
  Storage_values_closure: {
    "^": "Closure:61;values_0",
    call$2: function(k, v) {
      return this.values_0.push(v);
    }
  },
  Interceptor_ListMixin6: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin6: {
    "^": "Interceptor_ListMixin6+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLength: true
  },
  EventTarget_ListMixin0: {
    "^": "EventTarget+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.TextTrack];
    },
    $isEfficientLength: true
  },
  EventTarget_ListMixin_ImmutableListMixin0: {
    "^": "EventTarget_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.TextTrack];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin7: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin7: {
    "^": "Interceptor_ListMixin7+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: true
  },
  Window_animationFrame_closure: {
    "^": "Closure:39;completer_0",
    call$1: [function(time) {
      this.completer_0.complete$1(0, time);
    }, "call$1", null, 2, 0, null, 57, "call"]
  },
  Interceptor_ListMixin8: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin8: {
    "^": "Interceptor_ListMixin8+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin9: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.CssRule];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin9: {
    "^": "Interceptor_ListMixin9+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.CssRule];
    },
    $isEfficientLength: true
  },
  _CSSValue_ListMixin: {
    "^": "_CSSValue+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W._CSSValue];
    },
    $isEfficientLength: true
  },
  _CSSValue_ListMixin_ImmutableListMixin: {
    "^": "_CSSValue_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W._CSSValue];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin10: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Gamepad];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin10: {
    "^": "Interceptor_ListMixin10+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Gamepad];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin11: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin11: {
    "^": "Interceptor_ListMixin11+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin12: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin12: {
    "^": "Interceptor_ListMixin12+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin13: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin13: {
    "^": "Interceptor_ListMixin13+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isEfficientLength: true
  },
  _AttributeMap: {
    "^": "Object;",
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(this), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1.__internal$_current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function(_) {
      var attributes, keys, len, i;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_element",
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    remove$1: function(_, key) {
      var t1, value;
      t1 = this._element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _EventStream: {
    "^": "Stream;_html$_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_html$_target,_eventType,_useCapture"
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture",
    cancel$0: function(_) {
      if (this._html$_target == null)
        return;
      this._unlisten$0();
      this._html$_target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function(_) {
      if (this._html$_target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    }
  },
  _Html5NodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = J.get$tagName$x(element);
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = new H.ListIterator(C.List_1GN, 261, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2.__internal$_current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = new H.ListIterator(C.List_yrN, 12, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2.__internal$_current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    static: {"^": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a", null);
        t1 = new W._SameOriginUriPolicy(e, window.location);
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 40, 41, 42, 29, 43], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = t1.hostname;
        if (t4 == null ? t5 == null : t4 === t5) {
          t4 = t3.get$port(t2);
          t5 = t1.port;
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = t3.get$protocol(t2);
            t1 = t1.protocol;
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 40, 41, 42, 29, 43]}
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    removeAt$1: function(receiver, pos) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  NodeValidatorBuilder: {
    "^": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    }
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "^": "Closure:39;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    }
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "^": "Closure:39;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    }
  },
  _SimpleNodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = J.get$tagName$x(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    }
  },
  _TemplatingNodeValidator: {
    "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (J.get$attributes$x(element)._element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"^": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "^": "Closure:39;",
    call$1: [function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }, "call$1", null, 2, 0, null, 84, "call"]
  },
  _SvgNodeValidator: {
    "^": "Object;",
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor(element);
      if (!!t1.$isScriptElement)
        return false;
      if (!!t1.$isSvgElement)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    }
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  },
  NodeValidator: {
    "^": "Object;"
  },
  _SameOriginUriPolicy: {
    "^": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "^": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, isAttr, keys, i, $name, t3;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = "Removing disallowed element <" + H.S(t1.get$tagName(node)) + ">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = "Removing disallowed type extension <" + H.S(t1.get$tagName(node)) + " is=\"" + isAttr + "\">";
              if (typeof console != "undefined")
                console.warn(t2);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys(attrs));
          for (i = attrs.get$keys(attrs).length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = "Removing disallowed attribute <" + H.S(t1.get$tagName(node)) + " " + H.S($name) + "=\"" + H.S(t2.getAttribute($name)) + "\">";
              if (typeof console != "undefined")
                console.warn(t3);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (!!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "^": "Closure:85;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    }
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  Cursor: {
    "^": "Interceptor;",
    next$1: [function(receiver, key) {
      receiver.continue(key);
    }, function($receiver) {
      return this.next$1($receiver, null);
    }, "next$0", "call$1", "call$0", "get$next", 0, 2, 2, 3],
    "%": ";IDBCursor"
  },
  CursorWithValue: {
    "^": "Cursor;",
    get$value: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.value, false);
    },
    "%": "IDBCursorWithValue"
  },
  Database: {
    "^": "EventTarget;name=",
    "%": "IDBDatabase"
  },
  Index: {
    "^": "Interceptor;name=",
    count$1: [function(receiver, key_OR_range) {
      var request, e, stacktrace, t1, exception;
      try {
        request = receiver.count(key_OR_range);
        t1 = P._completeRequest(request);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        stacktrace = new H._StackTrace(exception, null);
        return P.Future_Future$error(e, stacktrace, null);
      }

    }, function($receiver) {
      return this.count$1($receiver, null);
    }, "count$0", "call$1", "call$0", "get$count", 0, 2, 4, 3, 5],
    "%": "IDBIndex"
  },
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  },
  ObjectStore: {
    "^": "Interceptor;name=",
    add$2: function(receiver, value, key) {
      var request, e, stacktrace, t1, exception;
      try {
        request = null;
        if (key != null)
          request = this._indexed_db$_add$2(receiver, value, key);
        else
          request = this._indexed_db$_add$1(receiver, value);
        t1 = P._completeRequest(request);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        stacktrace = new H._StackTrace(exception, null);
        return P.Future_Future$error(e, stacktrace, null);
      }

    },
    add$1: function($receiver, value) {
      return this.add$2($receiver, value, null);
    },
    count$1: [function(receiver, key_OR_range) {
      var request, e, stacktrace, t1, exception;
      try {
        request = receiver.count(key_OR_range);
        t1 = P._completeRequest(request);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        stacktrace = new H._StackTrace(exception, null);
        return P.Future_Future$error(e, stacktrace, null);
      }

    }, function($receiver) {
      return this.count$1($receiver, null);
    }, "count$0", "call$1", "call$0", "get$count", 0, 2, 4, 3, 5],
    _indexed_db$_add$2: function(receiver, value, key) {
      return receiver.add(P._convertDartToNative_PrepareForStructuredClone(value));
    },
    _indexed_db$_add$1: function($receiver, value) {
      return this._indexed_db$_add$2($receiver, value, null);
    },
    "%": "IDBObjectStore"
  },
  Request: {
    "^": "EventTarget;error=",
    get$result: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.result, false);
    },
    "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"
  },
  Transaction: {
    "^": "EventTarget;error=",
    get$completed: function(receiver) {
      var t1, completer;
      t1 = P.Database;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(receiver, "complete", false), [null]);
      t1.get$first(t1).then$1(new P.Transaction_completed_closure(receiver, completer));
      t1 = H.setRuntimeTypeInfo(new W._EventStream(receiver, "error", false), [null]);
      t1.get$first(t1).then$1(new P.Transaction_completed_closure0(completer));
      t1 = H.setRuntimeTypeInfo(new W._EventStream(receiver, "abort", false), [null]);
      t1.get$first(t1).then$1(new P.Transaction_completed_closure1(completer));
      return completer.future;
    },
    "%": "IDBTransaction"
  },
  _completeRequest: function(request) {
    var completer, t1;
    completer = H.setRuntimeTypeInfo(new P._SyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
    request.toString;
    t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "success", false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new P._completeRequest_closure(request, completer)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "error", false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    return completer.future;
  },
  _completeRequest_closure: {
    "^": "Closure:39;request_0,completer_1",
    call$1: [function(e) {
      this.completer_1.complete$1(0, P.convertNativeToDart_AcceptStructuredClone(this.request_0.result, false));
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  Transaction_completed_closure: {
    "^": "Closure:39;this_0,completer_1",
    call$1: [function(_) {
      this.completer_1.complete$1(0, this.this_0.db);
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  Transaction_completed_closure0: {
    "^": "Closure:39;completer_2",
    call$1: [function(e) {
      this.completer_2.completeError$1(e);
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  Transaction_completed_closure1: {
    "^": "Closure:39;completer_3",
    call$1: [function(e) {
      var t1 = this.completer_3;
      if (t1.future._state === 0)
        t1.completeError$1(e);
    }, "call$1", null, 2, 0, null, 17, "call"]
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;target=",
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;format=",
    "%": "SVGAltGlyphElement"
  },
  Angle: {
    "^": "Interceptor;value%",
    "%": "SVGAngle"
  },
  CircleElement: {
    "^": "GeometryElement;r=",
    "%": "SVGCircleElement"
  },
  FEBlendElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,height=,result=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,result=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  Length: {
    "^": "Interceptor;value%",
    "%": "SVGLength"
  },
  LengthList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin14;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: true,
    $asList: function() {
      return [P.Length];
    },
    $isEfficientLength: true,
    "%": "SVGLengthList"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  Matrix: {
    "^": "Interceptor;a=,b=,c=,d=",
    flipY$0: [function(receiver) {
      return receiver.flipY();
    }, "call$0", "get$flipY", 0, 0, 6],
    multiply$1: function(receiver, secondMatrix) {
      return receiver.multiply(secondMatrix);
    },
    "%": "SVGMatrix"
  },
  Number: {
    "^": "Interceptor;value%",
    "%": "SVGNumber"
  },
  NumberList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin15;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: true,
    $asList: function() {
      return [P.Number];
    },
    $isEfficientLength: true,
    "%": "SVGNumberList"
  },
  PathSeg: {
    "^": "Interceptor;",
    "%": "SVGPathSegClosePath;SVGPathSeg"
  },
  PathSegArcAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegArcAbs"
  },
  PathSegArcRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegArcRel"
  },
  PathSegCurvetoCubicAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoCubicAbs"
  },
  PathSegCurvetoCubicRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoCubicRel"
  },
  PathSegCurvetoCubicSmoothAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoCubicSmoothAbs"
  },
  PathSegCurvetoCubicSmoothRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoCubicSmoothRel"
  },
  PathSegCurvetoQuadraticAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoQuadraticAbs"
  },
  PathSegCurvetoQuadraticRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoQuadraticRel"
  },
  PathSegCurvetoQuadraticSmoothAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoQuadraticSmoothAbs"
  },
  PathSegCurvetoQuadraticSmoothRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegCurvetoQuadraticSmoothRel"
  },
  PathSegLinetoAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegLinetoAbs"
  },
  PathSegLinetoHorizontalAbs: {
    "^": "PathSeg;x%",
    "%": "SVGPathSegLinetoHorizontalAbs"
  },
  PathSegLinetoHorizontalRel: {
    "^": "PathSeg;x%",
    "%": "SVGPathSegLinetoHorizontalRel"
  },
  PathSegLinetoRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegLinetoRel"
  },
  PathSegLinetoVerticalAbs: {
    "^": "PathSeg;y%",
    "%": "SVGPathSegLinetoVerticalAbs"
  },
  PathSegLinetoVerticalRel: {
    "^": "PathSeg;y%",
    "%": "SVGPathSegLinetoVerticalRel"
  },
  PathSegList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin16;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: true,
    $asList: function() {
      return [P.PathSeg];
    },
    $isEfficientLength: true,
    "%": "SVGPathSegList"
  },
  PathSegMovetoAbs: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegMovetoAbs"
  },
  PathSegMovetoRel: {
    "^": "PathSeg;x%,y%",
    "%": "SVGPathSegMovetoRel"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  Point0: {
    "^": "Interceptor;x%,y%",
    "%": "SVGPoint"
  },
  PointList: {
    "^": "Interceptor;length=",
    "%": "SVGPointList"
  },
  RadialGradientElement: {
    "^": "_GradientElement;r=",
    "%": "SVGRadialGradientElement"
  },
  Rect: {
    "^": "Interceptor;width},x%,y%",
    "%": "SVGRect"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement: {
    "^": "SvgElement;type=",
    $isScriptElement: true,
    "%": "SVGScriptElement"
  },
  StringList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin17;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: true,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: true,
    "%": "SVGStringList"
  },
  StyleElement0: {
    "^": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    set$innerHtml: function(receiver, value) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, fragment, svgFragment, root;
      t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      validator = new W.NodeValidatorBuilder(t1);
      t1.push(W._Html5NodeValidator$(null));
      t1.push(W._TemplatingNodeValidator$());
      t1.push(new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      html = "<svg version=\"1.1\">" + svg + "</svg>";
      fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
      svgFragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    get$onContextMenu: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "contextmenu", false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "load", false), [null]);
    },
    get$onMouseDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousedown", false), [null]);
    },
    get$onMouseMove: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousemove", false), [null]);
    },
    get$onMouseUp: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseup", false), [null]);
    },
    $isSvgElement: true,
    $isEventTarget: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  Transform: {
    "^": "Interceptor;type=",
    "%": "SVGTransform"
  },
  TransformList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin18;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: true,
    $asList: function() {
      return [P.Transform];
    },
    $isEfficientLength: true,
    "%": "SVGTransformList"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  },
  _GradientElement: {
    "^": "SvgElement;",
    "%": "SVGLinearGradientElement;SVGGradientElement"
  },
  Interceptor_ListMixin14: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Length];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin14: {
    "^": "Interceptor_ListMixin14+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Length];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin15: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Number];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin15: {
    "^": "Interceptor_ListMixin15+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Number];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin16: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.PathSeg];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin16: {
    "^": "Interceptor_ListMixin16+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.PathSeg];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin17: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin17: {
    "^": "Interceptor_ListMixin17+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.String];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin18: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Transform];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin18: {
    "^": "Interceptor_ListMixin18+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Transform];
    },
    $isEfficientLength: true
  }
}],
["dart.dom.web_audio", "dart:web_audio", , P, {
  "^": "",
  AudioBuffer: {
    "^": "Interceptor;duration=,length=",
    "%": "AudioBuffer"
  },
  AudioBufferSourceNode: {
    "^": "AudioSourceNode;buffer%",
    start$3: [function(receiver, when, grainOffset, grainDuration) {
      if (!!receiver.start)
        if (grainDuration != null)
          receiver.start(when, grainOffset, grainDuration);
        else if (grainOffset != null)
          receiver.start(when, grainOffset);
        else
          receiver.start(when);
      else if (grainDuration != null)
        receiver.noteOn(when, grainOffset, grainDuration);
      else if (grainOffset != null)
        receiver.noteOn(when, grainOffset);
      else
        receiver.noteOn(when);
    }, function($receiver, when) {
      return this.start$3($receiver, when, null, null);
    }, "start$1", "call$3", null, "get$start", 2, 4, null, 3, 3, 7, 8, 9],
    "%": "AudioBufferSourceNode"
  },
  AudioContext: {
    "^": "EventTarget;",
    _decodeAudioData$3: function(receiver, audioData, successCallback, errorCallback) {
      return receiver.decodeAudioData(audioData, H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    createGain$0: function(receiver) {
      if (receiver.createGain !== undefined)
        return receiver.createGain();
      else
        return receiver.createGainNode();
    },
    decodeAudioData$1: function(receiver, audioData) {
      var t1, completer;
      t1 = P.AudioBuffer;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._decodeAudioData$3(receiver, audioData, new P.AudioContext_decodeAudioData_closure(completer), new P.AudioContext_decodeAudioData_closure0(completer));
      return completer.future;
    },
    "%": "AudioContext|OfflineAudioContext|webkitAudioContext"
  },
  AudioListener: {
    "^": "Interceptor;",
    setPosition$3: function(receiver, x, y, z) {
      return receiver.setPosition(x, y, z);
    },
    setVelocity$3: function(receiver, x, y, z) {
      return receiver.setVelocity(x, y, z);
    },
    "%": "AudioListener"
  },
  AudioNode: {
    "^": "EventTarget;",
    "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|ChannelMergerNode|ChannelSplitterNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|RealtimeAnalyserNode|ScriptProcessorNode|WaveShaperNode;AudioNode"
  },
  AudioParam: {
    "^": "Interceptor;value%",
    "%": "AudioParam"
  },
  AudioSourceNode: {
    "^": "AudioNode;",
    "%": "MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"
  },
  BiquadFilterNode: {
    "^": "AudioNode;type=",
    "%": "BiquadFilterNode"
  },
  ConvolverNode: {
    "^": "AudioNode;buffer%",
    normalize$0: function($receiver) {
      return $receiver.normalize.call$0();
    },
    "%": "ConvolverNode"
  },
  OscillatorNode: {
    "^": "AudioSourceNode;type=",
    "%": "Oscillator|OscillatorNode"
  },
  PannerNode: {
    "^": "AudioNode;",
    setPosition$3: function(receiver, x, y, z) {
      return receiver.setPosition(x, y, z);
    },
    setVelocity$3: function(receiver, x, y, z) {
      return receiver.setVelocity(x, y, z);
    },
    "%": "AudioPannerNode|PannerNode"
  },
  AudioContext_decodeAudioData_closure: {
    "^": "Closure:39;completer_0",
    call$1: [function(value) {
      this.completer_0.complete$1(0, value);
    }, "call$1", null, 2, 0, null, 29, "call"]
  },
  AudioContext_decodeAudioData_closure0: {
    "^": "Closure:39;completer_1",
    call$1: [function(error) {
      var t1 = this.completer_1;
      if (error == null)
        t1.completeError$1("");
      else
        t1.completeError$1(error);
    }, "call$1", null, 2, 0, null, 31, "call"]
  }
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "^": "",
  ActiveInfo: {
    "^": "Interceptor;name=,size=,type=",
    "%": "WebGLActiveInfo"
  },
  ContextAttributes: {
    "^": "Interceptor;alpha%",
    "%": "WebGLContextAttributes"
  },
  RenderingContext: {
    "^": "Interceptor;",
    activeTexture$1: function(receiver, texture) {
      return receiver.activeTexture(texture);
    },
    attachShader$2: function(receiver, program, shader) {
      return receiver.attachShader(program, shader);
    },
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindFramebuffer$2: function(receiver, target, framebuffer) {
      return receiver.bindFramebuffer(target, framebuffer);
    },
    bindRenderbuffer$2: function(receiver, target, renderbuffer) {
      return receiver.bindRenderbuffer(target, renderbuffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    blendEquation$1: [function(receiver, mode) {
      return receiver.blendEquation(mode);
    }, "call$1", "get$blendEquation", 2, 0, 10, 11],
    blendEquationSeparate$2: function(receiver, modeRGB, modeAlpha) {
      return receiver.blendEquationSeparate(modeRGB, modeAlpha);
    },
    blendFunc$2: function(receiver, sfactor, dfactor) {
      return receiver.blendFunc(sfactor, dfactor);
    },
    blendFuncSeparate$4: function(receiver, srcRGB, dstRGB, srcAlpha, dstAlpha) {
      return receiver.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    },
    bufferDataTyped$3: function(receiver, target, data, usage) {
      return receiver.bufferData(target, data, usage);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    clearDepth$1: function(receiver, depth) {
      return receiver.clearDepth(depth);
    },
    clearStencil$1: function(receiver, s) {
      return receiver.clearStencil(s);
    },
    compileShader$1: function(receiver, shader) {
      return receiver.compileShader(shader);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createFramebuffer$0: function(receiver) {
      return receiver.createFramebuffer();
    },
    createProgram$0: function(receiver) {
      return receiver.createProgram();
    },
    createRenderbuffer$0: function(receiver) {
      return receiver.createRenderbuffer();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    cullFace$1: function(receiver, mode) {
      return receiver.cullFace(mode);
    },
    deleteShader$1: function(receiver, shader) {
      return receiver.deleteShader(shader);
    },
    depthFunc$1: function(receiver, func) {
      return receiver.depthFunc(func);
    },
    depthMask$1: function(receiver, flag) {
      return receiver.depthMask(flag);
    },
    disable$1: function(receiver, cap) {
      return receiver.disable(cap);
    },
    disableVertexAttribArray$1: function(receiver, index) {
      return receiver.disableVertexAttribArray(index);
    },
    drawArrays$3: function(receiver, mode, first, count) {
      return receiver.drawArrays(mode, first, count);
    },
    drawElements$4: function(receiver, mode, count, type, offset) {
      return receiver.drawElements(mode, count, type, offset);
    },
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    enableVertexAttribArray$1: function(receiver, index) {
      return receiver.enableVertexAttribArray(index);
    },
    framebufferRenderbuffer$4: function(receiver, target, attachment, renderbuffertarget, renderbuffer) {
      return receiver.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    },
    framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
      return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
    },
    frontFace$1: function(receiver, mode) {
      return receiver.frontFace(mode);
    },
    generateMipmap$1: function(receiver, target) {
      return receiver.generateMipmap(target);
    },
    getAttribLocation$2: function(receiver, program, $name) {
      return receiver.getAttribLocation(program, $name);
    },
    getError$0: function(receiver) {
      return receiver.getError();
    },
    getExtension$1: function(receiver, $name) {
      return receiver.getExtension($name);
    },
    getParameter$1: function(receiver, pname) {
      return receiver.getParameter(pname);
    },
    getProgramParameter$2: function(receiver, program, pname) {
      return receiver.getProgramParameter(program, pname);
    },
    getShaderInfoLog$1: function(receiver, shader) {
      return receiver.getShaderInfoLog(shader);
    },
    getShaderParameter$2: function(receiver, shader, pname) {
      return receiver.getShaderParameter(shader, pname);
    },
    getShaderPrecisionFormat$2: function(receiver, shadertype, precisiontype) {
      return receiver.getShaderPrecisionFormat(shadertype, precisiontype);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    lineWidth$1: function(receiver, width) {
      return receiver.lineWidth(width);
    },
    linkProgram$1: function(receiver, program) {
      return receiver.linkProgram(program);
    },
    pixelStorei$2: function(receiver, pname, param) {
      return receiver.pixelStorei(pname, param);
    },
    polygonOffset$2: [function(receiver, factor, units) {
      return receiver.polygonOffset(factor, units);
    }, "call$2", "get$polygonOffset", 4, 0, 12, 13, 14],
    renderbufferStorage$4: function(receiver, target, internalformat, width, height) {
      return receiver.renderbufferStorage(target, internalformat, width, height);
    },
    shaderSource$2: function(receiver, shader, string) {
      return receiver.shaderSource(shader, string);
    },
    texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
      var t1, t2;
      t1 = J.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video);
      if (!!t1.$isImageData || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, P.convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
        return;
      }
      if (!!t1.$isImageElement)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (!!t1.$isCanvasElement)
        t2 = true;
      else
        t2 = false;
      if (t2) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      if (!!t1.$isVideoElement)
        t1 = true;
      else
        t1 = false;
      if (t1) {
        receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
        return;
      }
      throw H.wrapException(P.ArgumentError$("Incorrect number or type of arguments"));
    },
    texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
      return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
    },
    texImage2DCanvas$6: function(receiver, target, level, internalformat, format, type, canvas) {
      return receiver.texImage2D(target, level, internalformat, format, type, canvas);
    },
    texImage2DImage$6: function(receiver, target, level, internalformat, format, type, image) {
      return receiver.texImage2D(target, level, internalformat, format, type, image);
    },
    texImage2DVideo$6: function(receiver, target, level, internalformat, format, type, video) {
      return receiver.texImage2D(target, level, internalformat, format, type, video);
    },
    texParameterf$3: function(receiver, target, pname, param) {
      return receiver.texParameterf(target, pname, param);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform1f$2: function(receiver, $location, x) {
      return receiver.uniform1f($location, x);
    },
    uniform1fv$2: function(receiver, $location, v) {
      return receiver.uniform1fv($location, v);
    },
    uniform1i$2: function(receiver, $location, x) {
      return receiver.uniform1i($location, x);
    },
    uniform1iv$2: function(receiver, $location, v) {
      return receiver.uniform1iv($location, v);
    },
    uniform2f$3: function(receiver, $location, x, y) {
      return receiver.uniform2f($location, x, y);
    },
    uniform2fv$2: function(receiver, $location, v) {
      return receiver.uniform2fv($location, v);
    },
    uniform3f$4: function(receiver, $location, x, y, z) {
      return receiver.uniform3f($location, x, y, z);
    },
    uniform3fv$2: function(receiver, $location, v) {
      return receiver.uniform3fv($location, v);
    },
    uniform3iv$2: function(receiver, $location, v) {
      return receiver.uniform3iv($location, v);
    },
    uniform4f$5: function(receiver, $location, x, y, z, w) {
      return receiver.uniform4f($location, x, y, z, w);
    },
    uniform4fv$2: function(receiver, $location, v) {
      return receiver.uniform4fv($location, v);
    },
    uniformMatrix2fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix2fv($location, transpose, array);
    },
    uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix3fv($location, transpose, array);
    },
    uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix4fv($location, transpose, array);
    },
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
      return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    },
    texImage2DTyped$9: function(receiver, targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data) {
      return receiver.texImage2D(targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data);
    },
    "%": "WebGLRenderingContext"
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlResultSetRowList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin19;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isList: true,
    $asList: function() {
      return [P.Map];
    },
    $isEfficientLength: true,
    "%": "SQLResultSetRowList"
  },
  Interceptor_ListMixin19: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Map];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin19: {
    "^": "Interceptor_ListMixin19+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Map];
    },
    $isEfficientLength: true
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, null, 44, 45, 46, 47],
  _defineProperty: function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name))
      try {
        Object.defineProperty(o, $name, {value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  },
  _getOwnProperty: function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  },
  _convertToJS: [function(o) {
    var t1;
    if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      else if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (!!t1.$isJsObject)
        return o._jsObject;
      else if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 39, 48],
  _getJsProxy: function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  },
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 49, 48],
  _wrapToDart: function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  },
  _getDartProxy: function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  },
  JsObject: {
    "^": "Object;_jsObject",
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._jsObject === other._jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    },
    callMethod$2: function(method, args) {
      var t1, t2;
      t1 = this._jsObject;
      t2 = args == null ? null : P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P._convertToJS$closure()), [null, null]), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    $isJsObject: true,
    static: {JsObject_JsObject: function($constructor, $arguments) {
        var constr, args, factoryFunction;
        constr = P._convertToJS($constructor);
        args = [null];
        C.JSArray_methods.addAll$1(args, H.setRuntimeTypeInfo(new H.MappedListIterable($arguments, P._convertToJS$closure()), [null, null]));
        factoryFunction = constr.bind.apply(constr, args);
        String(factoryFunction);
        return P._wrapToDart(new factoryFunction());
      }}
  },
  JsFunction: {
    "^": "JsObject;_jsObject"
  },
  JsArray: {
    "^": "JsObject_ListMixin;_jsObject",
    _js$_checkIndex$1: function(_, index) {
      var t1;
      if (typeof index === "number" && Math.floor(index) === index)
        t1 = index < 0 || index >= this.get$length(this);
      else
        t1 = false;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
    },
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    },
    get$length: function(_) {
      var len = this._jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    },
    removeAt$1: function(_, index) {
      this._js$_checkIndex$1(0, index);
      return J.$index$asx(this.callMethod$2("splice", [index, 1]), 0);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var $length, args;
      P.JsArray__checkRange(start, end, this.get$length(this));
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      args = [start, $length];
      C.JSArray_methods.addAll$1(args, H.SubListIterable$(iterable, skipCount, null, H.getRuntimeTypeArgument(iterable, "ListMixin", 0)).take$1(0, $length));
      this.callMethod$2("splice", args);
    },
    sort$1: function(_, compare) {
      this.callMethod$2("sort", [compare]);
    },
    static: {JsArray__checkRange: function(start, end, $length) {
        var t1 = J.getInterceptor$n(start);
        if (t1.$lt(start, 0) || t1.$gt(start, $length))
          throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
        if (typeof start !== "number")
          return H.iae(start);
        if (end < start || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
      }}
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  _convertToJS_closure: {
    "^": "Closure:39;",
    call$1: function(o) {
      var jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    }
  },
  _convertToJS_closure0: {
    "^": "Closure:39;ctor_0",
    call$1: function(o) {
      return new this.ctor_0(o);
    }
  },
  _wrapToDart_closure: {
    "^": "Closure:39;",
    call$1: function(o) {
      return new P.JsFunction(o);
    }
  },
  _wrapToDart_closure0: {
    "^": "Closure:39;",
    call$1: function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    }
  },
  _wrapToDart_closure1: {
    "^": "Closure:39;",
    call$1: function(o) {
      return new P.JsObject(o);
    }
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine: function(hash, value) {
    if (typeof value !== "number")
      return H.iae(value);
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  },
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    }
  },
  Point: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint)
        return false;
      return J.$eq(this.x, other.x) && J.$eq(this.y, other.y);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2));
    },
    $add: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new P.Point(J.$add$ns(this.x, t1.get$x(other)), J.$add$ns(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $sub: function(_, other) {
      var t1 = J.getInterceptor$x(other);
      t1 = new P.Point(J.$sub$n(this.x, t1.get$x(other)), J.$sub$n(this.y, t1.get$y(other)));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $mul: function(_, factor) {
      var t1 = new P.Point(J.$mul$ns(this.x, factor), J.$mul$ns(this.y, factor));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return J.$add$ns(this.get$left(this), this.width);
    },
    get$bottom: function(_) {
      return J.$add$ns(this.get$top(this), this.height);
    },
    toString$0: function(_) {
      return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (J.$eq(this.get$left(this), t1.get$left(other))) {
        t2 = this.top;
        t3 = J.getInterceptor(t2);
        t1 = t3.$eq(t2, t1.get$top(other)) && J.$eq(J.$add$ns(this.left, this.width), t1.get$right(other)) && J.$eq(t3.$add(t2, this.height), t1.get$bottom(other));
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4, t5;
      t1 = J.get$hashCode$(this.get$left(this));
      t2 = this.top;
      t3 = J.getInterceptor(t2);
      t4 = t3.get$hashCode(t2);
      t5 = J.get$hashCode$(J.$add$ns(this.left, this.width));
      t2 = J.get$hashCode$(t3.$add(t2, this.height));
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t4), t5), t2));
    },
    containsPoint$1: function(_, another) {
      var t1;
      if (J.$ge$n(another.get$x(another), this.get$left(this)))
        if (J.$le$n(another.get$x(another), J.$add$ns(this.left, this.width))) {
          t1 = this.top;
          t1 = J.$ge$n(another.get$y(another), t1) && J.$le$n(another.get$y(another), J.$add$ns(t1, this.height));
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$topLeft: function(_) {
      var t1 = new P.Point(this.get$left(this), this.top);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle: true,
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = J.getInterceptor$n(width);
        t1 = t1.$lt(width, 0) ? J.$mul$ns(t1.$negate(width), 0) : width;
        if (typeof height !== "number")
          return height.$lt();
        if (height < 0)
          t2 = -height * 0;
        else
          t2 = height;
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, t2), [$T]);
      }}
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeByteBuffer: {
    "^": "Interceptor;",
    $isNativeByteBuffer: true,
    $isByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;buffer=",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length)) {
        if (!!this.$isList)
          if ($length === receiver.length)
            throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        throw H.wrapException(P.RangeError$range(index, 0, $length - 1, null, null));
      } else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    $isNativeTypedData: true,
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    $isTypedData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $isFloat32List: true,
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isInt32List: true,
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": ";Uint8Array"
  },
  _checkLength: function($length) {
    if (typeof $length !== "number" || Math.floor($length) !== $length)
      throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
    return $length;
  },
  _ensureNativeList: function(list) {
    var t1, t2, result, i, t3;
    t1 = J.getInterceptor(list);
    if (!!t1.$isJSIndexable)
      return list;
    t2 = t1.get$length(list);
    result = Array(t2);
    result.fixed$length = init;
    for (i = 0; i < t1.get$length(list); ++i) {
      t3 = t1.$index(list, i);
      if (i >= t2)
        return H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      if (typeof start !== "number")
        return H.iae(start);
      count = end - start;
      if (J.$lt$n(skipCount, 0))
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (typeof skipCount !== "number")
        return H.iae(skipCount);
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true,
    $isJSIndexable: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfDouble: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["", "dartwebglplayground.dart", , L, {
  "^": "",
  main: [function() {
    var gameDiv, drw, t1, t2, t3, t4, t5, t6, t7;
    $.debugDiv = document.querySelector("#debug");
    gameDiv = document.querySelector("#gameContainer");
    J.set$borderColor$x(gameDiv.style, "0x000000");
    drw = S.DrawingContext$(gameDiv, 800, 600, "");
    t1 = new M.LocalHighscore([], window.localStorage);
    t1.Load$0();
    t2 = new Float32Array(H._checkLength(3));
    t3 = new Float32Array(H._checkLength(3));
    t4 = P.LinkedHashMap_LinkedHashMap(null, null, null, S.Object3D, N.Enemy);
    t5 = S.Color$(16777215);
    t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t6.setValues$3(0, 0, -1);
    t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t7.setValues$3(0, 1, 0);
    new K.GameContext(false, false, [], null, null, null, null, null, null, [], null, null, null, null, [], null, null, null, [], [], t1, drw, null, false, 0.2, 0.15, null, 0, -1, 2, 1, [2, 3, 4, 6, 8, 10, 14, 18, 22, 28, 34, 40, 50, 60, 70, 80, 90, 100], [3, 10, 20, 30, 40, 50], [4, 12, 25], 20, 0, 0, 0, 0, -10, 0, 3, 3, 0, 50, [], false, new T.Vector3(t2), new T.Vector3(t3), null, null, null, null, [], [], t4, null, t5, null, null, null, 0, 4685308, 16777215, 0, t6, t7, new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))), false, 0, 0, 0, new T.Vector3(new Float32Array(H._checkLength(3))), 0).start$0(0);
  }, "call$0", "main$closure", 0, 0, 27]
},
1],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertNativeToDart_Dictionary: function(object) {
    var dict, keys, t1, key;
    if (object == null)
      return;
    dict = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    keys = Object.getOwnPropertyNames(object);
    for (t1 = new H.ListIterator(keys, keys.length, 0, null); t1.moveNext$0();) {
      key = t1.__internal$_current;
      dict.$indexSet(0, key, object[key]);
    }
    return dict;
  },
  convertDartToNative_Dictionary: function(dict) {
    var object = {};
    dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
    return object;
  },
  _convertDartToNative_PrepareForStructuredClone: function(value) {
    var copies, copy;
    copies = [];
    copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
    new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
    return copy;
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  convertDartToNative_ImageData: function(imageData) {
    return imageData;
  },
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var t1 = $.Device__cachedCssPrefix;
    if (t1 == null) {
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true) {
        $.Device__cachedCssPrefix = "-moz-";
        t1 = "-moz-";
      } else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1 === true) {
          $.Device__cachedCssPrefix = "-ms-";
          t1 = "-ms-";
        } else if (P.Device_isOpera() === true) {
          $.Device__cachedCssPrefix = "-o-";
          t1 = "-o-";
        } else {
          $.Device__cachedCssPrefix = "-webkit-";
          t1 = "-webkit-";
        }
      }
    }
    return t1;
  },
  convertDartToNative_Dictionary_closure: {
    "^": "Closure:64;object_0",
    call$2: function(key, value) {
      this.object_0[key] = value;
    }
  },
  _convertDartToNative_PrepareForStructuredClone_findSlot: {
    "^": "Closure:34;values_1,copies_2",
    call$1: function(value) {
      var t1, $length, i;
      t1 = this.values_1;
      $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies_2.push(null);
      return $length;
    }
  },
  _convertDartToNative_PrepareForStructuredClone_readSlot: {
    "^": "Closure:86;copies_3",
    call$1: function(i) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  _convertDartToNative_PrepareForStructuredClone_writeSlot: {
    "^": "Closure:87;copies_4",
    call$2: function(i, x) {
      var t1 = this.copies_4;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
    "^": "Closure:55;",
    call$0: function() {
    }
  },
  _convertDartToNative_PrepareForStructuredClone_walk: {
    "^": "Closure:39;findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var t1, t2, slot, copy, $length, i;
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor(e);
      if (!!t2.$isDateTime)
        return new Date(e.millisecondsSinceEpoch);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isFileList)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer)
        return e;
      if (!!t2.$isNativeTypedData)
        return e;
      if (!!t2.$isMap) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        t1.copy_0 = copy;
        if (copy != null)
          return copy;
        copy = {};
        t1.copy_0 = copy;
        this.writeSlot_7.call$2(slot, copy);
        t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
        return t1.copy_0;
      }
      if (!!t2.$isList) {
        $length = t2.get$length(e);
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null) {
          if (true === copy) {
            copy = new Array($length);
            this.writeSlot_7.call$2(slot, copy);
          }
          return copy;
        }
        copy = new Array($length);
        this.writeSlot_7.call$2(slot, copy);
        for (i = 0; i < $length; ++i) {
          t1 = this.call$1(t2.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t1;
        }
        return copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    }
  },
  _convertDartToNative_PrepareForStructuredClone_walk_closure: {
    "^": "Closure:61;box_0,walk_8",
    call$2: function(key, value) {
      this.box_0.copy_0[key] = this.walk_8.call$1(value);
    }
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:34;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    }
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:86;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:87;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:39;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          key = t1.__internal$_current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      C.JSArray_methods.forEach$1(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    contains$1: function(_, needle) {
      return false;
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    removeRange$2: function(_, start, end) {
      C.JSArray_methods.forEach$1(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    removeAt$1: function(_, index) {
      var t1, result;
      t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      result = t1[index];
      J.remove$0$ax(result);
      return result;
    },
    remove$1: function(_, element) {
      var i, t1, indexElement;
      if (!J.getInterceptor(element).$isElement)
        return false;
      for (i = 0; i < this.get$_filtered().length; ++i) {
        t1 = this.get$_filtered();
        if (i >= t1.length)
          return H.ioore(t1, i);
        indexElement = t1[i];
        if (indexElement === element) {
          J.remove$0$ax(indexElement);
          return true;
        }
      }
      return false;
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:39;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement;
    }
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:39;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    }
  }
}],
["simple_audio", "package:simple_audio/simple_audio.dart", , Q, {
  "^": "",
  AudioClip: {
    "^": "Object;_manager,_simple_audio$_name,_url,_buffer<,_simple_audio$_hasError,_errorString,_isReadyToPlay,_urlAbsolute,defaultSource<",
    initDefaultSource$0: function() {
      var t1 = this._manager.makeSource$1(this._simple_audio$_name + "_default");
      this.defaultSource = t1;
      t1.set$positional(false);
    },
    _onDecode$2: function(buffer, completer) {
      if (buffer == null) {
        this._simple_audio$_hasError = true;
        this._errorString = "Error decoding buffer.";
        completer.complete$1(0, this);
        return;
      }
      this._simple_audio$_hasError = false;
      this._errorString = "OK";
      this._buffer = buffer;
      this._isReadyToPlay = true;
      completer.complete$1(0, this);
    },
    _onRequestSuccess$2: function(request, completer) {
      var response, t1, onError, result, t2;
      response = W._convertNativeToDart_XHR_Response(request.response);
      t1 = J.decodeAudioData$1$x(this._manager._context, response).then$1(new Q.AudioClip__onRequestSuccess_closure(this, completer));
      onError = new Q.AudioClip__onRequestSuccess_closure0(this, completer);
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t2 = result._zone;
      if (t2 !== C.C__RootZone)
        onError = P._registerErrorHandler(onError, t2);
      t1._addListener$1(new P._FutureListener(null, result, 2, null, onError));
    },
    load$0: function(_) {
      var t1, request, t2, completer;
      this._isReadyToPlay = false;
      this._buffer = null;
      t1 = this._url;
      if (C.JSString_methods.startsWith$1(t1, "sfxr:"))
        return P.Future_Future$delayed(P.Duration$(0, 0, 0, 1, 0, 0), new Q.AudioClip_load_closure(this), Q.AudioClip);
      request = new XMLHttpRequest();
      t2 = Q.AudioClip;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t2])), [t2]);
      if (this._urlAbsolute)
        C.HttpRequest_methods.open$2(request, "GET", t1);
      else
        C.HttpRequest_methods.open$2(request, "GET", this._manager.baseURL + "/" + t1);
      request.responseType = "arraybuffer";
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new Q.AudioClip_load_closure0(this, request, completer)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new Q.AudioClip_load_closure1(this, request, completer)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "abort", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new Q.AudioClip_load_closure2(this, request, completer)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      request.send();
      return completer.future;
    },
    get$length: function(_) {
      var t1 = this._buffer;
      if (t1 == null)
        return 0;
      return J.get$duration$x(t1);
    },
    get$isReadyToPlay: function() {
      return this._isReadyToPlay;
    },
    static: {"^": "AudioClip_SFXR_PREFIX"}
  },
  AudioClip__onRequestSuccess_closure: {
    "^": "Closure:39;this_0,completer_1",
    call$1: [function(buffer) {
      this.this_0._onDecode$2(buffer, this.completer_1);
    }, "call$1", null, 2, 0, null, 88, "call"]
  },
  AudioClip__onRequestSuccess_closure0: {
    "^": "Closure:39;this_2,completer_3",
    call$1: [function(e) {
      this.this_2._onDecode$2(null, this.completer_3);
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  AudioClip_load_closure: {
    "^": "Closure:55;this_0",
    call$0: function() {
      var t1, t2, t3, synth, t4, envelopeFullLength, buffer;
      t1 = this.this_0;
      t2 = t1._manager._context;
      t3 = new Q.SfxrParams(0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t3.SfxrParams$fromString$1(C.JSString_methods.substring$1(t1._url, 5));
      synth = new Q.SfxrSynth(t3, null, null, null, null, null, null, null, null, null, null, null, null);
      synth.reset$0(0);
      t4 = t3.attackTime;
      synth._envelopeLength0 = J.$mul$ns(J.$mul$ns(t4, t4), 100000);
      t4 = t3.sustainTime;
      synth._envelopeLength1 = J.$mul$ns(J.$mul$ns(t4, t4), 100000);
      t3 = t3.decayTime;
      synth._envelopeLength2 = J.$add$ns(J.$mul$ns(J.$mul$ns(t3, t3), 100000), 10);
      envelopeFullLength = J.toInt$0$n(J.$add$ns(J.$add$ns(synth._envelopeLength0, synth._envelopeLength1), synth._envelopeLength2));
      buffer = t2.createBuffer(2, envelopeFullLength, 44100);
      synth.synthWave$2(buffer.getChannelData(0), envelopeFullLength);
      t1._buffer = buffer;
      t1._isReadyToPlay = true;
      return t1;
    }
  },
  AudioClip_load_closure0: {
    "^": "Closure:39;this_1,request_2,completer_3",
    call$1: [function(e) {
      return this.this_1._onRequestSuccess$2(this.request_2, this.completer_3);
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  AudioClip_load_closure1: {
    "^": "Closure:39;this_4,request_5,completer_6",
    call$1: [function(e) {
      var t1 = this.this_4;
      t1._simple_audio$_hasError = true;
      t1._errorString = "Error fetching data";
      this.completer_6.complete$1(0, t1);
      return;
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  AudioClip_load_closure2: {
    "^": "Closure:39;this_7,request_8,completer_9",
    call$1: [function(e) {
      var t1 = this.this_7;
      t1._simple_audio$_hasError = true;
      t1._errorString = "Error fetching data";
      this.completer_9.complete$1(0, t1);
      return;
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  AudioEffect: {
    "^": "Object;"
  },
  AudioManager: {
    "^": "Object;_x,_y,_z,_context,_destination,_listener,_masterGain,_musicGain,_sourceGain,baseURL,_clips,_sources,_music,_mutedVolume,_musicPaused,_sourcesPaused",
    pauseSources$0: function() {
      this._sources.forEach$1(0, new Q.AudioManager_pauseSources_closure());
      this._sourcesPaused = true;
    },
    resumeSources$0: function() {
      this._sources.forEach$1(0, new Q.AudioManager_resumeSources_closure());
      this._sourcesPaused = false;
    },
    makeClip$2: function($name, url) {
      var t1, clip;
      t1 = this._clips;
      clip = t1.$index(0, $name);
      if (clip != null)
        return clip;
      clip = new Q.AudioClip(this, $name, url, null, false, "", false, false, null);
      clip.initDefaultSource$0();
      t1.$indexSet(0, $name, clip);
      return clip;
    },
    loadClips$0: function() {
      var loaded = H.setRuntimeTypeInfo([], [[P.Future, Q.AudioClip]]);
      this._clips.forEach$1(0, new Q.AudioManager_loadClips_closure(loaded));
      return P.Future_wait(loaded, false);
    },
    makeSource$1: function($name) {
      var t1, source;
      t1 = this._sources;
      source = t1.$index(0, $name);
      if (source != null)
        return source;
      source = Q.AudioSource$_internal(this, $name, this._sourceGain);
      t1.$indexSet(0, $name, source);
      return source;
    },
    playClipFromSourceIn$4: function(delay, sourceName, clipName, looped) {
      var source, clip;
      source = this._sources.$index(0, sourceName);
      if (source == null) {
        P.print("Could not find source " + H.S(sourceName));
        return;
      }
      clip = this._clips.$index(0, clipName);
      if (clip == null) {
        P.print("Could not find clip " + clipName);
        return;
      }
      if (looped)
        return source.playLoopedIn$2(delay, clip);
      else
        return source.playOnceIn$2(delay, clip);
    },
    get$x: function(_) {
      return this._x;
    },
    get$y: function(_) {
      return this._y;
    },
    get$z: function(_) {
      return this._z;
    },
    setPosition$3: function(_, x, y, z) {
      var t1, t2;
      this._x = x;
      this._y = y;
      this._z = z;
      t1 = this._listener;
      t2 = $.AudioManager_positionalScale;
      t1.setPosition(x * t2, y * t2, z * t2);
    },
    setVelocity$3: function(_, x, y, z) {
      var t1, t2;
      t1 = this._listener;
      t2 = $.AudioManager_positionalScale;
      t1.setVelocity(x * t2, y * t2, z * t2);
    },
    AudioManager$1: function(baseURL) {
      var t1 = new (window.AudioContext || window.webkitAudioContext)();
      this._context = t1;
      this._destination = t1.destination;
      this._listener = t1.listener;
      this._masterGain = J.createGain$0$x(t1);
      this._musicGain = J.createGain$0$x(this._context);
      this._sourceGain = J.createGain$0$x(this._context);
      this._masterGain.connect(this._destination, 0, 0);
      this._musicGain.connect(this._masterGain, 0, 0);
      this._sourceGain.connect(this._masterGain, 0, 0);
      t1 = new Q.AudioMusic(this, null, null, null);
      t1.AudioMusic$_internal$2(this, this._musicGain);
      this._music = t1;
    },
    static: {"^": "AudioManager_positionalScale,AudioManager_minDistance"}
  },
  AudioManager_pauseSources_closure: {
    "^": "Closure:61;",
    call$2: function(k, v) {
      J.set$pause$x(v, true);
    }
  },
  AudioManager_resumeSources_closure: {
    "^": "Closure:61;",
    call$2: function(k, v) {
      J.set$pause$x(v, false);
    }
  },
  AudioManager_loadClips_closure: {
    "^": "Closure:61;loaded_0",
    call$2: function($name, clip) {
      if (!clip.get$isReadyToPlay())
        this.loaded_0.push(J.load$0$x(clip));
    }
  },
  AudioMusic: {
    "^": "Object;_manager,_simple_audio$_source,_sound,_clip",
    _stop$0: function() {
      var t1 = this._sound;
      if (t1 != null) {
        t1.stop$0(0);
        this._sound = null;
      }
    },
    set$pause: function(_, b) {
      var t1 = this._sound;
      if (t1 != null)
        t1.set$pause(0, b);
    },
    AudioMusic$_internal$2: function(_manager, output) {
      var t1 = Q.AudioSource$_internal(this._manager, "music", output);
      this._simple_audio$_source = t1;
      t1.set$positional(false);
    }
  },
  SfxrParams: {
    "^": "Object;waveType,attackTime,sustainTime,sustainPunch,decayTime,startFrequency,minFrequency,slide,deltaSlide,vibratoDepth,vibratoSpeed,changeAmount,changeSpeed,squareDuty,dutySweep,repeatSpeed,phaserOffset,phaserSweep,lpFilterCutoff,lpFilterCutoffSweep,lpFilterResonance,hpFilterCutoff,hpFilterCutoffSweep,masterVolume",
    SfxrParams$fromString$1: function(string) {
      var values, totalTime, multiplier;
      values = string.split(",");
      if (0 >= values.length)
        return H.ioore(values, 0);
      this.waveType = Q.SfxrParams__toInt(values[0]);
      if (1 >= values.length)
        return H.ioore(values, 1);
      this.attackTime = Q.SfxrParams__toDouble(values[1]);
      if (2 >= values.length)
        return H.ioore(values, 2);
      this.sustainTime = Q.SfxrParams__toDouble(values[2]);
      if (3 >= values.length)
        return H.ioore(values, 3);
      this.sustainPunch = Q.SfxrParams__toDouble(values[3]);
      if (4 >= values.length)
        return H.ioore(values, 4);
      this.decayTime = Q.SfxrParams__toDouble(values[4]);
      if (5 >= values.length)
        return H.ioore(values, 5);
      this.startFrequency = Q.SfxrParams__toDouble(values[5]);
      if (6 >= values.length)
        return H.ioore(values, 6);
      this.minFrequency = Q.SfxrParams__toDouble(values[6]);
      if (7 >= values.length)
        return H.ioore(values, 7);
      this.slide = Q.SfxrParams__toDouble(values[7]);
      if (8 >= values.length)
        return H.ioore(values, 8);
      this.deltaSlide = Q.SfxrParams__toDouble(values[8]);
      if (9 >= values.length)
        return H.ioore(values, 9);
      this.vibratoDepth = Q.SfxrParams__toDouble(values[9]);
      if (10 >= values.length)
        return H.ioore(values, 10);
      this.vibratoSpeed = Q.SfxrParams__toDouble(values[10]);
      if (11 >= values.length)
        return H.ioore(values, 11);
      this.changeAmount = Q.SfxrParams__toDouble(values[11]);
      if (12 >= values.length)
        return H.ioore(values, 12);
      this.changeSpeed = Q.SfxrParams__toDouble(values[12]);
      if (13 >= values.length)
        return H.ioore(values, 13);
      this.squareDuty = Q.SfxrParams__toDouble(values[13]);
      if (14 >= values.length)
        return H.ioore(values, 14);
      this.dutySweep = Q.SfxrParams__toDouble(values[14]);
      if (15 >= values.length)
        return H.ioore(values, 15);
      this.repeatSpeed = Q.SfxrParams__toDouble(values[15]);
      if (16 >= values.length)
        return H.ioore(values, 16);
      this.phaserOffset = Q.SfxrParams__toDouble(values[16]);
      if (17 >= values.length)
        return H.ioore(values, 17);
      this.phaserSweep = Q.SfxrParams__toDouble(values[17]);
      if (18 >= values.length)
        return H.ioore(values, 18);
      this.lpFilterCutoff = Q.SfxrParams__toDouble(values[18]);
      if (19 >= values.length)
        return H.ioore(values, 19);
      this.lpFilterCutoffSweep = Q.SfxrParams__toDouble(values[19]);
      if (20 >= values.length)
        return H.ioore(values, 20);
      this.lpFilterResonance = Q.SfxrParams__toDouble(values[20]);
      if (21 >= values.length)
        return H.ioore(values, 21);
      this.hpFilterCutoff = Q.SfxrParams__toDouble(values[21]);
      if (22 >= values.length)
        return H.ioore(values, 22);
      this.hpFilterCutoffSweep = Q.SfxrParams__toDouble(values[22]);
      if (23 >= values.length)
        return H.ioore(values, 23);
      this.masterVolume = Q.SfxrParams__toDouble(values[23]);
      if (J.$lt$n(this.sustainTime, 0.01))
        this.sustainTime = 0.01;
      totalTime = J.$add$ns(J.$add$ns(this.attackTime, this.sustainTime), this.decayTime);
      if (J.$lt$n(totalTime, 0.18)) {
        if (typeof totalTime !== "number")
          return H.iae(totalTime);
        multiplier = 0.18 / totalTime;
        this.attackTime = J.$mul$ns(this.attackTime, multiplier);
        this.sustainTime = J.$mul$ns(this.sustainTime, multiplier);
        this.decayTime = J.$mul$ns(this.decayTime, multiplier);
      }
    },
    static: {SfxrParams__toInt: function(v) {
        if (v == null || J.$eq(J.get$length$asx(v), 0))
          return 0;
        return H.Primitives_parseInt(v, 10, null);
      }, SfxrParams__toDouble: function(v) {
        if (v == null || J.$eq(J.get$length$asx(v), 0))
          return 0;
        return H.Primitives_parseDouble(v, null);
      }}
  },
  SfxrSynth: {
    "^": "Object;_params,_envelopeLength0,_envelopeLength1,_envelopeLength2,_period,_maxPeriod,_slide,_deltaSlide,_changeAmount,_squareDuty,_dutySweep,_changeTime,_changeLimit",
    reset$0: function(_) {
      var p, t1, t2;
      p = this._params;
      t1 = p.startFrequency;
      t1 = J.$add$ns(J.$mul$ns(t1, t1), 0.001);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._period = 100 / t1;
      t1 = p.minFrequency;
      t1 = J.$add$ns(J.$mul$ns(t1, t1), 0.001);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._maxPeriod = 100 / t1;
      t1 = p.slide;
      t1 = J.$mul$ns(J.$mul$ns(J.$mul$ns(t1, t1), p.slide), 0.01);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this._slide = 1 - t1;
      this._deltaSlide = J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$negate$n(p.deltaSlide), p.deltaSlide), p.deltaSlide), 0.000001);
      if (J.$eq(p.waveType, 0)) {
        t1 = J.$div$n(p.squareDuty, 2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._squareDuty = 0.5 - t1;
        this._dutySweep = J.$mul$ns(J.$negate$n(p.dutySweep), 0.00005);
      }
      t1 = J.$gt$n(p.changeAmount, 0);
      t2 = p.changeAmount;
      if (t1) {
        t1 = J.$mul$ns(J.$mul$ns(t2, t2), 0.9);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = 1 - t1;
      } else {
        t1 = J.$mul$ns(J.$mul$ns(t2, t2), 10);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = 1 + t1;
      }
      this._changeAmount = t1;
      this._changeTime = 0;
      if (J.$eq(p.changeSpeed, 1))
        t1 = 0;
      else {
        t1 = p.changeSpeed;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = 1 - t1;
        t1 = t1 * t1 * 20000 + 32;
      }
      this._changeLimit = C.JSNumber_methods.toInt$0(t1);
    },
    synthWave$2: function(buffer, $length) {
      var p, _filters, t1, _hpFilterCutoff, _hpFilterDeltaCutoff, _lpFilterCutoff, _lpFilterDeltaCutoff, _lpFilterOn, _masterVolume, _minFreqency, _phaser, _phaserDeltaOffset, _phaserOffset, _repeatLimit, _sustainPunch, _vibratoAmplitude, _vibratoSpeed, _waveType, _envelopeLength, _envelopeOverLength0, _envelopeOverLength1, _envelopeOverLength2, _lpFilterDamping, _phaserBuffer, _noiseBuffer, i, t2, t3, t4, t5, t6, _finished, _envelopeTime, _envelopeVolume, _hpFilterPos, _lpFilterDeltaPos, _lpFilterOldPos, _lpFilterPos, _pos, _sample, _vibratoPhase, _phase, _envelopeStage, _phaserPos, _phaserInt, _repeatTime, t7, t8, _periodTemp0, _periodTemp, _superSample, j, n, _lpFilterPos0;
      p = this._params;
      _filters = !J.$eq(p.lpFilterCutoff, 1) || !J.$eq(p.hpFilterCutoff, 0);
      t1 = p.hpFilterCutoff;
      _hpFilterCutoff = J.$mul$ns(J.$mul$ns(t1, t1), 0.1);
      t1 = J.$mul$ns(p.hpFilterCutoffSweep, 0.0003);
      if (typeof t1 !== "number")
        return H.iae(t1);
      _hpFilterDeltaCutoff = 1 + t1;
      t1 = p.lpFilterCutoff;
      _lpFilterCutoff = J.$mul$ns(J.$mul$ns(J.$mul$ns(t1, t1), p.lpFilterCutoff), 0.1);
      t1 = J.$mul$ns(p.lpFilterCutoffSweep, 0.0001);
      if (typeof t1 !== "number")
        return H.iae(t1);
      _lpFilterDeltaCutoff = 1 + t1;
      _lpFilterOn = !J.$eq(p.lpFilterCutoff, 1);
      t1 = p.masterVolume;
      _masterVolume = J.$mul$ns(t1, t1);
      _minFreqency = p.minFrequency;
      _phaser = !J.$eq(p.phaserOffset, 0) || !J.$eq(p.phaserSweep, 0);
      t1 = p.phaserSweep;
      _phaserDeltaOffset = J.$mul$ns(J.$mul$ns(J.$mul$ns(t1, t1), p.phaserSweep), 0.2);
      t1 = p.phaserOffset;
      t1 = J.$mul$ns(t1, t1);
      _phaserOffset = J.$mul$ns(t1, J.$lt$n(p.phaserOffset, 0) ? -1020 : 1020);
      if (!J.$eq(p.repeatSpeed, 0)) {
        t1 = p.repeatSpeed;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = 1 - t1;
        _repeatLimit = C.JSNumber_methods.toInt$0(t1 * t1 * 20000) + 32;
      } else
        _repeatLimit = 0;
      _sustainPunch = p.sustainPunch;
      _vibratoAmplitude = J.$div$n(p.vibratoDepth, 2);
      t1 = p.vibratoSpeed;
      _vibratoSpeed = J.$mul$ns(J.$mul$ns(t1, t1), 0.01);
      _waveType = p.waveType;
      _envelopeLength = this._envelopeLength0;
      if (typeof _envelopeLength !== "number")
        return H.iae(_envelopeLength);
      _envelopeOverLength0 = 1 / _envelopeLength;
      t1 = this._envelopeLength1;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _envelopeOverLength1 = 1 / t1;
      t1 = this._envelopeLength2;
      if (typeof t1 !== "number")
        return H.iae(t1);
      _envelopeOverLength2 = 1 / t1;
      t1 = p.lpFilterResonance;
      t1 = J.$mul$ns(J.$mul$ns(t1, t1), 20);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof _lpFilterCutoff !== "number")
        return H.iae(_lpFilterCutoff);
      _lpFilterDamping = 5 / (1 + t1) * (0.01 + _lpFilterCutoff);
      _lpFilterDamping = 1 - (_lpFilterDamping > 0.8 ? 0.8 : _lpFilterDamping);
      _phaserBuffer = H.setRuntimeTypeInfo(Array(1024), [P.$double]);
      _noiseBuffer = H.setRuntimeTypeInfo(Array(32), [P.$double]);
      for (i = 1023; i > -1; --i)
        _phaserBuffer[i] = 0;
      for (i = 31; i > -1; --i)
        _noiseBuffer[i] = C.C__JSRandom.nextDouble$0() * 2 - 1;
      for (t1 = J.getInterceptor$ax(buffer), t2 = J.getInterceptor(_waveType), t3 = J.getInterceptor$n(_vibratoAmplitude), t4 = _repeatLimit !== 0, t5 = J.getInterceptor$n(_minFreqency), t6 = _hpFilterDeltaCutoff !== 0, _finished = false, _envelopeTime = 0, _envelopeVolume = 0, _hpFilterPos = 0, _lpFilterDeltaPos = 0, _lpFilterOldPos = 0, _lpFilterPos = 0, _pos = 0, _sample = 0, _vibratoPhase = 0, _phase = 0, _envelopeStage = 0, _phaserPos = 0, _phaserInt = 0, _repeatTime = 0, i = 0; i < $length; ++i) {
        if (_finished)
          return true;
        if (t4) {
          ++_repeatTime;
          if (_repeatTime >= _repeatLimit) {
            this.reset$0(0);
            _repeatTime = 0;
          }
        }
        t7 = this._changeLimit;
        if (t7 !== 0) {
          t8 = this._changeTime;
          if (typeof t8 !== "number")
            return t8.$add();
          ++t8;
          this._changeTime = t8;
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (t8 >= t7) {
            this._changeLimit = 0;
            t7 = this._period;
            t8 = this._changeAmount;
            if (typeof t7 !== "number")
              return t7.$mul();
            if (typeof t8 !== "number")
              return H.iae(t8);
            this._period = t7 * t8;
          }
        }
        t7 = this._slide;
        t8 = this._deltaSlide;
        if (typeof t7 !== "number")
          return t7.$add();
        if (typeof t8 !== "number")
          return H.iae(t8);
        t8 = t7 + t8;
        this._slide = t8;
        t7 = this._period;
        if (typeof t7 !== "number")
          return t7.$mul();
        t8 = t7 * t8;
        this._period = t8;
        t7 = this._maxPeriod;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (t8 > t7) {
          this._period = t7;
          _finished = t5.$gt(_minFreqency, 0) && true;
        } else
          _finished = false;
        _periodTemp0 = this._period;
        if (t3.$gt(_vibratoAmplitude, 0)) {
          if (typeof _vibratoSpeed !== "number")
            return H.iae(_vibratoSpeed);
          _vibratoPhase += _vibratoSpeed;
          t7 = Math.sin(_vibratoPhase);
          if (typeof _vibratoAmplitude !== "number")
            return H.iae(_vibratoAmplitude);
          if (typeof _periodTemp0 !== "number")
            return _periodTemp0.$mul();
          _periodTemp0 *= 1 + t7 * _vibratoAmplitude;
        }
        _periodTemp = J.toInt$0$n(_periodTemp0);
        if (_periodTemp < 8)
          _periodTemp = 8;
        if (t2.$eq(_waveType, 0)) {
          t7 = this._squareDuty;
          t8 = this._dutySweep;
          if (typeof t7 !== "number")
            return t7.$add();
          if (typeof t8 !== "number")
            return H.iae(t8);
          t8 = t7 + t8;
          this._squareDuty = t8;
          if (t8 < 0)
            this._squareDuty = 0;
          else if (t8 > 0.5)
            this._squareDuty = 0.5;
        }
        ++_envelopeTime;
        if (typeof _envelopeLength !== "number")
          return H.iae(_envelopeLength);
        if (_envelopeTime > _envelopeLength) {
          ++_envelopeStage;
          switch (_envelopeStage) {
            case 1:
              _envelopeLength = this._envelopeLength1;
              break;
            case 2:
              _envelopeLength = this._envelopeLength2;
              break;
          }
          _envelopeTime = 0;
        }
        switch (_envelopeStage) {
          case 0:
            _envelopeVolume = _envelopeTime * _envelopeOverLength0;
            break;
          case 1:
            if (typeof _sustainPunch !== "number")
              return H.iae(_sustainPunch);
            _envelopeVolume = 1 + (1 - _envelopeTime * _envelopeOverLength1) * 2 * _sustainPunch;
            break;
          case 2:
            _envelopeVolume = 1 - _envelopeTime * _envelopeOverLength2;
            break;
          case 3:
            _finished = true;
            _envelopeVolume = 0;
            break;
        }
        if (_phaser) {
          _phaserOffset = J.$add$ns(_phaserOffset, _phaserDeltaOffset);
          _phaserInt = J.toInt$0$n(_phaserOffset);
          if (_phaserInt < 0)
            _phaserInt = -_phaserInt;
          else if (_phaserInt > 1023)
            _phaserInt = 1023;
        }
        if (_filters && t6) {
          _hpFilterCutoff = J.$mul$ns(_hpFilterCutoff, _hpFilterDeltaCutoff);
          t7 = J.getInterceptor$n(_hpFilterCutoff);
          if (t7.$lt(_hpFilterCutoff, 0.00001))
            _hpFilterCutoff = 0.00001;
          else if (t7.$gt(_hpFilterCutoff, 0.1))
            _hpFilterCutoff = 0.1;
        }
        for (_superSample = 0, j = 0; j < 8; ++j) {
          ++_phase;
          if (_phase >= _periodTemp) {
            _phase = C.JSInt_methods.$mod(_phase, _periodTemp);
            if (t2.$eq(_waveType, 3))
              for (n = 31; n > -1; --n)
                _noiseBuffer[n] = C.C__JSRandom.nextDouble$0() * 2 - 1;
          }
          switch (_waveType) {
            case 0:
              t7 = this._squareDuty;
              if (typeof t7 !== "number")
                return H.iae(t7);
              _sample = _phase / _periodTemp < t7 ? 0.5 : -0.5;
              break;
            case 1:
              _sample = 1 - _phase / _periodTemp * 2;
              break;
            case 2:
              _pos = _phase / _periodTemp;
              _pos = _pos > 0.5 ? (_pos - 1) * 6.28318531 : _pos * 6.28318531;
              t7 = 1.27323954 * _pos;
              t8 = 0.405284735 * _pos;
              _sample = _pos < 0 ? t7 + t8 * _pos : t7 - t8 * _pos;
              _sample = _sample < 0 ? 0.225 * (_sample * -_sample - _sample) + _sample : 0.225 * (_sample * _sample - _sample) + _sample;
              break;
            case 3:
              t7 = C.JSNumber_methods.toInt$0(Math.abs(_phase * 32 / _periodTemp));
              if (t7 < 0 || t7 >= 32)
                return H.ioore(_noiseBuffer, t7);
              _sample = _noiseBuffer[t7];
              break;
          }
          if (_filters) {
            _lpFilterCutoff *= _lpFilterDeltaCutoff;
            if (_lpFilterCutoff < 0)
              _lpFilterCutoff = 0;
            else if (_lpFilterCutoff > 0.1)
              _lpFilterCutoff = 0.1;
            if (_lpFilterOn) {
              if (typeof _sample !== "number")
                return _sample.$sub();
              _lpFilterDeltaPos = (_lpFilterDeltaPos + (_sample - _lpFilterPos) * _lpFilterCutoff) * _lpFilterDamping;
              _lpFilterPos0 = _lpFilterPos;
            } else {
              _lpFilterPos0 = _sample;
              _lpFilterDeltaPos = 0;
            }
            if (typeof _lpFilterPos0 !== "number")
              return _lpFilterPos0.$add();
            _lpFilterPos0 += _lpFilterDeltaPos;
            if (typeof _hpFilterCutoff !== "number")
              return H.iae(_hpFilterCutoff);
            _hpFilterPos = (_hpFilterPos + (_lpFilterPos0 - _lpFilterPos)) * (1 - _hpFilterCutoff);
            _sample = _hpFilterPos;
            _lpFilterOldPos = _lpFilterPos;
            _lpFilterPos = _lpFilterPos0;
          }
          if (_phaser) {
            _phaserBuffer[C.JSInt_methods.$mod(_phaserPos, 1024)] = _sample;
            t7 = _phaserBuffer[C.JSInt_methods.$mod(_phaserPos - _phaserInt + 1024, 1024)];
            if (typeof _sample !== "number")
              return _sample.$add();
            if (typeof t7 !== "number")
              return H.iae(t7);
            _sample += t7;
            ++_phaserPos;
          }
          if (typeof _sample !== "number")
            return H.iae(_sample);
          _superSample += _sample;
        }
        if (typeof _masterVolume !== "number")
          return H.iae(_masterVolume);
        _superSample *= 0.125 * _envelopeVolume * _masterVolume;
        if (_superSample >= 1)
          _superSample = 1;
        else if (_superSample <= -1)
          _superSample = -1;
        t1.$indexSet(buffer, i, _superSample);
      }
      return false;
    }
  },
  AudioSound: {
    "^": "Object;_simple_audio$_source,_clip,_loop,_sourceNode,_pausedTime,_startTime,_scheduledTime,_pitch,_isFinished,_isPlaying,_endedTimer",
    _setupSourceNodeForPlayback$0: function() {
      var t1, t2, t3;
      t1 = this._simple_audio$_source;
      this._sourceNode = t1._manager._context.createBufferSource();
      t2 = this._clip;
      if (t2 != null && t2.get$_buffer() != null) {
        this._sourceNode.buffer = t2.get$_buffer();
        t3 = this._sourceNode;
        t3.loopStart = 0;
        t3.loopEnd = J.get$duration$x(t2.get$_buffer());
      }
      t2 = this._sourceNode;
      t2.loop = this._loop;
      t2.connect(t1._gainNode, 0, 0);
    },
    _stop$1: function(when) {
      var t1, t2;
      t1 = this._endedTimer;
      if (t1 != null) {
        t1.cancel$0(0);
        this._endedTimer = null;
      }
      t1 = this._sourceNode;
      if (t1 != null)
        t2 = this._isPlaying;
      else
        t2 = false;
      if (t2) {
        t1.toString;
        if (!!t1.stop)
          t1.stop(when);
        else
          t1.noteOff(when);
      }
      this._isPlaying = false;
      this._sourceNode = null;
    },
    _stop$0: function() {
      return this._stop$1(0);
    },
    set$pause: function(_, b) {
      if (b) {
        if (this._pausedTime != null)
          return;
        this._pause$0();
      } else {
        if (this._pausedTime == null)
          return;
        this._resume$0();
      }
    },
    _computePausedTime$0: function() {
      var now, t1, delta;
      now = this._simple_audio$_source._manager._context.currentTime;
      t1 = this._startTime;
      if (typeof now !== "number")
        return now.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      delta = now - t1;
      t1 = this._scheduledTime;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (now < t1)
        return now - t1;
      if (this._loop) {
        t1 = this._sourceNode.buffer.duration;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return C.JSDouble_methods.$mod(delta, t1);
      }
      return delta;
    },
    _pause$1: function(when) {
      if (this._startTime == null)
        return;
      if (this._sourceNode != null) {
        this._pausedTime = this._computePausedTime$0();
        this._stop$1(when);
      }
    },
    _pause$0: function() {
      return this._pause$1(0);
    },
    _resume$0: function() {
      var t1, t2, t3, t4, t5;
      if (this._pausedTime == null)
        return;
      this._setupSourceNodeForPlayback$0();
      t1 = this._pausedTime;
      if (typeof t1 !== "number")
        return t1.$lt();
      t2 = this._simple_audio$_source;
      if (t1 < 0) {
        t1 = -t1;
        this._pausedTime = t1;
        t2 = t2._manager;
        t3 = t2._context.currentTime;
        if (typeof t3 !== "number")
          return t3.$add();
        this._scheduledTime = t3 + t1;
        this._isPlaying = true;
        if (!this._loop) {
          t1 = J.get$duration$x(this._clip.get$_buffer());
          t3 = this._pausedTime;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          this._scheduleEndTimer$1(t1 + t3);
        }
        t1 = this._sourceNode;
        J.start$3$x(t1, this._scheduledTime, 0, t1.buffer.duration);
        this._startTime = t2._context.currentTime;
      } else {
        t2 = t2._manager;
        this._scheduledTime = t2._context.currentTime;
        this._isPlaying = true;
        if (!this._loop) {
          t3 = this._sourceNode.buffer.duration;
          if (typeof t3 !== "number")
            return t3.$sub();
          this._scheduleEndTimer$1(t3 - t1);
        }
        t1 = this._sourceNode;
        t3 = this._scheduledTime;
        t4 = this._pausedTime;
        t5 = t1.buffer.duration;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        J.start$3$x(t1, t3, t4, t5 - t4);
        t2 = t2._context.currentTime;
        t4 = this._pausedTime;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        this._startTime = t2 - t4;
      }
      this._pausedTime = null;
    },
    _scheduleEndTimer$1: function(expectedEndTime) {
      this._endedTimer = P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, C.JSNumber_methods.toInt$0(Math.ceil(expectedEndTime))), new Q.AudioSound__scheduleEndTimer_closure(this));
    },
    play$1: function(_, when) {
      var t1, t2;
      this._stop$0();
      this._setupSourceNodeForPlayback$0();
      t1 = this._simple_audio$_source._manager;
      t2 = t1._context.currentTime;
      if (typeof t2 !== "number")
        return t2.$add();
      this._scheduledTime = t2 + when;
      this._isPlaying = true;
      if (!this._loop) {
        t2 = J.get$duration$x(this._clip.get$_buffer());
        if (typeof t2 !== "number")
          return H.iae(t2);
        this._scheduleEndTimer$1(when + t2);
      }
      t2 = this._sourceNode;
      t2.playbackRate.value = this._pitch;
      J.start$1$x(t2, this._scheduledTime);
      this._startTime = t1._context.currentTime;
    },
    play$0: function($receiver) {
      return this.play$1($receiver, 0);
    },
    stop$0: function(_) {
      this._stop$0();
      this._startTime = null;
      this._scheduledTime = null;
      this._pausedTime = null;
    },
    set$volume: function(_, v) {
      var t1 = this._sourceNode;
      if (t1 != null)
        J.get$gain$x(t1).set$value(0, v);
    }
  },
  AudioSound__scheduleEndTimer_closure: {
    "^": "Closure:55;this_0",
    call$0: function() {
      var t1 = this.this_0;
      t1._isFinished = true;
      t1._isPlaying = false;
      t1._endedTimer = null;
    }
  },
  AudioSource: {
    "^": "Object;_appliedEffect,_manager,_simple_audio$_name,_output,_gainNode,_panNode,_sounds,_mutedVolume,_isPaused,_x,_y,_z,minDistance,_positional",
    get$name: function(_) {
      return this._simple_audio$_name;
    },
    _setupNodes$0: function() {
      var effectInput, t1, i;
      this._panNode.disconnect(0);
      this._gainNode.disconnect(0);
      effectInput = this._gainNode;
      if (this._positional) {
        effectInput.connect(this._panNode, 0, 0);
        effectInput = this._panNode;
      }
      for (t1 = this._appliedEffect, i = 0; false; ++i) {
        if (i >= 0)
          return H.ioore(t1, i);
        effectInput = t1[i]._apply$1(effectInput);
      }
      effectInput.connect(this._output, 0, 0);
    },
    set$positional: function(b) {
      if (b !== this._positional) {
        this._positional = b;
        this._setupNodes$0();
      }
    },
    set$volume: function(_, v) {
      this._gainNode.gain.value = v;
    },
    playOnceIn$2: function(delay, clip) {
      var sound = new Q.AudioSound(this, clip, false, null, null, null, null, 1, false, false, null);
      sound._setupSourceNodeForPlayback$0();
      this._sounds.push(sound);
      sound.play$1(0, delay);
      sound.set$pause(0, this._isPaused);
      return sound;
    },
    playLoopedIn$2: function(delay, clip) {
      var sound = new Q.AudioSound(this, clip, true, null, null, null, null, 1, false, false, null);
      sound._setupSourceNodeForPlayback$0();
      this._sounds.push(sound);
      sound.play$1(0, delay);
      sound.set$pause(0, this._isPaused);
      return sound;
    },
    _scanSounds$0: function() {
      var i, t1, t2, sound, last;
      for (i = this._sounds.length - 1; i >= 0; --i) {
        t1 = this._sounds;
        t2 = t1.length;
        if (i >= t2)
          return H.ioore(t1, i);
        sound = t1[i];
        if (sound._sourceNode != null && sound._isFinished) {
          last = t2 - 1;
          if (last < 0)
            return H.ioore(t1, last);
          t1[i] = t1[last];
          if (0 >= t2)
            return H.ioore(t1, 0);
          t1.pop();
          sound._stop$0();
          sound._startTime = null;
          sound._scheduledTime = null;
          sound._pausedTime = null;
        }
      }
    },
    set$pause: function(_, b) {
      if (b) {
        if (this._isPaused)
          return;
        this._pause$0();
        this._isPaused = true;
      } else {
        if (!this._isPaused)
          return;
        this._resume$0();
        this._isPaused = false;
      }
    },
    _pause$0: function() {
      this._scanSounds$0();
      J.forEach$1$ax(this._sounds, new Q.AudioSource__pause_closure());
    },
    _resume$0: function() {
      this._scanSounds$0();
      J.forEach$1$ax(this._sounds, new Q.AudioSource__resume_closure());
    },
    get$x: function(_) {
      return this._x;
    },
    get$y: function(_) {
      return this._y;
    },
    get$z: function(_) {
      return this._z;
    },
    setPosition$3: function(_, x, y, z) {
      var t1, t2, t3;
      this._x = x;
      this._y = y;
      this._z = z;
      t1 = this.minDistance;
      if (t1 > 0)
        this._adjustPositionToMinimum$1(t1);
      else {
        t1 = $.AudioManager_minDistance;
        if (t1 > 0)
          this._adjustPositionToMinimum$1(t1);
      }
      t1 = this._panNode;
      t2 = this._x;
      t3 = $.AudioManager_positionalScale;
      t1.setPosition(t2 * t3, this._y * t3, this._z * t3);
    },
    _adjustPositionToMinimum$1: function(_distance) {
      var p1, p2, p3, t1, q1, q2, q3, currentDistance, t2, t3;
      p1 = this._x;
      p2 = this._y;
      p3 = this._z;
      t1 = this._manager;
      q1 = t1._x;
      q2 = t1._y;
      q3 = t1._z;
      currentDistance = this._getDistance$6(p1, p2, p3, q1, q2, q3);
      if (currentDistance >= _distance)
        return;
      t1 = q1 + (p1 - q1) / currentDistance * _distance;
      this._x = t1;
      t2 = q2 + (p2 - q2) / currentDistance * _distance;
      this._y = t2;
      t3 = q3 + (p3 - q3) / currentDistance * _distance;
      this._z = t3;
      this._getDistance$6(t1, t2, t3, q1, q2, q3);
    },
    _getDistance$6: function(p1, p2, p3, q1, q2, q3) {
      var t1, t2, t3;
      t1 = p1 - q1;
      H.checkNum(t1);
      H.checkNum(2);
      t1 = Math.pow(t1, 2);
      t2 = p2 - q2;
      H.checkNum(t2);
      H.checkNum(2);
      t2 = Math.pow(t2, 2);
      t3 = p3 - q3;
      H.checkNum(t3);
      H.checkNum(2);
      return Math.sqrt(H.checkNum(0 + t1 + t2 + Math.pow(t3, 2)));
    },
    setVelocity$3: function(_, x, y, z) {
      var t1, t2;
      t1 = this._panNode;
      t2 = $.AudioManager_positionalScale;
      t1.setVelocity(x * t2, y * t2, z * t2);
    },
    AudioSource$_internal$3: function(_manager, _name, _output) {
      var t1 = this._manager;
      this._gainNode = J.createGain$0$x(t1._context);
      t1 = t1._context.createPanner();
      this._panNode = t1;
      t1.coneOuterGain = 1;
      this._setupNodes$0();
      this._sounds = H.setRuntimeTypeInfo([], [Q.AudioSound]);
    },
    static: {AudioSource$_internal: function(_manager, _name, _output) {
        var t1 = new Q.AudioSource(H.setRuntimeTypeInfo([], [Q.AudioEffect]), _manager, _name, _output, null, null, null, null, false, 0, 0, 0, 0, true);
        t1.AudioSource$_internal$3(_manager, _name, _output);
        return t1;
      }}
  },
  AudioSource__pause_closure: {
    "^": "Closure:39;",
    call$1: function(sound) {
      J.set$pause$x(sound, true);
    }
  },
  AudioSource__resume_closure: {
    "^": "Closure:39;",
    call$1: function(sound) {
      J.set$pause$x(sound, false);
    }
  }
}],
["three", "package:three/three.dart", , S, {
  "^": "",
  makeLookAt: function(m, eye, center, up) {
    var z, x, t1, t2, t3;
    z = eye.$sub(0, center).normalize$0(0);
    if (z.get$length(z) === 0)
      z.storage[2] = 1;
    x = up.cross$1(z).normalize$0(0);
    if (x.get$length(x) === 0) {
      t1 = z.storage;
      t1[0] = t1[0] + 0.0001;
      x = up.cross$1(z).normalize$0(0);
    }
    t1 = x.storage;
    t2 = z.cross$1(x).normalize$0(0).storage;
    t3 = z.storage;
    m.setValues$16(t1[0], t1[1], t1[2], 0, t2[0], t2[1], t2[2], 0, t3[0], t3[1], t3[2], 0, 0, 0, 0, 1);
    return m;
  },
  setRotationFromQuaternion: function(m, q) {
    var t1, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz;
    t1 = q.storage;
    x = t1[0];
    y = t1[1];
    z = t1[2];
    w = t1[3];
    x2 = x + x;
    y2 = y + y;
    z2 = z + z;
    xx = x * x2;
    xy = x * y2;
    xz = x * z2;
    yy = y * y2;
    yz = y * z2;
    zz = z * z2;
    wx = w * x2;
    wy = w * y2;
    wz = w * z2;
    t1 = m.storage;
    t1[0] = 1 - (yy + zz);
    t1[4] = xy - wz;
    t1[8] = xz + wy;
    t1[1] = xy + wz;
    t1[5] = 1 - (xx + zz);
    t1[9] = yz - wx;
    t1[2] = xz - wy;
    t1[6] = yz + wx;
    t1[10] = 1 - (xx + yy);
    return m;
  },
  calcInverse: function(m) {
    var a11, t1, t2, t3, t4, t5, t6, t7, t8, a12, t9, t10, t11, t12, t13, t14, t15, t16, a13, t17, t18, t19, t20, t21, t22, t23, t24, det, idet, t25;
    a11 = m.$index(0, 10) * m.$index(0, 5) - m.$index(0, 6) * m.$index(0, 9);
    t1 = m.$index(0, 10);
    t2 = m.$index(0, 1);
    t3 = m.$index(0, 2);
    t4 = m.$index(0, 9);
    t5 = m.$index(0, 6);
    t6 = m.$index(0, 1);
    t7 = m.$index(0, 2);
    t8 = m.$index(0, 5);
    a12 = -m.$index(0, 10) * m.$index(0, 4) + m.$index(0, 6) * m.$index(0, 8);
    t9 = m.$index(0, 10);
    t10 = m.$index(0, 0);
    t11 = m.$index(0, 2);
    t12 = m.$index(0, 8);
    t13 = m.$index(0, 6);
    t14 = m.$index(0, 0);
    t15 = m.$index(0, 2);
    t16 = m.$index(0, 4);
    a13 = m.$index(0, 9) * m.$index(0, 4) - m.$index(0, 5) * m.$index(0, 8);
    t17 = m.$index(0, 9);
    t18 = m.$index(0, 0);
    t19 = m.$index(0, 1);
    t20 = m.$index(0, 8);
    t21 = m.$index(0, 5);
    t22 = m.$index(0, 0);
    t23 = m.$index(0, 1);
    t24 = m.$index(0, 4);
    det = m.$index(0, 0) * a11 + m.$index(0, 1) * a12 + m.$index(0, 2) * a13;
    if (det === 0)
      ;
    idet = 1 / det;
    t25 = new T.Matrix3(new Float32Array(H._checkLength(9)));
    t25.setValues$9(idet * a11, idet * (-t1 * t2 + t3 * t4), idet * (t5 * t6 - t7 * t8), idet * a12, idet * (t9 * t10 - t11 * t12), idet * (-t13 * t14 + t15 * t16), idet * a13, idet * (-t17 * t18 + t19 * t20), idet * (t21 * t22 - t23 * t24));
    return t25;
  },
  extractRotation: function(te, m) {
    var vector, t1, scaleX, scaleY, scaleZ;
    vector = new T.Vector3(new Float32Array(H._checkLength(3)));
    t1 = vector.setValues$3(m.$index(0, 0), m.$index(0, 1), m.$index(0, 2));
    scaleX = 1 / t1.get$length(t1);
    t1 = vector.setValues$3(m.$index(0, 4), m.$index(0, 5), m.$index(0, 6));
    scaleY = 1 / t1.get$length(t1);
    t1 = vector.setValues$3(m.$index(0, 8), m.$index(0, 9), m.$index(0, 10));
    scaleZ = 1 / t1.get$length(t1);
    t1 = te.storage;
    t1[0] = m.$index(0, 0) * scaleX;
    t1[1] = m.$index(0, 1) * scaleX;
    t1[2] = m.$index(0, 2) * scaleX;
    t1[4] = m.$index(0, 4) * scaleY;
    t1[5] = m.$index(0, 5) * scaleY;
    t1[6] = m.$index(0, 6) * scaleY;
    t1[8] = m.$index(0, 8) * scaleZ;
    t1[9] = m.$index(0, 9) * scaleZ;
    t1[10] = m.$index(0, 10) * scaleZ;
    return te;
  },
  decompose: function(m, translation, rotation, scale) {
    var te, t1, t2, t3, t4, x, y, z, matrix, quaternion, m11, m12, m13, m21, m22, m23, m31, m32, m33, trace, s;
    te = m.get$storage(m);
    t1 = te.length;
    if (0 >= t1)
      return H.ioore(te, 0);
    t2 = te[0];
    if (1 >= t1)
      return H.ioore(te, 1);
    t3 = te[1];
    if (2 >= t1)
      return H.ioore(te, 2);
    t4 = te[2];
    x = new T.Vector3(new Float32Array(H._checkLength(3)));
    x.setValues$3(t2, t3, t4);
    if (4 >= t1)
      return H.ioore(te, 4);
    t4 = te[4];
    if (5 >= t1)
      return H.ioore(te, 5);
    t3 = te[5];
    if (6 >= t1)
      return H.ioore(te, 6);
    t2 = te[6];
    y = new T.Vector3(new Float32Array(H._checkLength(3)));
    y.setValues$3(t4, t3, t2);
    if (8 >= t1)
      return H.ioore(te, 8);
    t2 = te[8];
    if (9 >= t1)
      return H.ioore(te, 9);
    t3 = te[9];
    if (10 >= t1)
      return H.ioore(te, 10);
    t4 = te[10];
    z = new T.Vector3(new Float32Array(H._checkLength(3)));
    z.setValues$3(t2, t3, t4);
    t2 = scale.storage;
    t2[0] = x.get$length(x);
    t2[1] = y.get$length(y);
    t2[2] = z.get$length(z);
    if (12 >= t1)
      return H.ioore(te, 12);
    t3 = translation.storage;
    t3[0] = te[12];
    if (13 >= t1)
      return H.ioore(te, 13);
    t3[1] = te[13];
    if (14 >= t1)
      return H.ioore(te, 14);
    t3[2] = te[14];
    matrix = m.clone$0(0);
    t3 = matrix.get$storage(matrix);
    if (0 >= t3.length)
      return H.ioore(t3, 0);
    t3[0] = t3[0] / t2[0];
    t3 = matrix.get$storage(matrix);
    if (1 >= t3.length)
      return H.ioore(t3, 1);
    t3[1] = t3[1] / t2[0];
    t3 = matrix.get$storage(matrix);
    if (2 >= t3.length)
      return H.ioore(t3, 2);
    t3[2] = t3[2] / t2[0];
    t3 = matrix.get$storage(matrix);
    if (4 >= t3.length)
      return H.ioore(t3, 4);
    t3[4] = t3[4] / t2[1];
    t3 = matrix.get$storage(matrix);
    if (5 >= t3.length)
      return H.ioore(t3, 5);
    t3[5] = t3[5] / t2[1];
    t3 = matrix.get$storage(matrix);
    if (6 >= t3.length)
      return H.ioore(t3, 6);
    t3[6] = t3[6] / t2[1];
    t3 = matrix.get$storage(matrix);
    if (8 >= t3.length)
      return H.ioore(t3, 8);
    t3[8] = t3[8] / t2[2];
    t3 = matrix.get$storage(matrix);
    if (9 >= t3.length)
      return H.ioore(t3, 9);
    t3[9] = t3[9] / t2[2];
    t3 = matrix.get$storage(matrix);
    if (10 >= t3.length)
      return H.ioore(t3, 10);
    t3[10] = t3[10] / t2[2];
    quaternion = T.Quaternion$identity();
    te = matrix.get$storage(matrix);
    t2 = te.length;
    if (0 >= t2)
      return H.ioore(te, 0);
    m11 = te[0];
    if (4 >= t2)
      return H.ioore(te, 4);
    m12 = te[4];
    if (8 >= t2)
      return H.ioore(te, 8);
    m13 = te[8];
    m21 = te[1];
    m22 = te[5];
    if (9 >= t2)
      return H.ioore(te, 9);
    m23 = te[9];
    m31 = te[2];
    m32 = te[6];
    if (10 >= t2)
      return H.ioore(te, 10);
    m33 = te[10];
    trace = m11 + m22 + m33;
    if (trace > 0) {
      s = 0.5 / Math.sqrt(H.checkNum(trace + 1));
      t1 = quaternion.storage;
      t1[3] = 0.25 / s;
      t1[0] = (m32 - m23) * s;
      t1[1] = (m13 - m31) * s;
      t1[2] = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      s = 2 * Math.sqrt(H.checkNum(1 + m11 - m22 - m33));
      t1 = quaternion.storage;
      t1[3] = (m32 - m23) / s;
      t1[0] = 0.25 * s;
      t1[1] = (m12 + m21) / s;
      t1[2] = (m13 + m31) / s;
    } else {
      t1 = quaternion.storage;
      t2 = m23 + m32;
      if (m22 > m33) {
        s = 2 * Math.sqrt(H.checkNum(1 + m22 - m11 - m33));
        t1[3] = (m13 - m31) / s;
        t1[0] = (m12 + m21) / s;
        t1[1] = 0.25 * s;
        t1[2] = t2 / s;
      } else {
        s = 2 * Math.sqrt(H.checkNum(1 + m33 - m11 - m22));
        t1[3] = (m21 - m12) / s;
        t1[0] = (m13 + m31) / s;
        t1[1] = t2 / s;
        t1[2] = 0.25 * s;
      }
    }
    return [translation, rotation, scale];
  },
  calcEulerFromRotationMatrix: function(m, order) {
    var clamp, t1, m11, m12, m13, m21, m22, m23, m31, m32, m33, y, x, z;
    clamp = new S.calcEulerFromRotationMatrix_closure();
    t1 = m.storage;
    m11 = t1[0];
    m12 = t1[4];
    m13 = t1[8];
    m21 = t1[1];
    m22 = t1[5];
    m23 = t1[9];
    m31 = t1[2];
    m32 = t1[6];
    m33 = t1[10];
    if (order === "XYZ") {
      y = Math.asin(H.checkNum(clamp.call$1(m13)));
      if (Math.abs(m13) < 0.99999) {
        x = Math.atan2(H.checkNum(-m23), H.checkNum(m33));
        z = Math.atan2(H.checkNum(-m12), H.checkNum(m11));
      } else {
        x = Math.atan2(H.checkNum(m21), H.checkNum(m22));
        z = 0;
      }
    } else if (order === "YXZ") {
      x = Math.asin(H.checkNum(J.$negate$n(clamp.call$1(m23))));
      if (Math.abs(m23) < 0.99999) {
        y = Math.atan2(H.checkNum(m13), H.checkNum(m33));
        z = Math.atan2(H.checkNum(m21), H.checkNum(m22));
      } else {
        y = Math.atan2(H.checkNum(-m31), H.checkNum(m11));
        z = 0;
      }
    } else if (order === "ZXY") {
      x = Math.asin(H.checkNum(clamp.call$1(m32)));
      if (Math.abs(m32) < 0.99999) {
        y = Math.atan2(H.checkNum(-m31), H.checkNum(m33));
        z = Math.atan2(H.checkNum(-m12), H.checkNum(m22));
      } else {
        z = Math.atan2(H.checkNum(m13), H.checkNum(m11));
        y = 0;
      }
    } else if (order === "ZYX") {
      y = Math.asin(H.checkNum(J.$negate$n(clamp.call$1(m31))));
      if (Math.abs(m31) < 0.99999) {
        x = Math.atan2(H.checkNum(m32), H.checkNum(m33));
        z = Math.atan2(H.checkNum(m21), H.checkNum(m11));
      } else {
        z = Math.atan2(H.checkNum(-m12), H.checkNum(m22));
        x = 0;
      }
    } else if (order === "YZX") {
      z = Math.asin(H.checkNum(clamp.call$1(m21)));
      if (Math.abs(m21) < 0.99999) {
        x = Math.atan2(H.checkNum(-m23), H.checkNum(m22));
        y = Math.atan2(H.checkNum(-m31), H.checkNum(m11));
      } else {
        y = Math.atan2(H.checkNum(m31), H.checkNum(m33));
        x = 0;
      }
    } else if (order === "XZY") {
      z = Math.asin(H.checkNum(J.$negate$n(clamp.call$1(m12))));
      if (Math.abs(m12) < 0.99999) {
        x = Math.atan2(H.checkNum(m32), H.checkNum(m22));
        y = Math.atan2(H.checkNum(m13), H.checkNum(m11));
      } else {
        x = Math.atan2(H.checkNum(-m13), H.checkNum(m33));
        y = 0;
      }
    } else {
      x = null;
      y = null;
      z = null;
    }
    t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
    t1.setValues$3(x, y, z);
    return t1;
  },
  ShaderChunk: function() {
    var t1 = $.__ShaderChunk;
    if (t1 == null) {
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["fog_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_FOG", "uniform vec3 fogColor;", "#ifdef FOG_EXP2", "uniform float fogDensity;", "#else", "uniform float fogNear;", "uniform float fogFar;", "#endif", "#endif"], "\n"), "fog_fragment", C.JSArray_methods.join$1(["#ifdef USE_FOG", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "#ifdef FOG_EXP2", "const float LOG2 = 1.442695;", "float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );", "fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );", "#else", "float fogFactor = smoothstep( fogNear, fogFar, depth );", "#endif", "gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );", "#endif"], "\n"), "envmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "uniform bool useRefract;", "uniform float refractionRatio;", "#else", "varying vec3 vReflect;", "#endif", "#endif"], "\n"), "envmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_ENVMAP", "vec3 reflectVec;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );", "if ( useRefract ) {", "reflectVec = refract( cameraToVertex, normal, refractionRatio );", "} else { ", "reflectVec = reflect( cameraToVertex, normal );", "}", "#else", "reflectVec = vReflect;", "#endif", "#ifdef DOUBLE_SIDED", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "#ifdef GAMMA_INPUT", "cubeColor.xyz *= cubeColor.xyz;", "#endif", "if ( combine == 1 ) {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );", "} else if ( combine == 2 ) {", "gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;", "} else {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );", "}", "#endif"], "\n"), "envmap_pars_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "varying vec3 vReflect;", "uniform float refractionRatio;", "uniform bool useRefract;", "#endif"], "\n"), "worldpos_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )", "#ifdef USE_SKINNING", "vec4 worldPosition = modelMatrix * skinned;", "#endif", "#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )", "vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );", "#endif", "#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "#endif", "#endif"], "\n"), "envmap_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "worldNormal = normalize( worldNormal );", "vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );", "if ( useRefract ) {", "vReflect = refract( cameraToVertex, worldNormal, refractionRatio );", "} else {", "vReflect = reflect( cameraToVertex, worldNormal );", "}", "#endif"], "\n"), "map_particle_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_particle_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );", "#endif"], "\n"), "map_pars_vertex", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "uniform vec4 offsetRepeat;", "#endif"], "\n"), "map_pars_fragment", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "#endif", "#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_vertex", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "vUv = uv * offsetRepeat.zw + offsetRepeat.xy;", "#endif"], "\n"), "map_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "vec4 texelColor = texture2D( map, vUv );", "#ifdef GAMMA_INPUT", "texelColor.xyz *= texelColor.xyz;", "#endif", "gl_FragColor = gl_FragColor * texelColor;", "#endif"], "\n"), "lightmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "uniform sampler2D lightMap;", "#endif"], "\n"), "lightmap_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "#endif"], "\n"), "lightmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );", "#endif"], "\n"), "lightmap_vertex", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "vUv2 = uv2;", "#endif"], "\n"), "bumpmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_BUMPMAP", "uniform sampler2D bumpMap;", "uniform float bumpScale;", "vec2 dHdxy_fwd() {", "vec2 dSTdx = dFdx( vUv );", "vec2 dSTdy = dFdy( vUv );", "float Hll = bumpScale * texture2D( bumpMap, vUv ).x;", "float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;", "float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;", "return vec2( dBx, dBy );", "}", "vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {", "vec3 vSigmaX = dFdx( surf_pos );", "vec3 vSigmaY = dFdy( surf_pos );", "vec3 vN = surf_norm;", "vec3 R1 = cross( vSigmaY, vN );", "vec3 R2 = cross( vN, vSigmaX );", "float fDet = dot( vSigmaX, R1 );", "vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );", "return normalize( abs( fDet ) * surf_norm - vGrad );", "}", "#endif"], "\n"), "normalmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_NORMALMAP", "uniform sampler2D normalMap;", "uniform vec2 normalScale;", "vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {", "vec3 q0 = dFdx( eye_pos.xyz );", "vec3 q1 = dFdy( eye_pos.xyz );", "vec2 st0 = dFdx( vUv.st );", "vec2 st1 = dFdy( vUv.st );", "vec3 S = normalize(  q0 * st1.t - q1 * st0.t );", "vec3 T = normalize( -q0 * st1.s + q1 * st0.s );", "vec3 N = normalize( surf_norm );", "vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;", "mapN.xy = normalScale * mapN.xy;", "mat3 tsn = mat3( S, T, N );", "return normalize( tsn * mapN );", "}", "#endif"], "\n"), "specularmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_SPECULARMAP", "uniform sampler2D specularMap;", "#endif"], "\n"), "specularmap_fragment", C.JSArray_methods.join$1(["float specularStrength;", "#ifdef USE_SPECULARMAP", "vec4 texelSpecular = texture2D( specularMap, vUv );", "specularStrength = texelSpecular.r;", "#else", "specularStrength = 1.0;", "#endif"], "\n"), "lights_lambert_pars_vertex", C.JSArray_methods.join$1(["uniform vec3 ambient;", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS > 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif"], "\n"), "lights_lambert_vertex", C.JSArray_methods.join$1(["vLightFront = vec3( 0.0 );", "#ifdef DOUBLE_SIDED", "vLightBack = vec3( 0.0 );", "#endif", "transformedNormal = normalize( transformedNormal );", "#if MAX_DIR_LIGHTS > 0", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, dirVector );", "vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += directionalLightColor[ i ] * directionalLightWeighting;", "#ifdef DOUBLE_SIDED", "vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;", "#endif", "}", "#endif", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;", "#ifdef DOUBLE_SIDED", "vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );", "if ( spotEffect > spotLightAngleCos[ i ] ) {", "spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;", "#ifdef DOUBLE_SIDED", "vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_HEMI_LIGHTS > 0", "for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, lVector );", "float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;", "float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;", "vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "#ifdef DOUBLE_SIDED", "vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );", "#endif", "}", "#endif", "vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;", "#ifdef DOUBLE_SIDED", "vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;", "#endif"], "\n"), "lights_phong_pars_vertex", C.JSArray_methods.join$1(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif"], "\n"), "lights_phong_vertex", C.JSArray_methods.join$1(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "vPointLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "vSpotLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "vWorldPosition = worldPosition.xyz;", "#endif"], "\n"), "lights_phong_pars_fragment", C.JSArray_methods.join$1(["uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS > 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#else", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "#else", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif", "varying vec3 vViewPosition;", "varying vec3 vNormal;"], "\n"), "lights_phong_fragment", C.JSArray_methods.join$1(["vec3 normal = normalize( vNormal );", "vec3 viewPosition = normalize( vViewPosition );", "#ifdef DOUBLE_SIDED", "normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "#endif", "#ifdef USE_NORMALMAP", "normal = perturbNormal2Arb( -viewPosition, normal );", "#elif defined( USE_BUMPMAP )", "normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );", "#endif", "#if MAX_POINT_LIGHTS > 0", "vec3 pointDiffuse  = vec3( 0.0 );", "vec3 pointSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vPointLight[ i ].xyz );", "float lDistance = vPointLight[ i ].w;", "#endif", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float pointDiffuseWeightFull = max( dotProduct, 0.0 );", "float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );", "#else", "float pointDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;", "vec3 pointHalfVector = normalize( lVector + viewPosition );", "float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );", "float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );", "pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;", "#else", "pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "vec3 spotDiffuse  = vec3( 0.0 );", "vec3 spotSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vSpotLight[ i ].xyz );", "float lDistance = vSpotLight[ i ].w;", "#endif", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );", "if ( spotEffect > spotLightAngleCos[ i ] ) {", "spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float spotDiffuseWeightFull = max( dotProduct, 0.0 );", "float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );", "#else", "float spotDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;", "vec3 spotHalfVector = normalize( lVector + viewPosition );", "float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );", "float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );", "spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;", "#else", "spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_DIR_LIGHTS > 0", "vec3 dirDiffuse  = vec3( 0.0 );", "vec3 dirSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, dirVector );", "#ifdef WRAP_AROUND", "float dirDiffuseWeightFull = max( dotProduct, 0.0 );", "float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );", "#else", "float dirDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;", "vec3 dirHalfVector = normalize( dirVector + viewPosition );", "float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );", "float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );", "dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;", "#else", "dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;", "#endif", "}", "#endif", "#if MAX_HEMI_LIGHTS > 0", "vec3 hemiDiffuse  = vec3( 0.0 );", "vec3 hemiSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, lVector );", "float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;", "vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "hemiDiffuse += diffuse * hemiColor;", "vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );", "float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;", "float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );", "vec3 lVectorGround = -lVector;", "vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );", "float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;", "float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float dotProductGround = dot( normal, lVectorGround );", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );", "vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );", "hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );", "#else", "hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;", "#endif", "}", "#endif", "vec3 totalDiffuse = vec3( 0.0 );", "vec3 totalSpecular = vec3( 0.0 );", "#if MAX_DIR_LIGHTS > 0", "totalDiffuse += dirDiffuse;", "totalSpecular += dirSpecular;", "#endif", "#if MAX_HEMI_LIGHTS > 0", "totalDiffuse += hemiDiffuse;", "totalSpecular += hemiSpecular;", "#endif", "#if MAX_POINT_LIGHTS > 0", "totalDiffuse += pointDiffuse;", "totalSpecular += pointSpecular;", "#endif", "#if MAX_SPOT_LIGHTS > 0", "totalDiffuse += spotDiffuse;", "totalSpecular += spotSpecular;", "#endif", "#ifdef METAL", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );", "#else", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;", "#endif"], "\n"), "color_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_fragment", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "gl_FragColor = gl_FragColor * vec4( vColor, opacity );", "#endif"], "\n"), "color_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_vertex", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "#ifdef GAMMA_INPUT", "vColor = color * color;", "#else", "vColor = color;", "#endif", "#endif"], "\n"), "skinning_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "#ifdef BONE_TEXTURE", "uniform sampler2D boneTexture;", "mat4 getBoneMatrix( const in float i ) {", "float j = i * 4.0;", "float x = mod( j, N_BONE_PIXEL_X );", "float y = floor( j / N_BONE_PIXEL_X );", "const float dx = 1.0 / N_BONE_PIXEL_X;", "const float dy = 1.0 / N_BONE_PIXEL_Y;", "y = dy * ( y + 0.5 );", "vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );", "vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );", "vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );", "vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );", "mat4 bone = mat4( v1, v2, v3, v4 );", "return bone;", "}", "#else", "uniform mat4 boneGlobalMatrices[ MAX_BONES ];", "mat4 getBoneMatrix( const in float i ) {", "mat4 bone = boneGlobalMatrices[ int(i) ];", "return bone;", "}", "#endif", "#endif"], "\n"), "skinbase_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "mat4 boneMatX = getBoneMatrix( skinIndex.x );", "mat4 boneMatY = getBoneMatrix( skinIndex.y );", "#endif"], "\n"), "skinning_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "#ifdef USE_MORPHTARGETS", "vec4 skinVertex = vec4( morphed, 1.0 );", "#else", "vec4 skinVertex = vec4( position, 1.0 );", "#endif", "vec4 skinned  = boneMatX * skinVertex * skinWeight.x;", "skinned    += boneMatY * skinVertex * skinWeight.y;", "#endif"], "\n"), "morphtarget_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHTARGETS", "#ifndef USE_MORPHNORMALS", "uniform float morphTargetInfluences[ 8 ];", "#else", "uniform float morphTargetInfluences[ 4 ];", "#endif", "#endif"], "\n"), "morphtarget_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHTARGETS", "vec3 morphed = vec3( 0.0 );", "morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];", "morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];", "morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];", "morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];", "#ifndef USE_MORPHNORMALS", "morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];", "morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];", "morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];", "morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];", "#endif", "morphed += position;", "#endif"], "\n"), "default_vertex", C.JSArray_methods.join$1(["vec4 mvPosition;", "#ifdef USE_SKINNING", "mvPosition = modelViewMatrix * skinned;", "#endif", "#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )", "mvPosition = modelViewMatrix * vec4( morphed, 1.0 );", "#endif", "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "gl_Position = projectionMatrix * mvPosition;"], "\n"), "morphnormal_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHNORMALS", "vec3 morphedNormal = vec3( 0.0 );", "morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];", "morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];", "morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];", "morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];", "morphedNormal += normal;", "#endif"], "\n"), "skinnormal_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "mat4 skinMatrix = skinWeight.x * boneMatX;", "skinMatrix   += skinWeight.y * boneMatY;", "#ifdef USE_MORPHNORMALS", "vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );", "#else", "vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );", "#endif", "#endif"], "\n"), "defaultnormal_vertex", C.JSArray_methods.join$1(["vec3 objectNormal;", "#ifdef USE_SKINNING", "objectNormal = skinnedNormal.xyz;", "#endif", "#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )", "objectNormal = morphedNormal;", "#endif", "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )", "objectNormal = normal;", "#endif", "#ifdef FLIP_SIDED", "objectNormal = -objectNormal;", "#endif", "vec3 transformedNormal = normalMatrix * objectNormal;"], "\n"), "shadowmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "uniform sampler2D shadowMap[ MAX_SHADOWS ];", "uniform vec2 shadowMapSize[ MAX_SHADOWS ];", "uniform float shadowDarkness[ MAX_SHADOWS ];", "uniform float shadowBias[ MAX_SHADOWS ];", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", "float depth = dot( rgba_depth, bit_shift );", "return depth;", "}", "#endif"], "\n"), "shadowmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "#ifdef SHADOWMAP_DEBUG", "vec3 frustumColors[3];", "frustumColors[0] = vec3( 1.0, 0.5, 0.0 );", "frustumColors[1] = vec3( 0.0, 1.0, 0.8 );", "frustumColors[2] = vec3( 0.0, 0.5, 1.0 );", "#endif", "#ifdef SHADOWMAP_CASCADE", "int inFrustumCount = 0;", "#endif", "float fDepth;", "vec3 shadowColor = vec3( 1.0 );", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;", "bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );", "bool inFrustum = all( inFrustumVec );", "#ifdef SHADOWMAP_CASCADE", "inFrustumCount += int( inFrustum );", "bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );", "#else", "bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );", "#endif", "bool frustumTest = all( frustumTestVec );", "if ( frustumTest ) {", "shadowCoord.z += shadowBias[ i ];", "#if defined( SHADOWMAP_TYPE_PCF )", "float shadow = 0.0;", "const float shadowDelta = 1.0 / 9.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.25 * xPixelOffset;", "float dy0 = -1.25 * yPixelOffset;", "float dx1 = 1.25 * xPixelOffset;", "float dy1 = 1.25 * yPixelOffset;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#elif defined( SHADOWMAP_TYPE_PCF_SOFT )", "float shadow = 0.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.0 * xPixelOffset;", "float dy0 = -1.0 * yPixelOffset;", "float dx1 = 1.0 * xPixelOffset;", "float dy1 = 1.0 * yPixelOffset;", "mat3 shadowKernel;", "mat3 depthKernel;", "depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;", "else shadowKernel[0][0] = 0.0;", "depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;", "else shadowKernel[0][1] = 0.0;", "depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;", "else shadowKernel[0][2] = 0.0;", "depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;", "else shadowKernel[1][0] = 0.0;", "depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;", "else shadowKernel[1][1] = 0.0;", "depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;", "else shadowKernel[1][2] = 0.0;", "depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;", "else shadowKernel[2][0] = 0.0;", "depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;", "else shadowKernel[2][1] = 0.0;", "depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;", "else shadowKernel[2][2] = 0.0;", "vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );", "shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );", "shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );", "vec4 shadowValues;", "shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );", "shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );", "shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );", "shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );", "shadow = dot( shadowValues, vec4( 1.0 ) );", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#else", "vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );", "float fDepth = unpackDepth( rgbaDepth );", "if ( fDepth < shadowCoord.z )", "shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );", "#endif", "}", "#ifdef SHADOWMAP_DEBUG", "#ifdef SHADOWMAP_CASCADE", "if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];", "#else", "if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];", "#endif", "#endif", "}", "#ifdef GAMMA_OUTPUT", "shadowColor *= shadowColor;", "#endif", "gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;", "#endif"], "\n"), "shadowmap_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "uniform mat4 shadowMatrix[ MAX_SHADOWS ];", "#endif"], "\n"), "shadowmap_vertex", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;", "}", "#endif"], "\n"), "alphatest_fragment", C.JSArray_methods.join$1(["#ifdef ALPHATEST", "if ( gl_FragColor.a < ALPHATEST ) discard;", "#endif"], "\n"), "linear_to_gamma_fragment", C.JSArray_methods.join$1(["#ifdef GAMMA_OUTPUT", "gl_FragColor.xyz = sqrt( gl_FragColor.xyz );", "#endif"], "\n")], null, null);
      $.__ShaderChunk = t1;
    }
    return t1;
  },
  UniformsUtils_merge: function(uniformsLst) {
    var merged = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    C.JSArray_methods.forEach$1(uniformsLst, new S.UniformsUtils_merge_closure(merged));
    return merged;
  },
  UniformsUtils_clone: function(uniforms) {
    var result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    uniforms.forEach$1(0, new S.UniformsUtils_clone_closure(result));
    return result;
  },
  UniformsLib: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
    t1 = $.__UniformsLib;
    if (t1 == null) {
      t1 = new S.Uniform("c", null, true, null);
      t1.set$value(0, S.Color$(15658734));
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 1);
      t3 = new S.Uniform("t", null, true, null);
      t3.set$value(0, null);
      t4 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t4.setValues$4(0, 0, 1, 1);
      t5 = new S.Uniform("v4", null, true, null);
      t5.set$value(0, t4);
      t4 = new S.Uniform("t", null, true, null);
      t4.set$value(0, null);
      t6 = new S.Uniform("t", null, true, null);
      t6.set$value(0, null);
      t7 = new S.Uniform("t", null, true, null);
      t7.set$value(0, null);
      t8 = new S.Uniform("f", null, true, null);
      t8.set$value(0, -1);
      t9 = new S.Uniform("i", null, true, null);
      t9.set$value(0, 0);
      t10 = new S.Uniform("f", null, true, null);
      t10.set$value(0, 1);
      t11 = new S.Uniform("f", null, true, null);
      t11.set$value(0, 0.98);
      t12 = new S.Uniform("i", null, true, null);
      t12.set$value(0, 0);
      t13 = new S.Uniform("f", null, true, null);
      t13.set$value(0, 0);
      t13 = P.LinkedHashMap_LinkedHashMap$_literal(["diffuse", t1, "opacity", t2, "map", t3, "offsetRepeat", t5, "lightMap", t4, "specularMap", t6, "envMap", t7, "flipEnvMap", t8, "useRefract", t9, "reflectivity", t10, "refractionRatio", t11, "combine", t12, "morphTargetInfluences", t13], null, null);
      t12 = new S.Uniform("t", null, true, null);
      t12.set$value(0, null);
      t11 = new S.Uniform("f", null, true, null);
      t11.set$value(0, 1);
      t11 = P.LinkedHashMap_LinkedHashMap$_literal(["bumpMap", t12, "bumpScale", t11], null, null);
      t12 = new S.Uniform("t", null, true, null);
      t12.set$value(0, null);
      t10 = new Float32Array(H._checkLength(2));
      t10[0] = 1;
      t10[1] = 1;
      t9 = new S.Uniform("v2", null, true, null);
      t9.set$value(0, new T.Vector2(t10));
      t9 = P.LinkedHashMap_LinkedHashMap$_literal(["normalMap", t12, "normalScale", t9], null, null);
      t12 = new S.Uniform("f", null, true, null);
      t12.set$value(0, 0.00025);
      t10 = new S.Uniform("f", null, true, null);
      t10.set$value(0, 1);
      t8 = new S.Uniform("f", null, true, null);
      t8.set$value(0, 2000);
      t7 = new S.Uniform("c", null, true, null);
      t7.set$value(0, S.Color$(16777215));
      t7 = P.LinkedHashMap_LinkedHashMap$_literal(["fogDensity", t12, "fogNear", t10, "fogFar", t8, "fogColor", t7], null, null);
      t8 = new S.Uniform("fv", null, true, null);
      t8.set$value(0, []);
      t10 = new S.Uniform("fv", null, true, null);
      t10.set$value(0, []);
      t12 = new S.Uniform("fv", null, true, null);
      t12.set$value(0, []);
      t6 = new S.Uniform("fv", null, true, null);
      t6.set$value(0, []);
      t4 = new S.Uniform("fv", null, true, null);
      t4.set$value(0, []);
      t5 = new S.Uniform("fv", null, true, null);
      t5.set$value(0, []);
      t3 = new S.Uniform("fv", null, true, null);
      t3.set$value(0, []);
      t2 = new S.Uniform("fv", null, true, null);
      t2.set$value(0, []);
      t1 = new S.Uniform("fv1", null, true, null);
      t1.set$value(0, []);
      t14 = new S.Uniform("fv", null, true, null);
      t14.set$value(0, []);
      t15 = new S.Uniform("fv", null, true, null);
      t15.set$value(0, []);
      t16 = new S.Uniform("fv", null, true, null);
      t16.set$value(0, []);
      t17 = new S.Uniform("fv1", null, true, null);
      t17.set$value(0, []);
      t18 = new S.Uniform("fv1", null, true, null);
      t18.set$value(0, []);
      t19 = new S.Uniform("fv1", null, true, null);
      t19.set$value(0, []);
      t19 = P.LinkedHashMap_LinkedHashMap$_literal(["ambientLightColor", t8, "directionalLightDirection", t10, "directionalLightColor", t12, "hemisphereLightDirection", t6, "hemisphereLightSkyColor", t4, "hemisphereLightGroundColor", t5, "pointLightColor", t3, "pointLightPosition", t2, "pointLightDistance", t1, "spotLightColor", t14, "spotLightPosition", t15, "spotLightDirection", t16, "spotLightDistance", t17, "spotLightAngleCos", t18, "spotLightExponent", t19], null, null);
      t18 = new S.Uniform("c", null, true, null);
      t18.set$value(0, S.Color$(15658734));
      t17 = new S.Uniform("f", null, true, null);
      t17.set$value(0, 1);
      t16 = new S.Uniform("f", null, true, null);
      t16.set$value(0, 1);
      t15 = new S.Uniform("f", null, true, null);
      t15.set$value(0, 1);
      t14 = new S.Uniform("t", null, true, null);
      t14.set$value(0, null);
      t1 = new S.Uniform("f", null, true, null);
      t1.set$value(0, 0.00025);
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 1);
      t3 = new S.Uniform("f", null, true, null);
      t3.set$value(0, 2000);
      t5 = new S.Uniform("c", null, true, null);
      t5.set$value(0, S.Color$(16777215));
      t5 = P.LinkedHashMap_LinkedHashMap$_literal(["psColor", t18, "opacity", t17, "size", t16, "scale", t15, "map", t14, "fogDensity", t1, "fogNear", t2, "fogFar", t3, "fogColor", t5], null, null);
      t3 = new S.Uniform("tv", null, true, null);
      t3.set$value(0, []);
      t2 = new S.Uniform("v2v", null, true, null);
      t2.set$value(0, []);
      t1 = new S.Uniform("fv1", null, true, null);
      t1.set$value(0, []);
      t14 = new S.Uniform("fv1", null, true, null);
      t14.set$value(0, []);
      t15 = new S.Uniform("m4v", null, true, null);
      t15.set$value(0, []);
      t15 = P.LinkedHashMap_LinkedHashMap$_literal(["common", t13, "bump", t11, "normalmap", t9, "fog", t7, "lights", t19, "particle", t5, "shadowmap", P.LinkedHashMap_LinkedHashMap$_literal(["shadowMap", t3, "shadowMapSize", t2, "shadowBias", t1, "shadowDarkness", t14, "shadowMatrix", t15], null, null)], null, null);
      $.__UniformsLib = t15;
      t1 = t15;
    }
    return t1;
  },
  ShaderLib: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16;
    t1 = $.__ShaderLib;
    if (t1 == null) {
      t1 = new S.Uniform("f", null, true, null);
      t1.set$value(0, 1);
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 2000);
      t3 = new S.Uniform("f", null, true, null);
      t3.set$value(0, 1);
      t3 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", P.LinkedHashMap_LinkedHashMap$_literal(["mNear", t1, "mFar", t2, "opacity", t3], null, null), "vertexShader", C.JSArray_methods.join$1(["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float mNear;", "uniform float mFar;", "uniform float opacity;", "void main() {", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "float color = 1.0 - smoothstep( mNear, mFar, depth );", "gl_FragColor = vec4( vec3( color ), opacity );", "}"], "\n")], null, null);
      t2 = new S.Uniform("f", null, true, null);
      t2.set$value(0, 1);
      t2 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", P.LinkedHashMap_LinkedHashMap$_literal(["opacity", t2], null, null), "vertexShader", C.JSArray_methods.join$1(["varying vec3 vNormal;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalize( normalMatrix * normal );", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float opacity;", "varying vec3 vNormal;", "void main() {", "gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", "}"], "\n")], null, null);
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([S.UniformsLib().$index(0, "common"), S.UniformsLib().$index(0, "fog"), S.UniformsLib().$index(0, "shadowmap")]), "vertexShader", C.JSArray_methods.join$1([S.ShaderChunk().$index(0, "map_pars_vertex"), S.ShaderChunk().$index(0, "lightmap_pars_vertex"), S.ShaderChunk().$index(0, "envmap_pars_vertex"), S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "map_vertex"), S.ShaderChunk().$index(0, "lightmap_vertex"), S.ShaderChunk().$index(0, "color_vertex"), S.ShaderChunk().$index(0, "skinbase_vertex"), "#ifdef USE_ENVMAP", S.ShaderChunk().$index(0, "morphnormal_vertex"), S.ShaderChunk().$index(0, "skinnormal_vertex"), S.ShaderChunk().$index(0, "defaultnormal_vertex"), "#endif", S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "envmap_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_pars_fragment"), S.ShaderChunk().$index(0, "lightmap_pars_fragment"), S.ShaderChunk().$index(0, "envmap_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), S.ShaderChunk().$index(0, "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( diffuse, opacity );", S.ShaderChunk().$index(0, "map_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "specularmap_fragment"), S.ShaderChunk().$index(0, "lightmap_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "envmap_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "linear_to_gamma_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t4 = S.UniformsLib().$index(0, "common");
      t5 = S.UniformsLib().$index(0, "fog");
      t6 = S.UniformsLib().$index(0, "lights");
      t7 = S.UniformsLib().$index(0, "shadowmap");
      t8 = new S.Uniform("c", null, true, null);
      t8.set$value(0, S.Color$(16777215));
      t9 = new S.Uniform("c", null, true, null);
      t9.set$value(0, S.Color$(0));
      t10 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t10.setValues$3(1, 1, 1);
      t11 = new S.Uniform("v3", null, true, null);
      t11.set$value(0, t10);
      t11 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([t4, t5, t6, t7, P.LinkedHashMap_LinkedHashMap$_literal(["ambient", t8, "emissive", t9, "wrapRGB", t11], null, null)]), "vertexShader", C.JSArray_methods.join$1(["#define LAMBERT", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", S.ShaderChunk().$index(0, "map_pars_vertex"), S.ShaderChunk().$index(0, "lightmap_pars_vertex"), S.ShaderChunk().$index(0, "envmap_pars_vertex"), S.ShaderChunk().$index(0, "lights_lambert_pars_vertex"), S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "map_vertex"), S.ShaderChunk().$index(0, "lightmap_vertex"), S.ShaderChunk().$index(0, "color_vertex"), S.ShaderChunk().$index(0, "morphnormal_vertex"), S.ShaderChunk().$index(0, "skinbase_vertex"), S.ShaderChunk().$index(0, "skinnormal_vertex"), S.ShaderChunk().$index(0, "defaultnormal_vertex"), S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "envmap_vertex"), S.ShaderChunk().$index(0, "lights_lambert_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float opacity;", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_pars_fragment"), S.ShaderChunk().$index(0, "lightmap_pars_fragment"), S.ShaderChunk().$index(0, "envmap_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), S.ShaderChunk().$index(0, "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", S.ShaderChunk().$index(0, "map_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "specularmap_fragment"), "#ifdef DOUBLE_SIDED", "if ( gl_FrontFacing )", "gl_FragColor.xyz *= vLightFront;", "else", "gl_FragColor.xyz *= vLightBack;", "#else", "gl_FragColor.xyz *= vLightFront;", "#endif", S.ShaderChunk().$index(0, "lightmap_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "envmap_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "linear_to_gamma_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t9 = S.UniformsLib().$index(0, "common");
      t8 = S.UniformsLib().$index(0, "bump");
      t7 = S.UniformsLib().$index(0, "normalmap");
      t6 = S.UniformsLib().$index(0, "fog");
      t5 = S.UniformsLib().$index(0, "lights");
      t4 = S.UniformsLib().$index(0, "shadowmap");
      t10 = new S.Uniform("c", null, true, null);
      t10.set$value(0, S.Color$(16777215));
      t12 = new S.Uniform("c", null, true, null);
      t12.set$value(0, S.Color$(0));
      t13 = new S.Uniform("c", null, true, null);
      t13.set$value(0, S.Color$(1118481));
      t14 = new S.Uniform("f", null, true, null);
      t14.set$value(0, 30);
      t15 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t15.setValues$3(1, 1, 1);
      t16 = new S.Uniform("v3", null, true, null);
      t16.set$value(0, t15);
      t16 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([t9, t8, t7, t6, t5, t4, P.LinkedHashMap_LinkedHashMap$_literal(["ambient", t10, "emissive", t12, "specular", t13, "shininess", t14, "wrapRGB", t16], null, null)]), "vertexShader", C.JSArray_methods.join$1(["#define PHONG", "varying vec3 vViewPosition;", "varying vec3 vNormal;", S.ShaderChunk().$index(0, "map_pars_vertex"), S.ShaderChunk().$index(0, "lightmap_pars_vertex"), S.ShaderChunk().$index(0, "envmap_pars_vertex"), S.ShaderChunk().$index(0, "lights_phong_pars_vertex"), S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "map_vertex"), S.ShaderChunk().$index(0, "lightmap_vertex"), S.ShaderChunk().$index(0, "color_vertex"), S.ShaderChunk().$index(0, "morphnormal_vertex"), S.ShaderChunk().$index(0, "skinbase_vertex"), S.ShaderChunk().$index(0, "skinnormal_vertex"), S.ShaderChunk().$index(0, "defaultnormal_vertex"), "vNormal = normalize( transformedNormal );", S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), "vViewPosition = -mvPosition.xyz;", S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "envmap_vertex"), S.ShaderChunk().$index(0, "lights_phong_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", "uniform vec3 ambient;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_pars_fragment"), S.ShaderChunk().$index(0, "lightmap_pars_fragment"), S.ShaderChunk().$index(0, "envmap_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "lights_phong_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), S.ShaderChunk().$index(0, "bumpmap_pars_fragment"), S.ShaderChunk().$index(0, "normalmap_pars_fragment"), S.ShaderChunk().$index(0, "specularmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", S.ShaderChunk().$index(0, "map_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "specularmap_fragment"), S.ShaderChunk().$index(0, "lights_phong_fragment"), S.ShaderChunk().$index(0, "lightmap_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "envmap_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "linear_to_gamma_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t14 = P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([S.UniformsLib().$index(0, "particle"), S.UniformsLib().$index(0, "shadowmap")]), "vertexShader", C.JSArray_methods.join$1(["uniform float size;", "uniform float scale;", S.ShaderChunk().$index(0, "color_pars_vertex"), S.ShaderChunk().$index(0, "shadowmap_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "color_vertex"), "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#ifdef USE_SIZEATTENUATION", "gl_PointSize = size * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize = size;", "#endif", "gl_Position = projectionMatrix * mvPosition;", S.ShaderChunk().$index(0, "worldpos_vertex"), S.ShaderChunk().$index(0, "shadowmap_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 psColor;", "uniform float opacity;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "map_particle_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), S.ShaderChunk().$index(0, "shadowmap_pars_fragment"), "void main() {", "gl_FragColor = vec4( psColor, opacity );", S.ShaderChunk().$index(0, "map_particle_fragment"), S.ShaderChunk().$index(0, "alphatest_fragment"), S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "shadowmap_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null);
      t13 = S.UniformsLib().$index(0, "common");
      t12 = S.UniformsLib().$index(0, "fog");
      t10 = new S.Uniform("f", null, true, null);
      t10.set$value(0, 1);
      t4 = new S.Uniform("f", null, true, null);
      t4.set$value(0, 1);
      t5 = new S.Uniform("f", null, true, null);
      t5.set$value(0, 2);
      t5 = P.LinkedHashMap_LinkedHashMap$_literal(["depth", t3, "normal", t2, "basic", t1, "lambert", t11, "phong", t16, "particle_basic", t14, "dashed", P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", S.UniformsUtils_merge([t13, t12, P.LinkedHashMap_LinkedHashMap$_literal(["scale", t10, "dashSize", t4, "totalSize", t5], null, null)]), "vertexShader", C.JSArray_methods.join$1(["uniform float scale;", "attribute float lineDistance;", "varying float vLineDistance;", S.ShaderChunk().$index(0, "color_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "color_vertex"), "vLineDistance = scale * lineDistance;", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", "uniform float dashSize;", "uniform float totalSize;", "varying float vLineDistance;", S.ShaderChunk().$index(0, "color_pars_fragment"), S.ShaderChunk().$index(0, "fog_pars_fragment"), "void main() {", "if ( mod( vLineDistance, totalSize ) > dashSize ) {", "discard;", "}", "gl_FragColor = vec4( diffuse, opacity );", S.ShaderChunk().$index(0, "color_fragment"), S.ShaderChunk().$index(0, "fog_fragment"), "}"], "\n")], null, null), "depthRGBA", P.LinkedHashMap_LinkedHashMap$_literal(["uniforms", P.LinkedHashMap_LinkedHashMap$_empty(null, null), "vertexShader", C.JSArray_methods.join$1([S.ShaderChunk().$index(0, "morphtarget_pars_vertex"), S.ShaderChunk().$index(0, "skinning_pars_vertex"), "void main() {", S.ShaderChunk().$index(0, "skinbase_vertex"), S.ShaderChunk().$index(0, "morphtarget_vertex"), S.ShaderChunk().$index(0, "skinning_vertex"), S.ShaderChunk().$index(0, "default_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["vec4 pack_depth( const in float depth ) {", "const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );", "const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );", "vec4 res = fract( depth * bit_shift );", "res -= res.xxyz * bit_mask;", "return res;", "}", "void main() {", "gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );", "}"], "\n")], null, null)], null, null);
      $.__ShaderLib = t5;
      t1 = t5;
    }
    return t1;
  },
  Gyroscope: {
    "^": "Object3D;translationWorld,translationObject,rotationWorld,rotationObject,scaleWorld,scaleObject,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    updateMatrixWorld$1$force: function(force) {
      var t1, t2, t3, t4, te, mRotation, mScale, l, i;
      if (this.matrixAutoUpdate)
        this.updateMatrix$0();
      if (this.matrixWorldNeedsUpdate || force) {
        t1 = this.parent;
        if (t1 != null) {
          t1 = t1.get$matrixWorld().$mul(0, this.matrix);
          this.matrixWorld = t1;
          t2 = this.translationWorld;
          t3 = this.scaleWorld;
          S.decompose(t1, t2, this.rotationWorld, t3);
          t1 = this.rotationObject;
          S.decompose(this.matrix, this.translationObject, t1, this.scaleObject);
          t4 = this.matrixWorld;
          te = t4.get$storage(t4);
          mRotation = new T.Matrix4(new Float32Array(H._checkLength(16)));
          mRotation.setIdentity$0();
          S.setRotationFromQuaternion(mRotation, t1);
          t3 = t3.storage;
          t1 = t3[0];
          t4 = t3[1];
          t3 = t3[2];
          mScale = new T.Matrix4(new Float32Array(H._checkLength(16)));
          mScale.Matrix4$diagonal3Values$3(t1, t4, t3);
          mRotation.multiply$1(0, mScale);
          t2 = t2.storage;
          t3 = t2[0];
          t4 = te.length;
          if (12 >= t4)
            return H.ioore(te, 12);
          te[12] = t3;
          t3 = t2[1];
          if (13 >= t4)
            return H.ioore(te, 13);
          te[13] = t3;
          t2 = t2[2];
          if (14 >= t4)
            return H.ioore(te, 14);
          te[14] = t2;
        } else
          this.matrixWorld.setFrom$1(this.matrix);
        this.matrixWorldNeedsUpdate = false;
        force = true;
      }
      t1 = this.children;
      l = t1.length;
      for (i = 0; i < l; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].updateMatrixWorld$1(force);
      }
    },
    updateMatrixWorld$0: function() {
      return this.updateMatrixWorld$1$force(false);
    }
  },
  CubeGeometry: {
    "^": "Geometry;_sides,segmentsWidth,segmentsHeight,segmentsDepth,id,name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
    buildPlane$8: function(u, v, udir, vdir, width, height, depth, material) {
      var gridX, gridY, width_half, height_half, offset, t1, t2, w, gridX1, gridY1, segment_width, segment_height, normal, t3, t4, t5, t6, t7, t8, t9, iy, t10, ix, t11, iy0, ix0, face, faceVertexUV, newUVs;
      gridX = this.segmentsWidth;
      gridY = this.segmentsHeight;
      width_half = width / 2;
      height_half = height / 2;
      offset = J.get$length$asx(this.vertices);
      t1 = u === "x";
      if (!(t1 && v === "y"))
        t2 = u === "y" && v === "x";
      else
        t2 = true;
      if (t2)
        w = "z";
      else {
        if (!(t1 && v === "z"))
          t2 = u === "z" && v === "x";
        else
          t2 = true;
        if (t2) {
          gridY = this.segmentsDepth;
          w = "y";
        } else {
          if (!(u === "z" && v === "y"))
            t2 = u === "y" && v === "z";
          else
            t2 = true;
          if (t2) {
            gridX = this.segmentsDepth;
            w = "x";
          } else
            w = null;
        }
      }
      gridX1 = gridX + 1;
      gridY1 = gridY + 1;
      segment_width = width / gridX;
      segment_height = height / gridY;
      t2 = new Float32Array(H._checkLength(3));
      normal = new T.Vector3(t2);
      t3 = w === "x";
      if (t3)
        t2[0] = depth > 0 ? 1 : -1;
      else if (w === "y")
        t2[1] = depth > 0 ? 1 : -1;
      else if (w === "z")
        t2[2] = depth > 0 ? 1 : -1;
      for (t2 = w === "z", t4 = w === "y", t5 = v === "z", t6 = v === "y", t7 = v === "x", t8 = u === "z", t9 = u === "y", iy = 0; iy < gridY1; ++iy)
        for (t10 = (iy * segment_height - height_half) * vdir, ix = 0; ix < gridX1; ++ix) {
          t11 = new Float32Array(3);
          if (t1)
            t11[0] = (ix * segment_width - width_half) * udir;
          else if (t9)
            t11[1] = (ix * segment_width - width_half) * udir;
          else if (t8)
            t11[2] = (ix * segment_width - width_half) * udir;
          if (t7)
            t11[0] = t10;
          else if (t6)
            t11[1] = t10;
          else if (t5)
            t11[2] = t10;
          if (t3)
            t11[0] = depth;
          else if (t4)
            t11[1] = depth;
          else if (t2)
            t11[2] = depth;
          J.add$1$ax(this.vertices, new T.Vector3(t11));
        }
      for (t1 = this.faceVertexUvs, iy = 0; iy < gridY; iy = iy0)
        for (t2 = 1 - iy / gridY, iy0 = iy + 1, t3 = 1 - iy0 / gridY, t4 = gridX1 * iy, t5 = gridX1 * iy0, ix = 0; ix < gridX; ix = ix0) {
          ix0 = ix + 1;
          t6 = [ix + t4 + offset, ix + t5 + offset, ix0 + t5 + offset, ix0 + t4 + offset];
          face = new S.Face4(t6, null, null, null, null, null, null, null);
          face.Face$4(t6, null, null, null);
          face.normal.setFrom$1(normal);
          t6 = face.vertexNormals;
          t7 = new T.Vector3(new Float32Array(3));
          t7.setFrom$1(normal);
          t8 = new T.Vector3(new Float32Array(3));
          t8.setFrom$1(normal);
          t9 = new T.Vector3(new Float32Array(3));
          t9.setFrom$1(normal);
          t10 = new T.Vector3(new Float32Array(3));
          t10.setFrom$1(normal);
          C.JSArray_methods.addAll$1(t6, [t7, t8, t9, t10]);
          face.materialIndex = material;
          this.faces.push(face);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          faceVertexUV = t1[0];
          newUVs = [];
          t10 = ix / gridX;
          t9 = ix0 / gridX;
          C.JSArray_methods.addAll$1(newUVs, [new S.UV(t10, t2), new S.UV(t10, t3), new S.UV(t9, t3), new S.UV(t9, t2)]);
          J.add$1$ax(faceVertexUV, newUVs);
        }
    },
    CubeGeometry$8: function(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materialOrList, sides) {
      var width_half, height_half, depth_half;
      width_half = width / 2;
      height_half = height / 2;
      depth_half = depth / 2;
      this.materials = [];
      this._sides = new S.CubeGeomSides(true, true, true, true, true, true);
      if (this._sides.px)
        this.buildPlane$8("z", "y", -1, -1, depth, height, width_half, null);
      if (this._sides.nx)
        this.buildPlane$8("z", "y", 1, -1, depth, height, -width_half, null);
      if (this._sides.py)
        this.buildPlane$8("x", "z", 1, 1, width, depth, height_half, null);
      if (this._sides.ny)
        this.buildPlane$8("x", "z", 1, -1, width, depth, -height_half, null);
      if (this._sides.pz)
        this.buildPlane$8("x", "y", 1, -1, width, height, depth_half, null);
      if (this._sides.nz)
        this.buildPlane$8("x", "y", -1, -1, width, height, -depth_half, null);
      this.computeCentroids$0();
      this.mergeVertices$0();
    },
    static: {CubeGeometry$: function(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materialOrList, sides) {
        var t1 = $.GeometryCount;
        $.GeometryCount = t1 + 1;
        t1 = new S.CubeGeometry(null, segmentsWidth, segmentsHeight, segmentsDepth, t1, "", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
        t1.CubeGeometry$8(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materialOrList, sides);
        return t1;
      }}
  },
  CubeGeomSides: {
    "^": "Object;px,nx,py,ny,pz,nz"
  },
  CylinderGeometry: {
    "^": "Geometry;radiusTop,radiusBottom,height,segmentsRadius,segmentsHeight,openEnded,id,name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
    CylinderGeometry$6: function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
      var t1, heightHalf, segmentsX, segmentsY, vertices, uvs, t2, y, verticesRow, uvsRow, v, radius, t3, t4, x, u, t5, t6, t7, tanTheta, na, nb, x0, t8, t9, v1, y0, t10, v2, v3, v4, n1, n2, n3, n4, t11, t12, t13, t14, t15, t16, t17;
      t1 = this.height;
      if (typeof t1 !== "number")
        return t1.$div();
      heightHalf = t1 / 2;
      segmentsX = this.segmentsRadius;
      segmentsY = this.segmentsHeight;
      vertices = [];
      uvs = [];
      for (t1 = this.radiusBottom, t2 = this.radiusTop, y = 0; y <= segmentsY; ++y) {
        verticesRow = [];
        uvsRow = [];
        v = y / segmentsY;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        radius = v * (t1 - t2) + t2;
        for (t3 = 1 - v, t4 = -v, x = 0; x <= segmentsX; ++x) {
          u = x / segmentsX;
          t5 = new Float32Array(3);
          t6 = u * 3.141592653589793 * 2;
          t5[0] = radius * Math.sin(t6);
          t7 = this.height;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t5[1] = t4 * t7 + heightHalf;
          t5[2] = radius * Math.cos(t6);
          J.add$1$ax(this.vertices, new T.Vector3(t5));
          verticesRow.push(J.get$length$asx(this.vertices) - 1);
          uvsRow.push(new S.UV(u, t3));
        }
        vertices.push(verticesRow);
        uvs.push(uvsRow);
      }
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.height;
      if (typeof t3 !== "number")
        return H.iae(t3);
      tanTheta = (t1 - t2) / t3;
      for (t3 = this.faceVertexUvs, t4 = t2 !== 0, x = 0; x < segmentsX; x = x0) {
        t5 = this.vertices;
        t6 = x + 1;
        t7 = vertices.length;
        if (t4) {
          if (0 >= t7)
            return H.ioore(vertices, 0);
          t7 = vertices[0];
          if (x >= t7.length)
            return H.ioore(t7, x);
          na = J.clone$0$x(J.$index$asx(t5, t7[x]));
          t7 = this.vertices;
          if (0 >= vertices.length)
            return H.ioore(vertices, 0);
          t5 = vertices[0];
          if (t6 >= t5.length)
            return H.ioore(t5, t6);
          nb = J.clone$0$x(J.$index$asx(t7, t5[t6]));
        } else {
          if (1 >= t7)
            return H.ioore(vertices, 1);
          t7 = vertices[1];
          if (x >= t7.length)
            return H.ioore(t7, x);
          na = J.clone$0$x(J.$index$asx(t5, t7[x]));
          t7 = this.vertices;
          if (1 >= vertices.length)
            return H.ioore(vertices, 1);
          t5 = vertices[1];
          if (t6 >= t5.length)
            return H.ioore(t5, t6);
          nb = J.clone$0$x(J.$index$asx(t7, t5[t6]));
        }
        t5 = J.getInterceptor$x(na);
        t6 = J.$add$ns(J.$mul$ns(t5.get$x(na), t5.get$x(na)), J.$mul$ns(t5.get$z(na), t5.get$z(na)));
        if (typeof t6 !== "number")
          H.throwExpression(P.ArgumentError$(t6));
        t5.$indexSet(na, 1, Math.sqrt(t6) * tanTheta);
        t5.normalize$0(na);
        t6 = J.getInterceptor$x(nb);
        t7 = J.$add$ns(J.$mul$ns(t6.get$x(nb), t6.get$x(nb)), J.$mul$ns(t6.get$z(nb), t6.get$z(nb)));
        if (typeof t7 !== "number")
          H.throwExpression(P.ArgumentError$(t7));
        t6.$indexSet(nb, 1, Math.sqrt(t7) * tanTheta);
        t5.normalize$0(na);
        for (x0 = x + 1, y = 0; y < segmentsY; y = y0) {
          t7 = vertices.length;
          if (y >= t7)
            return H.ioore(vertices, y);
          t8 = vertices[y];
          t9 = t8.length;
          if (x >= t9)
            return H.ioore(t8, x);
          v1 = t8[x];
          y0 = y + 1;
          if (y0 >= t7)
            return H.ioore(vertices, y0);
          t7 = vertices[y0];
          t10 = t7.length;
          if (x >= t10)
            return H.ioore(t7, x);
          v2 = t7[x];
          if (x0 >= t10)
            return H.ioore(t7, x0);
          v3 = t7[x0];
          if (x0 >= t9)
            return H.ioore(t8, x0);
          v4 = t8[x0];
          n1 = t5.clone$0(na);
          n2 = t5.clone$0(na);
          n3 = t6.clone$0(nb);
          n4 = t6.clone$0(nb);
          t8 = uvs.length;
          if (y >= t8)
            return H.ioore(uvs, y);
          t9 = uvs[y];
          t7 = t9.length;
          if (x >= t7)
            return H.ioore(t9, x);
          t10 = t9[x];
          t11 = t10.u;
          t10 = t10.v;
          if (y0 >= t8)
            return H.ioore(uvs, y0);
          t8 = uvs[y0];
          t12 = t8.length;
          if (x >= t12)
            return H.ioore(t8, x);
          t13 = t8[x];
          t14 = t13.u;
          t13 = t13.v;
          if (x0 >= t12)
            return H.ioore(t8, x0);
          t8 = t8[x0];
          t12 = t8.u;
          t8 = t8.v;
          if (x0 >= t7)
            return H.ioore(t9, x0);
          t9 = t9[x0];
          t7 = t9.u;
          t9 = t9.v;
          t15 = this.faces;
          t16 = [v1, v2, v3, v4];
          t17 = new S.Face4(t16, null, null, null, null, null, null, null);
          t17.Face$4(t16, [n1, n2, n3, n4], null, null);
          t15.push(t17);
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          J.add$1$ax(t3[0], [new S.UV(t11, t10), new S.UV(t14, t13), new S.UV(t12, t8), new S.UV(t7, t9)]);
        }
      }
      t4 = !this.openEnded;
      if (t4 && t2 > 0) {
        t2 = this.vertices;
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(0, heightHalf, 0);
        J.add$1$ax(t2, t5);
        for (x = 0; x < segmentsX; x = x0) {
          if (0 >= vertices.length)
            return H.ioore(vertices, 0);
          t2 = vertices[0];
          t5 = t2.length;
          if (x >= t5)
            return H.ioore(t2, x);
          v1 = t2[x];
          x0 = x + 1;
          if (x0 >= t5)
            return H.ioore(t2, x0);
          v2 = t2[x0];
          t2 = J.get$length$asx(this.vertices);
          t5 = new Float32Array(3);
          t5[0] = 0;
          t5[1] = 1;
          t5[2] = 0;
          t6 = new Float32Array(3);
          t6[0] = 0;
          t6[1] = 1;
          t6[2] = 0;
          t7 = new Float32Array(3);
          t7[0] = 0;
          t7[1] = 1;
          t7[2] = 0;
          if (0 >= uvs.length)
            return H.ioore(uvs, 0);
          t8 = uvs[0];
          t9 = t8.length;
          if (x >= t9)
            return H.ioore(t8, x);
          t10 = t8[x];
          t11 = t10.u;
          t10 = t10.v;
          if (x0 >= t9)
            return H.ioore(t8, x0);
          t8 = t8[x0];
          t9 = t8.u;
          t8 = t8.v;
          t12 = this.faces;
          t2 = [v1, v2, t2 - 1];
          t13 = new S.Face3(t2, null, null, null, null, null, null, null);
          t13.Face$4(t2, [new T.Vector3(t5), new T.Vector3(t6), new T.Vector3(t7)], null, null);
          t12.push(t13);
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          J.add$1$ax(t3[0], [new S.UV(t11, t10), new S.UV(t9, t8), new S.UV(t9, 0)]);
        }
      }
      if (t4 && t1 > 0) {
        t1 = this.vertices;
        t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t2.setValues$3(0, -heightHalf, 0);
        J.add$1$ax(t1, t2);
        for (x = 0; x < segmentsX; x = x0) {
          if (y < 0 || y >= vertices.length)
            return H.ioore(vertices, y);
          t1 = vertices[y];
          x0 = x + 1;
          t2 = t1.length;
          if (x0 >= t2)
            return H.ioore(t1, x0);
          v1 = t1[x0];
          if (x >= t2)
            return H.ioore(t1, x);
          v2 = t1[x];
          t1 = J.get$length$asx(this.vertices);
          t2 = new Float32Array(3);
          t2[0] = 0;
          t2[1] = -1;
          t2[2] = 0;
          t4 = new Float32Array(3);
          t4[0] = 0;
          t4[1] = -1;
          t4[2] = 0;
          t5 = new Float32Array(3);
          t5[0] = 0;
          t5[1] = -1;
          t5[2] = 0;
          if (y >= uvs.length)
            return H.ioore(uvs, y);
          t6 = uvs[y];
          t7 = t6.length;
          if (x0 >= t7)
            return H.ioore(t6, x0);
          t8 = t6[x0];
          t9 = t8.u;
          t8 = t8.v;
          if (x >= t7)
            return H.ioore(t6, x);
          t6 = t6[x];
          t7 = t6.u;
          t6 = t6.v;
          t10 = this.faces;
          t1 = [v1, v2, t1 - 1];
          t11 = new S.Face3(t1, null, null, null, null, null, null, null);
          t11.Face$4(t1, [new T.Vector3(t2), new T.Vector3(t4), new T.Vector3(t5)], null, null);
          t10.push(t11);
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          J.add$1$ax(t3[0], [new S.UV(t9, t8), new S.UV(t7, t6), new S.UV(t7, 1)]);
        }
      }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
    },
    static: {CylinderGeometry$: function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
        var t1 = $.GeometryCount;
        $.GeometryCount = t1 + 1;
        t1 = new S.CylinderGeometry(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded, t1, "", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
        t1.CylinderGeometry$6(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded);
        return t1;
      }}
  },
  SphereGeometry: {
    "^": "Geometry;radius,id,name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
    SphereGeometry$7: function(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength) {
      var segmentsX, segmentsY, vertices, uvs, t1, y, verticesRow, uvsRow, x, u, v, t2, t3, t4, t5, y0, x0, v1, v2, v3, v4, n1, n2, n3, n4, t6, uv1, uv2, uv3, uv4;
      segmentsX = P.max(3, segmentsWidth);
      segmentsY = P.max(2, segmentsHeight);
      vertices = [];
      uvs = [];
      for (t1 = this.radius, y = 0; y <= segmentsY; ++y) {
        verticesRow = [];
        uvsRow = [];
        for (x = 0; x <= segmentsX; ++x) {
          u = x / C.JSNumber_methods.toDouble$0(segmentsX);
          v = y / C.JSNumber_methods.toDouble$0(segmentsY);
          t2 = new Float32Array(3);
          if (typeof t1 !== "number")
            return t1.$negate();
          t3 = phiStart + u * phiLength;
          t4 = Math.cos(t3);
          t5 = thetaStart + v * thetaLength;
          t2[0] = -t1 * t4 * Math.sin(t5);
          t2[1] = t1 * Math.cos(t5);
          t3 = Math.sin(t3);
          t2[2] = t1 * t3 * Math.sin(t5);
          J.add$1$ax(this.vertices, new T.Vector3(t2));
          verticesRow.push(J.get$length$asx(this.vertices) - 1);
          uvsRow.push(new S.UV(u, 1 - v));
        }
        vertices.push(verticesRow);
        uvs.push(uvsRow);
      }
      for (t2 = this.faceVertexUvs, y = 0; y < segmentsY; y = y0)
        for (y0 = y + 1, x = 0; x < segmentsX; x = x0) {
          t3 = vertices.length;
          if (y >= t3)
            return H.ioore(vertices, y);
          t4 = vertices[y];
          x0 = x + 1;
          t5 = t4.length;
          if (x0 >= t5)
            return H.ioore(t4, x0);
          v1 = t4[x0];
          if (x >= t5)
            return H.ioore(t4, x);
          v2 = t4[x];
          if (y0 >= t3)
            return H.ioore(vertices, y0);
          t3 = vertices[y0];
          t4 = t3.length;
          if (x >= t4)
            return H.ioore(t3, x);
          v3 = t3[x];
          if (x0 >= t4)
            return H.ioore(t3, x0);
          v4 = t3[x0];
          n1 = J.normalize$0$x(J.clone$0$x(J.$index$asx(this.vertices, v1)));
          n2 = J.normalize$0$x(J.clone$0$x(J.$index$asx(this.vertices, v2)));
          n3 = J.normalize$0$x(J.clone$0$x(J.$index$asx(this.vertices, v3)));
          n4 = J.normalize$0$x(J.clone$0$x(J.$index$asx(this.vertices, v4)));
          t3 = uvs.length;
          if (y >= t3)
            return H.ioore(uvs, y);
          t4 = uvs[y];
          t5 = t4.length;
          if (x0 >= t5)
            return H.ioore(t4, x0);
          t6 = t4[x0];
          uv1 = new S.UV(t6.u, t6.v);
          if (x >= t5)
            return H.ioore(t4, x);
          t4 = t4[x];
          uv2 = new S.UV(t4.u, t4.v);
          if (y0 >= t3)
            return H.ioore(uvs, y0);
          t3 = uvs[y0];
          t4 = t3.length;
          if (x >= t4)
            return H.ioore(t3, x);
          t5 = t3[x];
          uv3 = new S.UV(t5.u, t5.v);
          if (x0 >= t4)
            return H.ioore(t3, x0);
          t3 = t3[x0];
          uv4 = new S.UV(t3.u, t3.v);
          if (J.$eq(J.abs$0$n(J.get$y$x(J.$index$asx(this.vertices, v1))), t1)) {
            t3 = this.faces;
            t4 = [v1, v3, v4];
            t5 = new S.Face3(t4, null, null, null, null, null, null, null);
            t5.Face$4(t4, [n1, n3, n4], null, null);
            t3.push(t5);
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            J.add$1$ax(t2[0], [uv1, uv3, uv4]);
          } else {
            t3 = J.$eq(J.abs$0$n(J.get$y$x(J.$index$asx(this.vertices, v3))), t1);
            t4 = this.faces;
            if (t3) {
              t3 = [v1, v2, v3];
              t5 = new S.Face3(t3, null, null, null, null, null, null, null);
              t5.Face$4(t3, [n1, n2, n3], null, null);
              t4.push(t5);
              if (0 >= t2.length)
                return H.ioore(t2, 0);
              J.add$1$ax(t2[0], [uv1, uv2, uv3]);
            } else {
              t3 = [v1, v2, v3, v4];
              t5 = new S.Face4(t3, null, null, null, null, null, null, null);
              t5.Face$4(t3, [n1, n2, n3, n4], null, null);
              t4.push(t5);
              if (0 >= t2.length)
                return H.ioore(t2, 0);
              J.add$1$ax(t2[0], [uv1, uv2, uv3, uv4]);
            }
          }
        }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
      this.boundingSphere = new S.BoundingSphere(t1);
    },
    static: {SphereGeometry$: function(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength) {
        var t1 = $.GeometryCount;
        $.GeometryCount = t1 + 1;
        t1 = new S.SphereGeometry(radius, t1, "", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
        t1.SphereGeometry$7(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength);
        return t1;
      }}
  },
  TorusGeometry: {
    "^": "Geometry;radius,tube,segmentsR,segmentsT,arc,id,name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
    TorusGeometry$5: function(radius, tube, segmentsR, segmentsT, arc) {
      var t1, center, uvs, normals, t2, t3, t4, t5, t6, j, i, t7, u, t8, v, t9, vertex, t10, a, b, face, t11, t12, t13;
      t1 = new Float32Array(H._checkLength(3));
      center = new T.Vector3(t1);
      uvs = H.setRuntimeTypeInfo([], [S.UV]);
      normals = H.setRuntimeTypeInfo([], [T.Vector3]);
      t2 = this.segmentsR;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.segmentsT;
      t4 = this.tube;
      t5 = this.radius;
      t6 = this.arc;
      j = 0;
      for (; j <= t2; ++j) {
        if (typeof t3 !== "number")
          return H.iae(t3);
        i = 0;
        for (; i <= t3; ++i) {
          t7 = i / t3;
          if (typeof t6 !== "number")
            return H.iae(t6);
          u = t7 * t6;
          t8 = j / t2;
          v = t8 * 3.141592653589793 * 2;
          t9 = Math.cos(u);
          if (typeof t5 !== "number")
            return t5.$mul();
          t1[0] = t5 * t9;
          t1[1] = t5 * Math.sin(u);
          t9 = new Float32Array(3);
          vertex = new T.Vector3(t9);
          t10 = Math.cos(v);
          if (typeof t4 !== "number")
            return t4.$mul();
          t9[0] = (t5 + t4 * t10) * Math.cos(u);
          t10 = Math.cos(v);
          t9[1] = (t5 + t4 * t10) * Math.sin(u);
          t9[2] = t4 * Math.sin(v);
          J.add$1$ax(this.vertices, vertex);
          uvs.push(new S.UV(t7, t8));
          t7 = new T.Vector3(new Float32Array(3));
          t7.setFrom$1(vertex);
          normals.push(t7.sub$1(center).normalize$0(0));
        }
      }
      for (t1 = this.faceVertexUvs, j = 1; j <= t2; ++j) {
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = j - 1;
        i = 1;
        for (; i <= t3; ++i) {
          t5 = t3 + 1;
          t6 = t5 * j + i;
          a = t6 - 1;
          t5 = t5 * t4 + i;
          b = t5 - 1;
          t7 = normals.length;
          if (a >= t7)
            return H.ioore(normals, a);
          t8 = normals[a];
          if (b < 0 || b >= t7)
            return H.ioore(normals, b);
          t9 = normals[b];
          if (t5 < 0 || t5 >= t7)
            return H.ioore(normals, t5);
          t10 = normals[t5];
          if (t6 >= t7)
            return H.ioore(normals, t6);
          t7 = [a, b, t5, t6];
          face = new S.Face4(t7, null, null, null, null, null, null, null);
          face.Face$4(t7, [t8, t9, t10, normals[t6]], null, null);
          t10 = face.normal;
          if (a >= normals.length)
            return H.ioore(normals, a);
          J.add$1$ax(t10, normals[a]);
          t10 = face.normal;
          if (b >= normals.length)
            return H.ioore(normals, b);
          J.add$1$ax(t10, normals[b]);
          t10 = face.normal;
          if (t5 >= normals.length)
            return H.ioore(normals, t5);
          J.add$1$ax(t10, normals[t5]);
          t10 = face.normal;
          if (t6 >= normals.length)
            return H.ioore(normals, t6);
          J.add$1$ax(t10, normals[t6]);
          J.normalize$0$x(face.normal);
          this.faces.push(face);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t10 = t1[0];
          t9 = uvs.length;
          if (a >= t9)
            return H.ioore(uvs, a);
          t8 = uvs[a];
          t7 = t8.u;
          t8 = t8.v;
          if (b >= t9)
            return H.ioore(uvs, b);
          t11 = uvs[b];
          t12 = t11.u;
          t11 = t11.v;
          if (t5 >= t9)
            return H.ioore(uvs, t5);
          t5 = uvs[t5];
          t13 = t5.u;
          t5 = t5.v;
          if (t6 >= t9)
            return H.ioore(uvs, t6);
          t6 = uvs[t6];
          J.add$1$ax(t10, [new S.UV(t7, t8), new S.UV(t12, t11), new S.UV(t13, t5), new S.UV(t6.u, t6.v)]);
        }
      }
      this.computeCentroids$0();
    },
    static: {TorusGeometry$: function(radius, tube, segmentsR, segmentsT, arc) {
        var t1 = $.GeometryCount;
        $.GeometryCount = t1 + 1;
        t1 = new S.TorusGeometry(radius, tube, segmentsR, segmentsT, arc, t1, "", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
        t1.TorusGeometry$5(radius, tube, segmentsR, segmentsT, arc);
        return t1;
      }}
  },
  CameraHelper: {
    "^": "Line;camera,matrixWorld:three$CameraHelper$matrixWorld@,matrixAutoUpdate:three$CameraHelper$matrixAutoUpdate<,pointMap,geometry,material,type,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    addPoint$2: function(id, hex) {
      var t1, t2;
      t1 = this.geometry;
      J.add$1$ax(t1.vertices, new T.Vector3(new Float32Array(H._checkLength(3))));
      t1.colors.push(S.Color$(hex));
      t2 = this.pointMap;
      if (!t2.containsKey$1(0, id))
        t2.$indexSet(0, id, []);
      t2.$index(0, id).push(J.get$length$asx(t1.vertices) - 1);
    },
    setPoint$4: function(point, x, y, z) {
      var points, il, t1, i, t2;
      $.get$CameraHelper___v().setValues$3(x, y, z);
      $.get$CameraHelper___projector().unprojectVector$2($.get$CameraHelper___v(), $.get$CameraHelper___c());
      points = this.pointMap.$index(0, point);
      if (points != null) {
        il = points.length;
        for (t1 = this.geometry, i = 0; i < il; ++i) {
          t2 = t1.vertices;
          if (i >= points.length)
            return H.ioore(points, i);
          J.$index$asx(t2, points[i]).setFrom$1($.get$CameraHelper___v());
        }
      }
    },
    update$0: function(_) {
      $.get$CameraHelper___c().projectionMatrix.setFrom$1(this.camera.projectionMatrix);
      this.setPoint$4("c", 0, 0, -1);
      this.setPoint$4("t", 0, 0, 1);
      this.setPoint$4("n1", -1, -1, -1);
      this.setPoint$4("n2", 1, -1, -1);
      this.setPoint$4("n3", -1, 1, -1);
      this.setPoint$4("n4", 1, 1, -1);
      this.setPoint$4("f1", -1, -1, 1);
      this.setPoint$4("f2", 1, -1, 1);
      this.setPoint$4("f3", -1, 1, 1);
      this.setPoint$4("f4", 1, 1, 1);
      this.setPoint$4("u1", 0.7, 1.1, -1);
      this.setPoint$4("u2", -0.7, 1.1, -1);
      this.setPoint$4("u3", 0, 2, -1);
      this.setPoint$4("cf1", -1, 0, 1);
      this.setPoint$4("cf2", 1, 0, 1);
      this.setPoint$4("cf3", 0, -1, 1);
      this.setPoint$4("cf4", 0, 1, 1);
      this.setPoint$4("cn1", -1, 0, -1);
      this.setPoint$4("cn2", 1, 0, -1);
      this.setPoint$4("cn3", 0, -1, -1);
      this.setPoint$4("cn4", 0, 1, -1);
      this.geometry.get$_data().$indexSet(0, "verticesNeedUpdate", true);
    },
    CameraHelper$1: function(camera) {
      this.three$CameraHelper$matrixWorld = this.camera.matrixWorld;
      this.addPoint$2("n1", 16755200);
      this.addPoint$2("n2", 16755200);
      this.addPoint$2("n2", 16755200);
      this.addPoint$2("n4", 16755200);
      this.addPoint$2("n4", 16755200);
      this.addPoint$2("n3", 16755200);
      this.addPoint$2("n3", 16755200);
      this.addPoint$2("n1", 16755200);
      this.addPoint$2("f1", 16755200);
      this.addPoint$2("f2", 16755200);
      this.addPoint$2("f2", 16755200);
      this.addPoint$2("f4", 16755200);
      this.addPoint$2("f4", 16755200);
      this.addPoint$2("f3", 16755200);
      this.addPoint$2("f3", 16755200);
      this.addPoint$2("f1", 16755200);
      this.addPoint$2("n1", 16755200);
      this.addPoint$2("f1", 16755200);
      this.addPoint$2("n2", 16755200);
      this.addPoint$2("f2", 16755200);
      this.addPoint$2("n3", 16755200);
      this.addPoint$2("f3", 16755200);
      this.addPoint$2("n4", 16755200);
      this.addPoint$2("f4", 16755200);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n1", 16711680);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n2", 16711680);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n3", 16711680);
      this.addPoint$2("p", 16711680);
      this.addPoint$2("n4", 16711680);
      this.addPoint$2("u1", 43775);
      this.addPoint$2("u2", 43775);
      this.addPoint$2("u2", 43775);
      this.addPoint$2("u3", 43775);
      this.addPoint$2("u3", 43775);
      this.addPoint$2("u1", 43775);
      this.addPoint$2("c", 16777215);
      this.addPoint$2("t", 16777215);
      this.addPoint$2("p", 3355443);
      this.addPoint$2("c", 3355443);
      this.addPoint$2("cn1", 3355443);
      this.addPoint$2("cn2", 3355443);
      this.addPoint$2("cn3", 3355443);
      this.addPoint$2("cn4", 3355443);
      this.addPoint$2("cf1", 3355443);
      this.addPoint$2("cf2", 3355443);
      this.addPoint$2("cf3", 3355443);
      this.addPoint$2("cf4", 3355443);
      this.update$0(0);
    },
    static: {"^": "CameraHelper___projector,CameraHelper___v,CameraHelper___c"}
  },
  ShadowMapPlugin: {
    "^": "Object;_frustum,_projScreenMatrix,_min,_max,_gl,_renderer,_depthMaterial,_depthMaterialMorph,_depthMaterialSkin,_depthMaterialMorphSkin",
    render$4: [function(scene, camera, width, height) {
      var t1 = this._renderer;
      if (!(t1.shadowMapEnabled && t1.shadowMapAutoUpdate))
        return;
      this.update$2(0, scene, camera);
    }, function(scene, camera) {
      return this.render$4(scene, camera, null, null);
    }, "render$2", function(scene, camera, width) {
      return this.render$4(scene, camera, width, null);
    }, "render$3", "call$4", "call$2", "call$3", "get$render", 4, 4, 89, 3, 3],
    update$2: function(_, scene, camera) {
      var lights, t1, t2, il, i, n, virtualLight, light, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, gyro, line, virtualLight0, nearZ, farZ, pointsFrustum, j, jl, shadowMap, shadowMatrix, shadowCamera, buffer, material, webglObject, object, renderList, shadowFilter, t19, t20, t21, objectMaterial, useMorphing, useSkinning, clearColor, clearAlpha;
      lights = [];
      J.clearColor$4$x(this._gl, 1, 1, 1, 1);
      J.disable$1$x(this._gl, 3042);
      J.enable$1$x(this._gl, 2884);
      J.frontFace$1$x(this._gl, 2305);
      t1 = this._renderer.shadowMapCullFrontFaces;
      t2 = this._gl;
      if (t1 === 2)
        J.cullFace$1$x(t2, 1028);
      else
        J.cullFace$1$x(t2, 1029);
      this._renderer.setDepthTest$1(true);
      il = scene.lights.length;
      for (t1 = J.getInterceptor$ax(camera), i = 0, n = null, virtualLight = null; i < il; ++i) {
        t2 = scene.lights;
        if (i >= t2.length)
          return H.ioore(t2, i);
        light = t2[i];
        if (!light.get$castShadow())
          continue;
        t2 = J.getInterceptor(light);
        if (!!t2.$isDirectionalLight && light.shadowCascade)
          for (n = 0; n < light.get$shadowCascadeCount(); ++n) {
            if (n >= 0)
              return H.ioore(light.get$shadowCascadeArray(), n);
            virtualLight = this.createVirtualLight$2(light, n);
            virtualLight.set$originalCamera(camera);
            t3 = new Float32Array(3);
            t4 = new Float32Array(3);
            t5 = new Float32Array(4);
            t5[3] = 1;
            t6 = new Float32Array(4);
            t6[3] = 1;
            t7 = new Float32Array(3);
            t8 = new Float32Array(3);
            t9 = $.Object3DCount;
            $.Object3DCount = t9 + 1;
            t10 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            t11 = new Float32Array(3);
            t11[0] = 0;
            t11[1] = 1;
            t11[2] = 0;
            t12 = new Float32Array(3);
            t12[0] = 0;
            t12[1] = 0;
            t12[2] = 0;
            t13 = new Float32Array(3);
            t13[0] = 0;
            t13[1] = 0;
            t13[2] = 0;
            t14 = new Float32Array(3);
            t14[0] = 1;
            t14[1] = 1;
            t14[2] = 1;
            t15 = new T.Matrix4(new Float32Array(16));
            t15.setIdentity$0();
            t16 = new T.Matrix4(new Float32Array(16));
            t16.setIdentity$0();
            t17 = new T.Matrix4(new Float32Array(16));
            t17.setIdentity$0();
            t18 = new Float32Array(4);
            t18[3] = 1;
            gyro = new S.Gyroscope(new T.Vector3(t3), new T.Vector3(t4), new T.Quaternion(t5), new T.Quaternion(t6), new T.Vector3(t7), new T.Vector3(t8), t9, "", t10, null, [], new T.Vector3(t11), new T.Vector3(t12), new T.Vector3(t13), new T.Vector3(t14), "XYZ", null, null, null, true, null, t15, t16, t17, true, true, new T.Quaternion(t18), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null);
            gyro.position = light.get$shadowCascadeOffset();
            gyro.add$1(0, virtualLight);
            gyro.add$1(0, virtualLight.target);
            t1.add$1(camera, gyro);
            light.get$shadowCascadeArray()[n] = virtualLight;
            line = "Created virtualLight " + ("Instance of '" + H.Primitives_objectTypeName(virtualLight) + "'");
            H.printString(line);
            virtualLight0 = light.get$shadowCascadeArray()[n];
            virtualLight0.three$DirectionalLight$position.copy$1(t2.get$position(light));
            virtualLight0.target.position.copy$1(t2.get$target(light).position);
            t3 = virtualLight0.target;
            S.makeLookAt(virtualLight0.matrix, t3, virtualLight0.three$DirectionalLight$position, virtualLight0.up);
            if (virtualLight0.rotationAutoUpdate) {
              t3 = virtualLight0.matrix;
              if (virtualLight0.useQuaternion)
                virtualLight0.quaternion.setFromRotationMatrix$1(t3);
              else
                virtualLight0.rotation = S.calcEulerFromRotationMatrix(t3, virtualLight0.eulerOrder);
            }
            virtualLight0.shadowCameraVisible = light.get$shadowCameraVisible();
            virtualLight0.shadowDarkness = light.get$shadowDarkness();
            virtualLight0.shadowBias = light.get$shadowCascadeBias()[n];
            nearZ = light.get$shadowCascadeNearZ()[n];
            farZ = light.get$shadowCascadeFarZ()[n];
            pointsFrustum = virtualLight0.pointsFrustum;
            if (0 >= 0)
              return H.ioore(pointsFrustum, 0);
            pointsFrustum[0].storage[2] = nearZ;
            return H.ioore(pointsFrustum, 1);
            pointsFrustum[1].storage[2] = nearZ;
            return H.ioore(pointsFrustum, 2);
            pointsFrustum[2].storage[2] = nearZ;
            return H.ioore(pointsFrustum, 3);
            pointsFrustum[3].storage[2] = nearZ;
            return H.ioore(pointsFrustum, 4);
            pointsFrustum[4].storage[2] = farZ;
            return H.ioore(pointsFrustum, 5);
            pointsFrustum[5].storage[2] = farZ;
            return H.ioore(pointsFrustum, 6);
            pointsFrustum[6].storage[2] = farZ;
            return H.ioore(pointsFrustum, 7);
            pointsFrustum[7].storage[2] = farZ;
            lights.push(virtualLight);
          }
        else
          lights.push(light);
      }
      il = lights.length;
      for (t1 = this._frustum, i = 0, j = null, jl = null, shadowMap = null, shadowMatrix = null, shadowCamera = null, buffer = null, material = null, webglObject = null, object = null, renderList = null; i < il; ++i) {
        if (i >= lights.length)
          return H.ioore(lights, i);
        light = lights[i];
        if (light.get$shadowMap() == null) {
          shadowFilter = this._renderer.shadowMapType === 2 ? 3 : 6;
          t2 = new S.WebGLRenderTarget(light.get$shadowMapWidth(), light.get$shadowMapHeight(), null, null, true, true, true, null, null, null, null, null, null, 1, 1, shadowFilter, shadowFilter, 18, 10, 1, null, null, null, null, null, null, null, 4, [], null);
          t2.Texture$9(null, null, 1, 1, shadowFilter, shadowFilter, 18, 10, 1);
          if (t2.three$WebGLRenderTarget$offset == null)
            t2.three$WebGLRenderTarget$offset = new T.Vector2(new Float32Array(2));
          if (t2.three$WebGLRenderTarget$repeat == null) {
            t3 = new Float32Array(2);
            t3[0] = 1;
            t3[1] = 1;
            t2.three$WebGLRenderTarget$repeat = new T.Vector2(t3);
          }
          light.set$shadowMap(t2);
          t2 = light.get$shadowMapWidth();
          t3 = light.get$shadowMapHeight();
          t4 = new Float32Array(2);
          t4[0] = t2;
          t4[1] = t3;
          light.set$shadowMapSize(new T.Vector2(t4));
          t2 = new T.Matrix4(new Float32Array(16));
          t2.setIdentity$0();
          light.set$shadowMatrix(t2);
        }
        if (light.get$shadowCamera() == null) {
          if (!!J.getInterceptor(light).$isDirectionalLight) {
            t2 = light.shadowCameraLeft;
            t3 = light.shadowCameraRight;
            t4 = light.shadowCameraTop;
            t5 = light.shadowCameraBottom;
            t6 = light.shadowCameraNear;
            t7 = light.shadowCameraFar;
            t8 = new T.Matrix4(new Float32Array(16));
            t8.setIdentity$0();
            t9 = new T.Matrix4(new Float32Array(16));
            t9.setIdentity$0();
            t10 = new T.Matrix4(new Float32Array(16));
            t10.setIdentity$0();
            t11 = $.Object3DCount;
            $.Object3DCount = t11 + 1;
            t12 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            t13 = new Float32Array(3);
            t13[0] = 0;
            t13[1] = 1;
            t13[2] = 0;
            t14 = new Float32Array(3);
            t14[0] = 0;
            t14[1] = 0;
            t14[2] = 0;
            t15 = new Float32Array(3);
            t15[0] = 0;
            t15[1] = 0;
            t15[2] = 0;
            t16 = new Float32Array(3);
            t16[0] = 1;
            t16[1] = 1;
            t16[2] = 1;
            t17 = new T.Matrix4(new Float32Array(16));
            t17.setIdentity$0();
            t18 = new T.Matrix4(new Float32Array(16));
            t18.setIdentity$0();
            t19 = new T.Matrix4(new Float32Array(16));
            t19.setIdentity$0();
            t20 = new Float32Array(4);
            t20[3] = 1;
            t21 = new Float32Array(3);
            T.setOrthographicMatrix(t9, t2, t3, t5, t4, t6, t7);
            light.shadowCamera = new S.OrthographicCamera(t2, t3, t4, t5, t8, t9, t10, t6, t7, t11, "", t12, null, [], new T.Vector3(t13), new T.Vector3(t14), new T.Vector3(t15), new T.Vector3(t16), "XYZ", null, null, null, true, null, t17, t18, t19, true, true, new T.Quaternion(t20), false, 0, 1, true, false, false, true, new T.Vector3(t21), null, null);
          } else {
            H.printString("Unsupported light type for shadow");
            continue;
          }
          scene.add$1(0, light.get$shadowCamera());
          if (this._renderer.autoUpdateScene)
            scene.updateMatrixWorld$0();
        }
        if (light.get$shadowCameraVisible() && light.get$cameraHelper() == null) {
          t2 = light.get$shadowCamera();
          t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          t4 = S.Geometry$();
          t5 = new S.Color(1, 1, 1);
          t5.setHex$1(16777215);
          t6 = $.MaterialCount;
          $.MaterialCount = t6 + 1;
          t6 = new S.LineBasicMaterial(t5, 1, "round", "round", true, 1, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
          t5 = $.Object3DCount;
          $.Object3DCount = t5 + 1;
          t7 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          t8 = new Float32Array(3);
          t8[0] = 0;
          t8[1] = 1;
          t8[2] = 0;
          t9 = new Float32Array(3);
          t9[0] = 0;
          t9[1] = 0;
          t9[2] = 0;
          t10 = new Float32Array(3);
          t10[0] = 0;
          t10[1] = 0;
          t10[2] = 0;
          t11 = new Float32Array(3);
          t11[0] = 1;
          t11[1] = 1;
          t11[2] = 1;
          t12 = new T.Matrix4(new Float32Array(16));
          t12.setIdentity$0();
          t13 = new T.Matrix4(new Float32Array(16));
          t13.setIdentity$0();
          t14 = new T.Matrix4(new Float32Array(16));
          t14.setIdentity$0();
          t15 = new Float32Array(4);
          t15[3] = 1;
          t3 = new S.CameraHelper(t2, null, false, t3, t4, t6, 1, t5, "", t7, null, [], new T.Vector3(t8), new T.Vector3(t9), new T.Vector3(t10), new T.Vector3(t11), "XYZ", null, null, null, true, null, t12, t13, t14, true, true, new T.Quaternion(t15), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null);
          t3.Line$3(t4, t6, 1);
          t3.CameraHelper$1(t2);
          light.set$cameraHelper(t3);
          light.get$shadowCamera().add$1(0, light.get$cameraHelper());
        }
        t2 = J.getInterceptor(light);
        if (!!t2.$isVirtualLight)
          virtualLight.get$originalCamera();
        shadowMap = light.get$shadowMap();
        shadowMatrix = light.get$shadowMatrix();
        shadowCamera = light.get$shadowCamera();
        shadowCamera.position = light.get$matrixWorld().getTranslation$0();
        t2 = t2.get$target(light).get$matrixWorld().getTranslation$0();
        S.makeLookAt(shadowCamera.matrix, shadowCamera.position, t2, shadowCamera.up);
        if (shadowCamera.rotationAutoUpdate)
          shadowCamera.rotation = S.calcEulerFromRotationMatrix(shadowCamera.matrix, shadowCamera.eulerOrder);
        shadowCamera.updateMatrixWorld$0();
        t2 = shadowCamera.matrixWorldInverse;
        t2.copyInverse$1(shadowCamera.matrixWorld);
        if (light.get$cameraHelper() != null)
          light.get$cameraHelper().visible = light.get$shadowCameraVisible();
        if (light.get$shadowCameraVisible())
          light.get$cameraHelper().update$0(0);
        shadowMatrix.setValues$16(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
        shadowMatrix.multiply$1(0, shadowCamera.projectionMatrix);
        shadowMatrix.multiply$1(0, t2);
        t3 = shadowCamera.projectionMatrix.$mul(0, t2);
        this._projScreenMatrix = t3;
        t1.setFromMatrix$1(t3);
        this._renderer.setRenderTarget$1(shadowMap);
        this._renderer.clear$0(0);
        t3 = scene.__data;
        if (t3 == null) {
          t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          scene.__data = t3;
        }
        renderList = t3.$index(0, "__webglObjects");
        t3 = J.getInterceptor$asx(renderList);
        jl = t3.get$length(renderList);
        if (typeof jl !== "number")
          return H.iae(jl);
        j = 0;
        for (; j < jl; ++j) {
          webglObject = t3.$index(renderList, j);
          object = webglObject.get$object();
          webglObject.set$render(false);
          t4 = J.getInterceptor$x(object);
          if (t4.get$visible(object) === true && object.get$castShadow()) {
            if (!!t4.$isMesh)
              t4 = !object.frustumCulled || t1.contains$1(0, object);
            else
              t4 = true;
            if (t4) {
              webglObject.set$_modelViewMatrix(t2.$mul(0, object.get$matrixWorld()));
              webglObject.set$render(true);
            }
          }
        }
        jl = t3.get$length(renderList);
        if (typeof jl !== "number")
          return H.iae(jl);
        j = 0;
        objectMaterial = null;
        useMorphing = null;
        useSkinning = null;
        for (; j < jl; ++j) {
          webglObject = t3.$index(renderList, j);
          if (webglObject.get$render() === true) {
            object = webglObject.get$object();
            buffer = J.get$buffer$x(webglObject);
            if (!!J.getInterceptor(object.get$material()).$isMeshFaceMaterial) {
              t4 = object.get$geometry().materials;
              if (0 >= t4.length)
                return H.ioore(t4, 0);
              objectMaterial = t4[0];
            } else
              objectMaterial = object.get$material();
            object.get$geometry().morphTargets;
            object.get$customDepthMaterial();
            material = this._depthMaterial;
            this._renderer.renderBuffer$6(shadowCamera, scene.lights, null, material, buffer, object);
            useMorphing = false;
            useSkinning = false;
          }
        }
        t3 = scene.__data;
        if (t3 == null) {
          t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          scene.__data = t3;
        }
        renderList = t3.$index(0, "__webglObjectsImmediate");
        t3 = J.getInterceptor$asx(renderList);
        jl = t3.get$length(renderList);
        if (typeof jl !== "number")
          return H.iae(jl);
        j = 0;
        for (; j < jl; ++j) {
          webglObject = t3.$index(renderList, j);
          object = webglObject.get$object();
          if (J.get$visible$x(object) === true && object.get$castShadow()) {
            object.get$_modelViewMatrix().multiply$2(0, t2, object.get$matrixWorld());
            this._renderer.renderImmediateObject$5(shadowCamera, scene.lights, null, this._depthMaterial, object);
          }
        }
      }
      t1 = this._renderer;
      clearColor = t1._clearColor;
      clearAlpha = t1._clearAlpha;
      J.clearColor$4$x(this._gl, clearColor._r, clearColor._g, clearColor._b, clearAlpha);
      J.enable$1$x(this._gl, 3042);
      if (this._renderer.shadowMapCullFrontFaces === 2)
        J.cullFace$1$x(this._gl, 1029);
    },
    createVirtualLight$2: function(light, cascade) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, virtualLight, i, nearZ, farZ;
      t1 = new S.Color(1, 1, 1);
      t1.setHex$1(0);
      t2 = $.Object3DCount;
      $.Object3DCount = t2 + 1;
      t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t4 = new Float32Array(3);
      t4[0] = 0;
      t4[1] = 1;
      t4[2] = 0;
      t5 = new Float32Array(3);
      t5[0] = 0;
      t5[1] = 0;
      t5[2] = 0;
      t6 = new Float32Array(3);
      t6[0] = 0;
      t6[1] = 0;
      t6[2] = 0;
      t7 = new Float32Array(3);
      t7[0] = 1;
      t7[1] = 1;
      t7[2] = 1;
      t8 = new T.Matrix4(new Float32Array(16));
      t8.setIdentity$0();
      t9 = new T.Matrix4(new Float32Array(16));
      t9.setIdentity$0();
      t10 = new T.Matrix4(new Float32Array(16));
      t10.setIdentity$0();
      t11 = new Float32Array(4);
      t11[3] = 1;
      virtualLight = new S.VirtualLight([], [], null, null, 1, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, false, false, 50, 5000, 50, false, 0, 0.5, 512, 512, null, null, null, null, null, t1, t2, "", t3, null, [], new T.Vector3(t4), new T.Vector3(t5), new T.Vector3(t6), new T.Vector3(t7), "XYZ", null, null, null, true, null, t8, t9, t10, true, true, new T.Quaternion(t11), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(3)), null, null);
      virtualLight.DirectionalLight$3(0, 1, 0);
      virtualLight.onlyShadow = true;
      virtualLight.three$ShadowCaster$castShadow = true;
      virtualLight.shadowCameraNear = light.shadowCameraNear;
      virtualLight.shadowCameraFar = light.shadowCameraFar;
      virtualLight.shadowCameraLeft = light.shadowCameraLeft;
      virtualLight.shadowCameraRight = light.shadowCameraRight;
      virtualLight.shadowCameraBottom = light.shadowCameraBottom;
      virtualLight.shadowCameraTop = light.shadowCameraTop;
      virtualLight.shadowCameraVisible = light.shadowCameraVisible;
      virtualLight.shadowDarkness = light.shadowDarkness;
      t1 = light.shadowCascadeBias;
      if (cascade >= 3)
        return H.ioore(t1, cascade);
      virtualLight.shadowBias = t1[cascade];
      virtualLight.shadowMapWidth = light.shadowCascadeWidth[cascade];
      virtualLight.shadowMapHeight = light.shadowCascadeHeight[cascade];
      t1 = [];
      virtualLight.pointsWorld = t1;
      t2 = [];
      virtualLight.pointsFrustum = t2;
      for (i = 0; i < 8; ++i) {
        t3 = new Float32Array(3);
        if (i >= 0)
          return H.ioore(t1, i);
        t1[i] = new T.Vector3(t3);
        t2[i] = new T.Vector3(new Float32Array(3));
      }
      nearZ = light.shadowCascadeNearZ[cascade];
      farZ = light.shadowCascadeFarZ[cascade];
      if (0 >= 0)
        return H.ioore(t2, 0);
      t2[0].set$3(-1, -1, nearZ);
      return H.ioore(t2, 1);
      t2[1].set$3(1, -1, nearZ);
      return H.ioore(t2, 2);
      t2[2].set$3(-1, 1, nearZ);
      return H.ioore(t2, 3);
      t2[3].set$3(1, 1, nearZ);
      return H.ioore(t2, 4);
      t2[4].set$3(-1, -1, farZ);
      return H.ioore(t2, 5);
      t2[5].set$3(1, -1, farZ);
      return H.ioore(t2, 6);
      t2[6].set$3(-1, 1, farZ);
      return H.ioore(t2, 7);
      t2[7].set$3(1, 1, farZ);
      return virtualLight;
    },
    static: {"^": "ShadowMapPlugin___projector"}
  },
  VirtualLight: {
    "^": "DirectionalLight;pointsWorld,pointsFrustum,three$DirectionalLight$position,target,intensity,distance,shadowCameraLeft,shadowCameraRight,shadowCameraTop,shadowCameraBottom,shadowCascade,shadowCascadeOffset,shadowCascadeCount,shadowCascadeBias,shadowCascadeWidth,shadowCascadeHeight,shadowCascadeNearZ,shadowCascadeFarZ,shadowCascadeArray,three$ShadowCaster$castShadow,onlyShadow,shadowCameraNear,shadowCameraFar,shadowCameraFov,shadowCameraVisible,shadowBias,shadowDarkness,shadowMapWidth,shadowMapHeight,shadowMap,shadowMapSize,shadowCamera,shadowMatrix,cameraHelper,color,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    $isVirtualLight: true
  },
  Camera: {
    "^": "Object3D;matrixWorldInverse<,projectionMatrix<,projectionMatrixInverse<,near<,far<,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    $isCamera: true,
    static: {Camera$: function(near, far) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
        t1 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t1.setIdentity$0();
        t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t2.setIdentity$0();
        t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t3.setIdentity$0();
        t4 = $.Object3DCount;
        $.Object3DCount = t4 + 1;
        t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t6.setValues$3(0, 1, 0);
        t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t7.setValues$3(0, 0, 0);
        t8 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t8.setValues$3(0, 0, 0);
        t9 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t9.setValues$3(1, 1, 1);
        t10 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t10.setIdentity$0();
        t11 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t11.setIdentity$0();
        t12 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t12.setIdentity$0();
        return new S.Camera(t1, t2, t3, near, far, t4, "", t5, null, [], t6, t7, t8, t9, "XYZ", null, null, null, true, null, t10, t11, t12, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
      }}
  },
  OrthographicCamera: {
    "^": "Camera;left,right,top,bottom,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data"
  },
  PerspectiveCamera: {
    "^": "Camera;fov,aspect,_fullWidth,_fullHeight,_three$_x,_three$_y,_width,_height,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    updateProjectionMatrix$0: function() {
      var t1, height, width, view;
      t1 = this.near;
      height = Math.tan(H.checkNum(this.fov * 0.017453292519943295 * 0.5)) * t1;
      width = height * this.aspect;
      view = new T.Matrix4(new Float32Array(H._checkLength(16)));
      T.setFrustumMatrix(view, -width, width, -height, height, t1, this.far);
      this.projectionMatrix = view;
    }
  },
  Color: {
    "^": "Object;_r,_g,_b",
    get$r: function(_) {
      return this._r;
    },
    get$g: function() {
      return this._g;
    },
    get$b: function(_) {
      return this._b;
    },
    copy$1: function(color) {
      this._r = color.get$r(color);
      this._g = color.get$g();
      this._b = color.get$b(color);
      return this;
    },
    copyGammaToLinear$1: function(color) {
      var t1 = J.getInterceptor$x(color);
      this._r = t1.get$r(color) * t1.get$r(color);
      this._g = color.get$g() * color.get$g();
      this._b = t1.get$b(color) * t1.get$b(color);
      return this;
    },
    setRGB$3: function(newR, newG, newB) {
      this._r = J.toDouble$0$n(newR);
      this._g = J.toDouble$0$n(newG);
      this._b = J.toDouble$0$n(newB);
      return this;
    },
    setHex$1: function(hex) {
      var h = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(hex)));
      this._r = ((h & 16711680) >>> 16) / 255;
      this._g = ((h & 65280) >>> 8) / 255;
      this._b = (h & 255) / 255;
      return this;
    },
    getHex$0: function() {
      return (C.JSNumber_methods.toInt$0(Math.floor(this._r * 255)) << 16 ^ C.JSNumber_methods.toInt$0(Math.floor(this._g * 255)) << 8 ^ C.JSNumber_methods.toInt$0(Math.floor(this._b * 255))) >>> 0;
    },
    clone$0: function(_) {
      return S.Color$(null).setRGB$3(this._r, this._g, this._b);
    },
    Color$1: function(hex) {
      if (typeof hex === "number")
        this.setHex$1(hex);
    },
    $isColor: true,
    static: {Color$: function(hex) {
        var t1 = new S.Color(1, 1, 1);
        t1.Color$1(hex);
        return t1;
      }}
  },
  Face: {
    "^": "Object;indices<,normal@,vertexNormals<,vertexColors<,vertexTangents<,color>,materialIndex<,centroid@",
    get$size: function(_) {
      return this.indices.length;
    },
    setFrom$1: function(other) {
      this.normal.setFrom$1(other.get$normal());
      this.color.copy$1(other.get$color(other));
      this.centroid.setFrom$1(other.get$centroid());
      this.materialIndex = other.get$materialIndex();
      this.vertexNormals = H.setRuntimeTypeInfo(new H.MappedListIterable(other.get$vertexNormals(), new S.Face_setFrom_closure()), [null, null]).toList$0(0);
      this.vertexColors = H.setRuntimeTypeInfo(new H.MappedListIterable(other.get$vertexColors(), new S.Face_setFrom_closure0()), [null, null]).toList$0(0);
      this.vertexTangents = H.setRuntimeTypeInfo(new H.MappedListIterable(other.get$vertexTangents(), new S.Face_setFrom_closure1()), [null, null]).toList$0(0);
      return this;
    },
    Face$4: function(indices, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
      this.normal = new T.Vector3(new Float32Array(H._checkLength(3)));
      this.vertexNormals = !!J.getInterceptor(normalOrVertexNormals).$isList ? normalOrVertexNormals : [];
      this.color = S.Color$(null);
      this.vertexColors = [];
      this.vertexTangents = [];
      this.centroid = new T.Vector3(new Float32Array(H._checkLength(3)));
    }
  },
  Face_setFrom_closure: {
    "^": "Closure:91;",
    call$1: [function(v) {
      return J.clone$0$x(v);
    }, "call$1", null, 2, 0, null, 90, "call"]
  },
  Face_setFrom_closure0: {
    "^": "Closure:91;",
    call$1: [function(v) {
      return J.clone$0$x(v);
    }, "call$1", null, 2, 0, null, 90, "call"]
  },
  Face_setFrom_closure1: {
    "^": "Closure:91;",
    call$1: [function(v) {
      return J.clone$0$x(v);
    }, "call$1", null, 2, 0, null, 90, "call"]
  },
  Face3: {
    "^": "Face;indices,normal,vertexNormals,vertexColors,vertexTangents,color,materialIndex,centroid",
    get$a: function(_) {
      var t1 = this.indices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    get$b: function(_) {
      var t1 = this.indices;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    get$c: function(_) {
      var t1 = this.indices;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    clone$0: function(_) {
      var t1, t2, t3, t4;
      t1 = this.indices;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1 = [t3, t4, t1[2]];
      t4 = new S.Face3(t1, null, null, null, null, null, null, null);
      t4.Face$4(t1, null, null, null);
      return t4.setFrom$1(this);
    }
  },
  Face4: {
    "^": "Face;indices,normal,vertexNormals,vertexColors,vertexTangents,color,materialIndex,centroid",
    get$a: function(_) {
      var t1 = this.indices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    get$b: function(_) {
      var t1 = this.indices;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    get$c: function(_) {
      var t1 = this.indices;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return t1[2];
    },
    get$d: function(_) {
      var t1 = this.indices;
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      return t1[3];
    },
    clone$0: function(_) {
      var t1, t2, t3, t4, t5;
      t1 = this.indices;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t3 = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      t4 = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      t5 = t1[2];
      if (3 >= t2)
        return H.ioore(t1, 3);
      t1 = [t3, t4, t5, t1[3]];
      t5 = new S.Face4(t1, null, null, null, null, null, null, null);
      t5.Face$4(t1, null, null, null);
      return t5.setFrom$1(this);
    }
  },
  Frustum: {
    "^": "Object;planes",
    setFromMatrix$1: function(m) {
      var me0, me1, me2, me3, me4, me5, me6, me7, me8, me9, me10, me11, me12, me13, me14, me15, t1, i, plane, t2, t3, t4, divisor;
      me0 = m.$index(0, 0);
      me1 = m.$index(0, 1);
      me2 = m.$index(0, 2);
      me3 = m.$index(0, 3);
      me4 = m.$index(0, 4);
      me5 = m.$index(0, 5);
      me6 = m.$index(0, 6);
      me7 = m.$index(0, 7);
      me8 = m.$index(0, 8);
      me9 = m.$index(0, 9);
      me10 = m.$index(0, 10);
      me11 = m.$index(0, 11);
      me12 = m.$index(0, 12);
      me13 = m.$index(0, 13);
      me14 = m.$index(0, 14);
      me15 = m.$index(0, 15);
      t1 = this.planes;
      t1[0].setValues$4(me3 - me0, me7 - me4, me11 - me8, me15 - me12);
      t1[1].setValues$4(me3 + me0, me7 + me4, me11 + me8, me15 + me12);
      t1[2].setValues$4(me3 + me1, me7 + me5, me11 + me9, me15 + me13);
      t1[3].setValues$4(me3 - me1, me7 - me5, me11 - me9, me15 - me13);
      t1[4].setValues$4(me3 - me2, me7 - me6, me11 - me10, me15 - me14);
      t1[5].setValues$4(me3 + me2, me7 + me6, me11 + me10, me15 + me14);
      for (i = 0; i < 6; ++i) {
        plane = t1[i];
        t2 = plane.storage;
        t3 = t2[0];
        t4 = t2[1];
        t2 = t2[2];
        divisor = Math.sqrt(t3 * t3 + t4 * t4 + t2 * t2);
        if (divisor > 0)
          plane.scale$1(0, 1 / divisor);
      }
    },
    contains$1: function(_, object) {
      var m, t1, radius, i;
      m = object.get$matrixWorld();
      t1 = object.get$geometry().boundingSphere.radius;
      if (typeof t1 !== "number")
        return t1.$negate();
      radius = -t1 * Math.sqrt(H.checkNum(P.max(m.$index(0, 0) * m.$index(0, 0) + m.$index(0, 1) * m.$index(0, 1) + m.$index(0, 2) * m.$index(0, 2), P.max(m.$index(0, 4) * m.$index(0, 4) + m.$index(0, 5) * m.$index(0, 5) + m.$index(0, 6) * m.$index(0, 6), m.$index(0, 8) * m.$index(0, 8) + m.$index(0, 9) * m.$index(0, 9) + m.$index(0, 10) * m.$index(0, 10)))));
      for (t1 = this.planes, i = 0; i < 6; ++i)
        if (t1[i].storage[0] * m.$index(0, 12) + t1[i].storage[1] * m.$index(0, 13) + t1[i].storage[2] * m.$index(0, 14) + t1[i].storage[3] <= radius)
          return false;
      return true;
    },
    static: {"^": "Frustum____v1", Frustum$: function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t1.setValues$4(0, 0, 0, 1);
        t2 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t2.setValues$4(0, 0, 0, 1);
        t3 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t3.setValues$4(0, 0, 0, 1);
        t4 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t4.setValues$4(0, 0, 0, 1);
        t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t5.setValues$4(0, 0, 0, 1);
        t6 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t6.setValues$4(0, 0, 0, 1);
        return new S.Frustum([t1, t2, t3, t4, t5, t6]);
      }}
  },
  Geometry: {
    "^": "Object;id*,name*,vertices@,colors<,normals,materials<,faces<,faceUvs,faceVertexUvs<,morphTargets<,morphColors,morphNormals<,skinWeights<,skinIndices<,lineDistances<,__tmpVertices,boundingBox,boundingSphere,hasTangents<,_dynamic,bones,animation,__data",
    get$isDynamic: function() {
      return this._dynamic;
    },
    applyMatrix$1: function(matrix) {
      var matrixRotation = new T.Matrix4(new Float32Array(H._checkLength(16)));
      matrixRotation.setIdentity$0();
      S.extractRotation(matrixRotation, matrix);
      J.forEach$1$ax(this.vertices, new S.Geometry_applyMatrix_closure(matrix));
      C.JSArray_methods.forEach$1(this.faces, new S.Geometry_applyMatrix_closure0(matrix, matrixRotation));
    },
    computeCentroids$0: function() {
      C.JSArray_methods.forEach$1(this.faces, new S.Geometry_computeCentroids_closure(this));
    },
    computeFaceNormals$0: function() {
      C.JSArray_methods.forEach$1(this.faces, new S.Geometry_computeFaceNormals_closure(this));
    },
    computeBoundingSphere$0: function() {
      var t1 = {};
      t1.radiusSq_0 = null;
      this.boundingSphere = new S.BoundingSphere(Math.sqrt(H.checkNum(J.fold$2$ax(this.vertices, 0, new S.Geometry_computeBoundingSphere_closure(t1)))));
    },
    mergeVertices$0: function() {
      var verticesMap, unique, changes, precision, il, i, v, t1, key, t2;
      verticesMap = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      unique = [];
      changes = [];
      H.checkNum(10);
      H.checkNum(4);
      precision = Math.pow(10, 4);
      il = J.get$length$asx(this.vertices);
      for (i = 0; i < il; ++i) {
        v = J.$index$asx(this.vertices, i);
        t1 = J.getInterceptor$x(v);
        key = C.JSArray_methods.join$1([C.JSInt_methods.toStringAsFixed$1(J.round$0$n(J.$mul$ns(t1.get$x(v), precision)), 0), C.JSInt_methods.toStringAsFixed$1(J.round$0$n(J.$mul$ns(t1.get$y(v), precision)), 0), C.JSInt_methods.toStringAsFixed$1(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(J.$mul$ns(t1.get$z(v), precision))), 0)], "_");
        if (verticesMap.$index(0, key) == null) {
          verticesMap.$indexSet(0, key, i);
          unique.push(v);
          changes.push(unique.length - 1);
        } else {
          t1 = verticesMap.$index(0, key);
          if (t1 >>> 0 !== t1 || t1 >= changes.length)
            return H.ioore(changes, t1);
          changes.push(changes[t1]);
        }
      }
      C.JSArray_methods.forEach$1(this.faces, new S.Geometry_mergeVertices_closure(changes));
      t1 = J.get$length$asx(this.vertices);
      t2 = unique.length;
      this.vertices = unique;
      return t1 - t2;
    },
    clone$0: function(_) {
    },
    get$_data: function() {
      var t1 = this.__data;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.__data = t1;
      }
      return t1;
    },
    $index: function(_, key) {
      return this.get$_data().$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this.get$_data().$indexSet(0, key, value);
      return value;
    },
    $isGeometry: true,
    static: {Geometry$: function() {
        var t1 = $.GeometryCount;
        $.GeometryCount = t1 + 1;
        return new S.Geometry(t1, "", H.setRuntimeTypeInfo([], [T.Vector3]), [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
      }}
  },
  Geometry_applyMatrix_closure: {
    "^": "Closure:39;matrix_0",
    call$1: [function(vertex) {
      return vertex.applyProjection$1(this.matrix_0);
    }, "call$1", null, 2, 0, null, 92, "call"]
  },
  Geometry_applyMatrix_closure0: {
    "^": "Closure:39;matrix_1,matrixRotation_2",
    call$1: function(face) {
      var t1 = this.matrixRotation_2;
      face.get$normal().applyProjection$1(t1);
      C.JSArray_methods.forEach$1(face.get$vertexNormals(), new S.Geometry_applyMatrix__closure(t1));
      face.get$centroid().applyProjection$1(this.matrix_1);
    }
  },
  Geometry_applyMatrix__closure: {
    "^": "Closure:39;matrixRotation_3",
    call$1: function(normal) {
      return normal.applyProjection$1(this.matrixRotation_3);
    }
  },
  Geometry_computeCentroids_closure: {
    "^": "Closure:93;this_0",
    call$1: function(face) {
      face.get$centroid().setValues$3(0, 0, 0);
      C.JSArray_methods.forEach$1(face.get$indices(), new S.Geometry_computeCentroids__closure(this.this_0, face));
      face.set$centroid(face.get$centroid().$div(0, J.toDouble$0$n(J.get$size$x(face))));
    }
  },
  Geometry_computeCentroids__closure: {
    "^": "Closure:39;this_1,face_2",
    call$1: function(idx) {
      this.face_2.get$centroid().add$1(0, J.$index$asx(this.this_1.vertices, idx));
    }
  },
  Geometry_computeFaceNormals_closure: {
    "^": "Closure:39;this_0",
    call$1: function(face) {
      var t1, t2, vA, vB, cb;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(face);
      vA = J.$index$asx(t1.vertices, t2.get$a(face));
      vB = J.$index$asx(t1.vertices, t2.get$b(face));
      cb = J.$sub$n(J.$index$asx(t1.vertices, t2.get$c(face)), vB).cross$1(J.$sub$n(vA, vB));
      J.normalize$0$x(cb);
      face.set$normal(cb);
    }
  },
  Geometry_computeBoundingSphere_closure: {
    "^": "Closure:95;box_0",
    call$2: [function(curMaxRadiusSq, vertex) {
      var radiusSq, t1;
      radiusSq = vertex.get$length2();
      this.box_0.radiusSq_0 = radiusSq;
      if (typeof curMaxRadiusSq !== "number")
        return H.iae(curMaxRadiusSq);
      if (radiusSq > curMaxRadiusSq)
        t1 = radiusSq;
      else
        t1 = curMaxRadiusSq;
      return t1;
    }, "call$2", null, 4, 0, null, 94, 92, "call"]
  },
  Geometry_mergeVertices_closure: {
    "^": "Closure:93;changes_0",
    call$1: function(face) {
      var t1, t2, i, t3, t4;
      t1 = J.getInterceptor$x(face);
      t2 = this.changes_0;
      i = 0;
      while (true) {
        t3 = t1.get$size(face);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = face.get$indices();
        t4 = face.get$indices();
        if (i >= t4.length)
          return H.ioore(t4, i);
        t4 = t4[i];
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          return H.ioore(t2, t4);
        t4 = t2[t4];
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3[i] = t4;
        ++i;
      }
    }
  },
  BoundingSphere: {
    "^": "Object;radius"
  },
  Object3D: {
    "^": "Object;id*,name*,properties,parent*,children>,up,position>,rotation<,scale',eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth@,matrix,matrixWorld@,matrixRotationWorld,matrixAutoUpdate<,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible*,castShadow<,receiveShadow<,frustumCulled<,_vector,customDepthMaterial<,__data",
    get$isDynamic: function() {
      return this._dynamic;
    },
    add$1: function(_, object) {
      var t1, scene, scene0;
      t1 = J.getInterceptor(object);
      if (t1.$eq(object, this)) {
        P.print("THREE.Object3D.add: An object can't be added as a child of itself.");
        return;
      }
      if (t1.get$parent(object) != null)
        J.remove$1$ax(t1.get$parent(object), object);
      t1.set$parent(object, this);
      this.children.push(object);
      for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
        ;
      if (!!scene.$isScene)
        scene.addObject$1(object);
    },
    remove$1: function(_, object) {
      var t1, index, scene, scene0;
      t1 = this.children;
      index = H.Lists_indexOf(t1, object, 0, t1.length);
      if (index !== -1) {
        J.set$parent$x(object, null);
        C.JSArray_methods.removeAt$1(t1, index);
        for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
          ;
        if (!!scene.$isScene)
          scene.removeObject$1(object);
      }
    },
    updateMatrix$0: function() {
      var t1, t2, t3, x, y, z, a, b, c, d, e, f, ce, t4, cf, de, df, af, be, bf, ad, bc, bd, sx, sy, sz;
      t1 = this.matrix;
      if (this.useQuaternion)
        S.setRotationFromQuaternion(t1, this.quaternion);
      else {
        t2 = this.rotation;
        t3 = this.eulerOrder;
        t2 = t2.storage;
        x = t2[0];
        y = t2[1];
        z = t2[2];
        a = Math.cos(H.checkNum(x));
        b = Math.sin(H.checkNum(x));
        c = Math.cos(H.checkNum(y));
        d = Math.sin(H.checkNum(y));
        e = Math.cos(H.checkNum(z));
        f = Math.sin(H.checkNum(z));
        t2 = a * e;
        t1 = t1.storage;
        ce = c * e;
        t4 = a * c;
        switch (t3) {
          case "YXZ":
            cf = c * f;
            de = d * e;
            df = d * f;
            t1[0] = ce + df * b;
            t1[4] = de * b - cf;
            t1[8] = a * d;
            t1[1] = a * f;
            t1[5] = t2;
            t1[9] = -b;
            t1[2] = cf * b - de;
            t1[6] = df + ce * b;
            t1[10] = t4;
            break;
          case "ZXY":
            cf = c * f;
            de = d * e;
            df = d * f;
            t1[0] = ce - df * b;
            t3 = -a;
            t1[4] = t3 * f;
            t1[8] = de + cf * b;
            t1[1] = cf + de * b;
            t1[5] = t2;
            t1[9] = df - ce * b;
            t1[2] = t3 * d;
            t1[6] = b;
            t1[10] = t4;
            break;
          case "ZYX":
            af = a * f;
            be = b * e;
            bf = b * f;
            t1[0] = ce;
            t1[4] = be * d - af;
            t1[8] = t2 * d + bf;
            t1[1] = c * f;
            t1[5] = bf * d + t2;
            t1[9] = af * d - be;
            t1[2] = -d;
            t1[6] = b * c;
            t1[10] = t4;
            break;
          case "YZX":
            ad = a * d;
            bc = b * c;
            bd = b * d;
            t1[0] = ce;
            t1[4] = bd - t4 * f;
            t1[8] = bc * f + ad;
            t1[1] = f;
            t1[5] = t2;
            t1[9] = -b * e;
            t1[2] = -d * e;
            t1[6] = ad * f + bc;
            t1[10] = t4 - bd * f;
            break;
          case "XZY":
            ad = a * d;
            bc = b * c;
            bd = b * d;
            t1[0] = ce;
            t1[4] = -f;
            t1[8] = d * e;
            t1[1] = t4 * f + bd;
            t1[5] = t2;
            t1[9] = ad * f - bc;
            t1[2] = bc * f - ad;
            t1[6] = b * e;
            t1[10] = bd * f + t4;
            break;
          default:
            af = a * f;
            be = b * e;
            bf = b * f;
            t1[0] = ce;
            t1[4] = -c * f;
            t1[8] = d;
            t1[1] = af + be * d;
            t1[5] = t2 - bf * d;
            t1[9] = -b * c;
            t1[2] = bf - t2 * d;
            t1[6] = be + af * d;
            t1[10] = t4;
            break;
        }
      }
      this.matrix.setTranslation$1(this.get$position(this));
      t1 = this.scale.storage;
      sx = t1[0];
      if (sx !== 1 || t1[1] !== 1 || t1[2] !== 1) {
        t2 = this.matrix;
        sy = t1[1];
        sz = t1[2];
        t2 = t2.storage;
        t2[0] = t2[0] * sx;
        t2[1] = t2[1] * sx;
        t2[2] = t2[2] * sx;
        t2[3] = t2[3] * sx;
        t2[4] = t2[4] * sy;
        t2[5] = t2[5] * sy;
        t2[6] = t2[6] * sy;
        t2[7] = t2[7] * sy;
        t2[8] = t2[8] * sz;
        t2[9] = t2[9] * sz;
        t2[10] = t2[10] * sz;
        t2[11] = t2[11] * sz;
        t2[12] = t2[12];
        t2[13] = t2[13];
        t2[14] = t2[14];
        t2[15] = t2[15];
        this.boundRadiusScale = P.max(t1[0], P.max(t1[1], t1[2]));
      }
      this.matrixWorldNeedsUpdate = true;
    },
    updateMatrixWorld$1$force: function(force) {
      var t1, t2, t3;
      t1 = {};
      t1.force_0 = force;
      if (this.get$matrixAutoUpdate())
        this.updateMatrix$0();
      if (this.matrixWorldNeedsUpdate || t1.force_0) {
        t2 = this.parent;
        if (t2 != null)
          this.set$matrixWorld(t2.get$matrixWorld().$mul(0, this.matrix));
        else {
          t2 = this.matrix;
          t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
          t3.setFrom$1(t2);
          this.set$matrixWorld(t3);
        }
        this.matrixWorldNeedsUpdate = false;
        t1.force_0 = true;
      }
      C.JSArray_methods.forEach$1(this.children, new S.Object3D_updateMatrixWorld_closure(t1));
    },
    updateMatrixWorld$0: function() {
      return this.updateMatrixWorld$1$force(false);
    },
    localToWorld$1: function(vector) {
      return vector.applyProjection$1(this.get$matrixWorld());
    },
    clone$0: function(_) {
    },
    get$_data: function() {
      var t1 = this.__data;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.__data = t1;
      }
      return t1;
    },
    $index: function(_, key) {
      return this.get$_data().$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this.get$_data().$indexSet(0, key, value);
      return value;
    },
    static: {"^": "Object3D____m1", Object3D$: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        t1 = $.Object3DCount;
        $.Object3DCount = t1 + 1;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 1, 0);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 0, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(0, 0, 0);
        t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t6.setValues$3(1, 1, 1);
        t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t7.setIdentity$0();
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        t9 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t9.setIdentity$0();
        return new S.Object3D(t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
      }}
  },
  Object3D_updateMatrixWorld_closure: {
    "^": "Closure:39;box_0",
    call$1: function(c) {
      return c.updateMatrixWorld$1$force(this.box_0.force_0);
    }
  },
  Projector: {
    "^": "Object;_objectPool,_vertexPool,_face4Pool,_face3Pool,_linePool,_particlePool,_objectCount,_vertexCount,_face3Count,_face4Count,_lineCount,_particleCount,_object,_vertex,_line,_particle,_vector3,_vector4,_clippedVertex1PositionScreen,_clippedVertex2PositionScreen,_renderData,_viewProjectionMatrix,_modelViewProjectionMatrix,_frustum",
    unprojectVector$2: function(vector, camera) {
      var t1;
      camera.get$projectionMatrixInverse().copyInverse$1(camera.get$projectionMatrix());
      t1 = camera.get$matrixWorld().$mul(0, camera.get$projectionMatrixInverse());
      this._viewProjectionMatrix = t1;
      return vector.applyProjection$1(t1);
    },
    static: {Projector$: function() {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = new Float32Array(H._checkLength(3));
        t2 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t2.setValues$4(0, 0, 0, 1);
        t3 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t3.setIdentity$0();
        t4 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t4.setIdentity$0();
        t5 = S.Frustum$();
        t6 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t6.setValues$4(0, 0, 0, 1);
        t7 = new T.Vector4(new Float32Array(H._checkLength(4)));
        t7.setValues$4(0, 0, 0, 1);
        return new S.Projector([], [], [], [], [], [], null, null, null, null, null, null, null, null, null, null, new T.Vector3(t1), t2, t6, t7, new S.ProjectorRenderData([], [], [], []), t3, t4, t5);
      }}
  },
  ProjectorRenderData: {
    "^": "Object;objects,sprites,lights<,elements"
  },
  Ray: {
    "^": "Object;origin,direction,near<,far<,precision",
    _distanceFromIntersection$3: function(origin, direction, position) {
      var dot, t1;
      dot = position.$sub(0, origin).dot$1(direction);
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setFrom$1(direction);
      t1 = position.$sub(0, origin.$add(0, t1.scale$1(0, dot)));
      return t1.get$length(t1);
    },
    _pointInFace3$4: function(p, a, b, c) {
      var v0, v1, v2, dot00, dot01, dot02, dot11, dot12, invDenom, u, v;
      v0 = J.$sub$n(c, a);
      v1 = J.$sub$n(b, a);
      v2 = p.$sub(0, a);
      dot00 = v0.dot$1(v0);
      dot01 = v0.dot$1(v1);
      dot02 = v0.dot$1(v2);
      dot11 = v1.dot$1(v1);
      dot12 = v1.dot$1(v2);
      invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
      u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      v = (dot00 * dot12 - dot01 * dot02) * invDenom;
      return u >= 0 && v >= 0 && u + v < 1;
    },
    intersectObject$2$recursive: function(object, recursive) {
      var t1, abcd, originCopy, directionCopy, vector, normal, intersectPoint, intersects, t2, distance, t3, t4, t5, scale, vertices, geometryMaterials, isFaceMaterial, side, fl, intersect, dot, scalar, f, face, material, t6, pointInFace;
      t1 = {};
      abcd = P.List_List$generate(4, new S.Ray_intersectObject_closure(), true, null);
      originCopy = new T.Vector3(new Float32Array(H._checkLength(3)));
      directionCopy = new T.Vector3(new Float32Array(H._checkLength(3)));
      vector = new T.Vector3(new Float32Array(H._checkLength(3)));
      normal = new T.Vector3(new Float32Array(H._checkLength(3)));
      intersectPoint = new T.Vector3(new Float32Array(H._checkLength(3)));
      intersects = [];
      t2 = J.getInterceptor$x(object);
      J.get$length$asx(t2.get$children(object));
      if (recursive)
        J.forEach$1$ax(t2.get$children(object), new S.Ray_intersectObject_closure0(this, intersects));
      if (!!t2.$isMesh) {
        distance = this._distanceFromIntersection$3(this.origin, this.direction, object.matrixWorld.getTranslation$0());
        t2 = $.Frustum____v1;
        if (t2 == null) {
          t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
          $.Frustum____v1 = t2;
        }
        t3 = object.matrixWorld.getColumn$1(0);
        t3 = t3.get$length(t3);
        t4 = object.matrixWorld.getColumn$1(1);
        t4 = t4.get$length(t4);
        t5 = object.matrixWorld.getColumn$1(2);
        scale = t2.setValues$3(t3, t4, t5.get$length(t5));
        t2 = object.geometry;
        t3 = t2.boundingSphere.radius;
        t4 = scale.storage;
        t4 = P.max(t4[0], P.max(t4[1], t4[2]));
        if (typeof t3 !== "number")
          return t3.$mul();
        if (distance > t3 * t4)
          return intersects;
        vertices = t2.vertices;
        t1.objMatrix_0 = null;
        geometryMaterials = t2.materials;
        t3 = object.material;
        isFaceMaterial = !!J.getInterceptor(t3).$isMeshFaceMaterial;
        side = t3.side;
        t3 = object.matrixRotationWorld;
        S.extractRotation(t3, object.matrixWorld);
        fl = t2.faces.length;
        for (intersect = null, dot = null, scalar = null, f = 0; f < fl; ++f) {
          $.Ray_checkedFaces = $.Ray_checkedFaces + 1;
          t4 = t2.faces;
          if (f >= t4.length)
            return H.ioore(t4, f);
          face = t4[f];
          if (isFaceMaterial) {
            t4 = face.get$materialIndex();
            if (t4 >>> 0 !== t4 || t4 >= geometryMaterials.length)
              return H.ioore(geometryMaterials, t4);
            material = geometryMaterials[t4];
          } else
            material = object.material;
          if (material == null) {
            $.Ray_parallels = $.Ray_parallels + 1;
            continue;
          }
          side = material.get$side();
          originCopy.setFrom$1(this.origin);
          directionCopy.setFrom$1(this.direction);
          t1.objMatrix_0 = object.matrixWorld;
          vector.setFrom$1(face.get$centroid());
          vector.applyProjection$1(t1.objMatrix_0).sub$1(originCopy);
          normal.setFrom$1(face.get$normal());
          normal.applyProjection$1(t3);
          dot = directionCopy.dot$1(normal);
          if (Math.abs(dot) < 0.0001)
            continue;
          scalar = normal.dot$1(vector) / dot;
          if (scalar < 0)
            continue;
          if (side !== 2)
            t4 = side === 0 ? dot < 0 : dot > 0;
          else
            t4 = true;
          if (t4) {
            intersectPoint = originCopy.$add(0, directionCopy.scale$1(0, scalar));
            t4 = new H.MappedListIterable(face.get$indices(), new S.Ray_intersectObject_closure1(t1, vertices));
            t4.$builtinTypeInfo = [null, null];
            abcd = t4.toList$0(0);
            t4 = J.getInterceptor$x(face);
            if (t4.get$size(face) === 3) {
              t4 = abcd.length;
              if (0 >= t4)
                return H.ioore(abcd, 0);
              t5 = abcd[0];
              if (1 >= t4)
                return H.ioore(abcd, 1);
              t6 = abcd[1];
              if (2 >= t4)
                return H.ioore(abcd, 2);
              pointInFace = this._pointInFace3$4(intersectPoint, t5, t6, abcd[2]);
            } else if (t4.get$size(face) === 4) {
              t4 = abcd.length;
              if (0 >= t4)
                return H.ioore(abcd, 0);
              t5 = abcd[0];
              if (1 >= t4)
                return H.ioore(abcd, 1);
              t6 = abcd[1];
              if (3 >= t4)
                return H.ioore(abcd, 3);
              if (!this._pointInFace3$4(intersectPoint, t5, t6, abcd[3])) {
                t4 = abcd.length;
                if (1 >= t4)
                  return H.ioore(abcd, 1);
                t5 = abcd[1];
                if (2 >= t4)
                  return H.ioore(abcd, 2);
                t6 = abcd[2];
                if (3 >= t4)
                  return H.ioore(abcd, 3);
                pointInFace = this._pointInFace3$4(intersectPoint, t5, t6, abcd[3]);
              } else
                pointInFace = true;
            } else
              pointInFace = null;
            if (pointInFace === true) {
              t4 = originCopy.$sub(0, intersectPoint);
              t4 = t4.get$length(t4);
              t5 = new T.Vector3(new Float32Array(3));
              t5.setFrom$1(intersectPoint);
              intersect = new S.Intersect(t4, t5, face, object);
              $.Ray_intersectCount = $.Ray_intersectCount + 1;
              intersects.push(intersect);
            }
          }
        }
      }
      return intersects;
    },
    intersectObject$1: function(object) {
      return this.intersectObject$2$recursive(object, false);
    },
    intersectObjects$2$recursive: function(objects, recursive) {
      var intersects = [];
      C.JSArray_methods.forEach$1(objects, new S.Ray_intersectObjects_closure(this, recursive, intersects));
      C.JSArray_methods.checkMutable$1(intersects, "sort");
      H.IterableMixinWorkaround_sortList(intersects, new S.Ray_intersectObjects_closure0());
      return intersects;
    },
    Ray$4: function(origin, direction, near, far) {
    },
    static: {"^": "Ray_parallels,Ray_checkedFaces,Ray_intersectCount"}
  },
  Ray_intersectObject_closure: {
    "^": "Closure:39;",
    call$1: function(_) {
      return new T.Vector3(new Float32Array(H._checkLength(3)));
    }
  },
  Ray_intersectObject_closure0: {
    "^": "Closure:39;this_1,intersects_2",
    call$1: function(child) {
      C.JSArray_methods.addAll$1(this.intersects_2, this.this_1.intersectObject$1(child));
    }
  },
  Ray_intersectObject_closure1: {
    "^": "Closure:39;box_0,vertices_3",
    call$1: [function(idx) {
      return J.clone$0$x(J.$index$asx(this.vertices_3, idx)).applyProjection$1(this.box_0.objMatrix_0);
    }, "call$1", null, 2, 0, null, 96, "call"]
  },
  Ray_intersectObjects_closure: {
    "^": "Closure:39;this_0,recursive_1,intersects_2",
    call$1: function(o) {
      return C.JSArray_methods.addAll$1(this.intersects_2, this.this_0.intersectObject$2$recursive(o, this.recursive_1));
    }
  },
  Ray_intersectObjects_closure0: {
    "^": "Closure:61;",
    call$2: function(a, b) {
      return C.JSNumber_methods.compareTo$1(a.get$distance(), b.get$distance());
    }
  },
  Intersect: {
    "^": "Object;distance<,point,face<,object<"
  },
  UV: {
    "^": "Object;u<,v<",
    copy$1: function(uv) {
      this.u = uv.get$u();
      this.v = uv.get$v();
      return this;
    },
    clone$0: function(_) {
      return new S.UV(this.u, this.v);
    }
  },
  calcEulerFromRotationMatrix_closure: {
    "^": "Closure:39;",
    call$1: function(x) {
      return P.min(P.max(x, -1), 1);
    }
  },
  AmbientLight: {
    "^": "Light;color,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    $isAmbientLight: true
  },
  DirectionalLight: {
    "^": "ShadowCaster;position:three$DirectionalLight$position>,target>,intensity<,distance<,shadowCameraLeft,shadowCameraRight,shadowCameraTop,shadowCameraBottom,shadowCascade,shadowCascadeOffset<,shadowCascadeCount<,shadowCascadeBias<,shadowCascadeWidth,shadowCascadeHeight,shadowCascadeNearZ<,shadowCascadeFarZ<,shadowCascadeArray<,three$ShadowCaster$castShadow,onlyShadow,shadowCameraNear,shadowCameraFar,shadowCameraFov,shadowCameraVisible,shadowBias,shadowDarkness,shadowMapWidth,shadowMapHeight,shadowMap,shadowMapSize,shadowCamera,shadowMatrix,cameraHelper,color,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    DirectionalLight$3: function(hex, intensity, distance) {
      var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 1, 0);
      this.three$DirectionalLight$position = t1;
      this.target = S.Object3D$();
      this.shadowCameraLeft = -500;
      this.shadowCameraRight = 500;
      this.shadowCameraTop = 500;
      this.shadowCameraBottom = -500;
      this.shadowCascade = false;
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 0, -1000);
      this.shadowCascadeOffset = t1;
      this.shadowCascadeCount = 2;
      this.shadowCascadeBias = [0, 0, 0];
      this.shadowCascadeWidth = [512, 512, 512];
      this.shadowCascadeHeight = [512, 512, 512];
      this.shadowCascadeNearZ = [-1, 0.99, 0.998];
      this.shadowCascadeFarZ = [0.99, 0.998, 1];
      this.shadowCascadeArray = [];
    },
    $isDirectionalLight: true,
    static: {DirectionalLight$: function(hex, intensity, distance) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        t1 = S.Color$(hex);
        t2 = $.Object3DCount;
        $.Object3DCount = t2 + 1;
        t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 1, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(0, 0, 0);
        t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t6.setValues$3(0, 0, 0);
        t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t7.setValues$3(1, 1, 1);
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        t9 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t9.setIdentity$0();
        t10 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t10.setIdentity$0();
        t10 = new S.DirectionalLight(null, null, intensity, distance, null, null, null, null, null, null, null, null, null, null, null, null, null, false, false, 50, 5000, 50, false, 0, 0.5, 512, 512, null, null, null, null, null, t1, t2, "", t3, null, [], t4, t5, t6, t7, "XYZ", null, null, null, true, null, t8, t9, t10, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
        t10.DirectionalLight$3(hex, intensity, distance);
        return t10;
      }}
  },
  Light: {
    "^": "Object3D;color>",
    $isLight: true
  },
  ShadowCaster: {
    "^": "Light;castShadow:three$ShadowCaster$castShadow<,onlyShadow<,shadowCameraVisible<,shadowBias<,shadowDarkness<,shadowMapWidth<,shadowMapHeight<,shadowMap@,shadowMapSize@,shadowCamera<,shadowMatrix@,cameraHelper@"
  },
  RSMtlLoader: {
    "^": "Loader;baseUrl,options,crossOrigins,statusDomElement,onLoadStart,onLoadProgress,onLoadComplete,crossOrigin",
    load$1: function(_, url) {
      return W.HttpRequest_request(url, null, null, null, null, "String", null, null).then$1(new S.RSMtlLoader_load_closure(this));
    },
    _parse$1: function(text) {
      var lines, materialsInfo, info, i, line, t1, pos, key, value, ss, t2, materialCreator;
      lines = J.split$1$s(text, "\n");
      materialsInfo = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, [P.Map, P.String, null]);
      for (info = null, i = 0; i < lines.length; ++i) {
        line = J.trim$0$s(lines[i]);
        t1 = line.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return H.ioore(line, 0);
          t1 = line[0] === "#";
        } else
          t1 = true;
        if (t1)
          continue;
        pos = C.JSString_methods.indexOf$1(line, " ");
        t1 = pos >= 0;
        key = t1 ? C.JSString_methods.substring$2(line, 0, pos) : line;
        key = key.toLowerCase();
        value = C.JSString_methods.trim$0(t1 ? C.JSString_methods.substring$1(line, pos + 1) : "");
        if (key === "newmtl") {
          info = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
          info.$indexSet(0, "name", value);
          materialsInfo.$indexSet(0, value, info);
        } else if (info != null)
          if (key === "ka" || key === "kd" || key === "ks") {
            ss = value.split(" ");
            if (0 >= ss.length)
              return H.ioore(ss, 0);
            t1 = H.Primitives_parseDouble(ss[0], null);
            if (1 >= ss.length)
              return H.ioore(ss, 1);
            t2 = H.Primitives_parseDouble(ss[1], null);
            if (2 >= ss.length)
              return H.ioore(ss, 2);
            info.$indexSet(0, key, [t1, t2, H.Primitives_parseDouble(ss[2], null)]);
          } else
            info.$indexSet(0, key, value);
      }
      materialCreator = new S.MaterialCreator(this.baseUrl, this.options, materialsInfo, null, P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, S.Material), this.crossOrigins);
      materialCreator.materialsInfo = materialCreator.convert$0();
      return materialCreator;
    }
  },
  RSMtlLoader_load_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(req) {
      return this.this_0._parse$1(J.get$response$x(req));
    }, "call$1", null, 2, 0, null, 97, "call"]
  },
  MaterialCreator: {
    "^": "Object;baseUrl,options,materialsInfo,materialsIndexes<,materials<,crossOrigin",
    convert$0: function() {
      return this.materialsInfo;
    },
    preload$0: function(_) {
      var t1, t2, i, matName;
      this.materialsIndexes = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.$int);
      for (t1 = this.materialsInfo, t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)])._map, t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), t2._cell = t1._first, i = 0; t2.moveNext$0();) {
        matName = t2._collection$_current;
        this.create$1(0, matName);
        this.materialsIndexes.$indexSet(0, matName, i);
        ++i;
      }
    },
    create$1: function(_, materialName) {
      var mat, t1, t2, t3, t4, t5, t6, newMat, diffuse, prop, value, t7, t8, t9;
      mat = this.materialsInfo.$index(0, materialName);
      P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      t1 = new S.Color(1, 1, 1);
      t1.setHex$1(16777215);
      t2 = new S.Color(1, 1, 1);
      t2.setHex$1(16777215);
      t3 = new S.Color(1, 1, 1);
      t3.setHex$1(0);
      t4 = new S.Color(1, 1, 1);
      t4.setHex$1(1118481);
      t5 = new Float32Array(3);
      t6 = new T.Vector3(t5);
      t5[0] = 1;
      t5[1] = 1;
      t5[2] = 1;
      t5 = t6;
      t6 = $.MaterialCount;
      $.MaterialCount = t6 + 1;
      newMat = new S.MeshPhongMaterial(t1, t2, t3, t4, 30, false, false, false, t5, null, null, null, 1, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t1 = new Float32Array(2);
      t1[0] = 1;
      t1[1] = 1;
      newMat.normalScale = new T.Vector2(t1);
      newMat.side = 2;
      for (t1 = J.getInterceptor$x(mat), t2 = J.get$iterator$ax(t1.get$keys(mat)), t3 = this.baseUrl, t4 = J.getInterceptor$ns(t3), t5 = this.options, diffuse = null; t2.moveNext$0();) {
        prop = t2.get$current();
        value = t1.$index(mat, prop);
        switch (J.toLowerCase$0$s(prop)) {
          case "kd":
            diffuse = new S.Color(1, 1, 1);
            t6 = J.getInterceptor$asx(value);
            t7 = t6.$index(value, 0);
            t8 = t6.$index(value, 1);
            t6 = t6.$index(value, 2);
            diffuse._r = J.toDouble$0$n(t7);
            diffuse._g = J.toDouble$0$n(t8);
            diffuse._b = J.toDouble$0$n(t6);
            break;
          case "ka":
            t6 = new S.Color(1, 1, 1);
            t7 = J.getInterceptor$asx(value);
            t8 = t7.$index(value, 0);
            t9 = t7.$index(value, 1);
            t7 = t7.$index(value, 2);
            t6._r = J.toDouble$0$n(t8);
            t6._g = J.toDouble$0$n(t9);
            t6._b = J.toDouble$0$n(t7);
            newMat.ambient = t6;
            break;
          case "ks":
            t6 = new S.Color(1, 1, 1);
            t7 = J.getInterceptor$asx(value);
            t8 = t7.$index(value, 0);
            t9 = t7.$index(value, 1);
            t7 = t7.$index(value, 2);
            t6._r = J.toDouble$0$n(t8);
            t6._g = J.toDouble$0$n(t9);
            t6._b = J.toDouble$0$n(t7);
            newMat.specular = t6;
            break;
          case "map_kd":
            t6 = this.loadTexture$1(t4.$add(t3, value));
            newMat.map = t6;
            t6.wrapS = C.JSNull_methods.get$wrap(t5);
            newMat.map.wrapT = C.JSNull_methods.get$wrap(t5);
            break;
          case "ns":
            newMat.shininess = P.num_parse(value, null);
            break;
          case "d":
            if (J.$lt$n(P.num_parse(value, null), 1)) {
              newMat.transparent = true;
              newMat.opacity = P.num_parse(value, null);
            }
            break;
          default:
            break;
        }
      }
      if (diffuse != null) {
        newMat.ambient = diffuse;
        newMat.color = diffuse;
      }
      this.materials.$indexSet(0, materialName, newMat);
      return this.materials.$index(0, materialName);
    },
    loadTexture$4: function(url, mapping, onLoad, onError) {
      var t1, loader;
      t1 = {};
      t1.texture_0 = null;
      loader = S.Loader$(false);
      t1.texture_0 = loader.load$2(0, url, onLoad);
      t1 = t1.texture_0;
      t1.mapping = mapping;
      return t1;
    },
    loadTexture$1: function(url) {
      return this.loadTexture$4(url, null, null, null);
    }
  },
  MaterialCreator_loadTexture_closure: {
    "^": "Closure:39;box_0,onLoad_1,image_2",
    call$1: [function(e) {
      var t1 = this.box_0.texture_0;
      t1.image = this.image_2;
      t1.needsUpdate = true;
    }, "call$1", null, 2, 0, null, 17, "call"]
  },
  RSMtlObjLoader: {
    "^": "Object;mtlFile,objFile,object3d,meshes,matCreator,mesh,mtlLoader,objLoader,completer",
    load$0: function(_) {
      this.mtlLoader.load$1(0, this.mtlFile).then$1(this.get$MtlLoaded());
      return this.completer.future;
    },
    MtlLoaded$1: [function(_creator) {
      this.matCreator = _creator;
      J.preload$0$x(_creator);
      this.objLoader.matIndexes = this.matCreator.get$materialsIndexes();
      this.objLoader.load$1(0, this.objFile).then$1(this.get$ObjLoaded());
    }, "call$1", "get$MtlLoaded", 2, 0, 39, 98],
    ObjLoaded$1: [function(_obj) {
      var t1, t2, t3;
      this.object3d = _obj;
      t1 = J.get$values$x(this.matCreator.get$materials());
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      t2 = $.MaterialCount;
      $.MaterialCount = t2 + 1;
      t3 = this.meshes;
      C.JSArray_methods.addAll$1(t3, J.get$children$x(this.object3d));
      C.JSArray_methods.forEach$1(t3, new S.RSMtlObjLoader_ObjLoaded_closure(this));
      J.forEach$1$ax(J.get$children$x(this.object3d), new S.RSMtlObjLoader_ObjLoaded_closure0(new S.MeshFaceMaterial(t1, "", t2, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null)));
      this.completer.complete$1(0, this.object3d);
    }, "call$1", "get$ObjLoaded", 2, 0, 39, 99],
    RSMtlObjLoader$2: function(objFile, mtlFile) {
      var t1 = this.mtlFile;
      if (t1 == null) {
        t1 = this.objFile;
        t1.toString;
        H.checkString(".mtl");
        t1 = H.stringReplaceAllUnchecked(t1, ".obj", ".mtl");
      }
      this.mtlFile = t1;
      t1 = S.Object3D;
      this.completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      t1 = this.mtlFile;
      t1 = new S.RSMtlLoader(t1, null, null, null, null, null, null, "anonymous");
      t1.Loader$1(false);
      this.mtlLoader = t1;
      t1 = H.setRuntimeTypeInfo([], [P.String]);
      t1 = new S.RSObjLoader(0, t1, null, false, null, null, null, null, null, "anonymous");
      t1.Loader$1(false);
      this.objLoader = t1;
    }
  },
  RSMtlObjLoader_ObjLoaded_closure: {
    "^": "Closure:60;this_0",
    call$1: function(m) {
      var t1, t2;
      t1 = m.get$geometry();
      t2 = J.get$values$x(this.this_0.matCreator.get$materials());
      t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
      t1.materials = t2;
      return t2;
    }
  },
  RSMtlObjLoader_ObjLoaded_closure0: {
    "^": "Closure:60;combMat_1",
    call$1: function(m) {
      var t1 = this.combMat_1;
      m.set$material(t1);
      return t1;
    }
  },
  RSObjLoader: {
    "^": "Loader;facesHandledCount,unhandledLines,currentIndex,startedParsing,matIndexes,statusDomElement,onLoadStart,onLoadProgress,onLoadComplete,crossOrigin",
    load$1: function(_, url) {
      return W.HttpRequest_request(url, null, null, null, null, "String", null, null).then$1(new S.RSObjLoader_load_closure(this));
    },
    _parseIndex$2: function(vertices, index) {
      var t1;
      index = H.Primitives_parseInt(index, null, null);
      t1 = J.getInterceptor$n(index);
      return t1.$ge(index, 0) ? t1.$sub(index, 1) : t1.$add(index, vertices.length);
    },
    _create_face$6: function(a, b, c, vertices, normals, normals_inds) {
      var t1, t2, t3, face;
      t1 = this._parseIndex$2(vertices, a);
      if (t1 >>> 0 !== t1 || t1 >= vertices.length)
        return H.ioore(vertices, t1);
      t1 = vertices[t1];
      t2 = this._parseIndex$2(vertices, b);
      if (t2 >>> 0 !== t2 || t2 >= vertices.length)
        return H.ioore(vertices, t2);
      t2 = vertices[t2];
      t3 = this._parseIndex$2(vertices, c);
      if (t3 >>> 0 !== t3 || t3 >= vertices.length)
        return H.ioore(vertices, t3);
      t3 = [t1 - 1, t2 - 1, vertices[t3] - 1];
      face = new S.Face3(t3, null, null, null, null, null, null, null);
      face.Face$4(t3, null, null, null);
      t1 = this.currentIndex;
      face.materialIndex = t1 == null ? 0 : t1;
      if (normals_inds != null) {
        if (0 >= normals_inds.length)
          return H.ioore(normals_inds, 0);
        t1 = this._parseIndex$2(normals, normals_inds[0]);
        if (t1 >>> 0 !== t1 || t1 >= normals.length)
          return H.ioore(normals, t1);
        t1 = normals[t1];
        if (1 >= normals_inds.length)
          return H.ioore(normals_inds, 1);
        t2 = this._parseIndex$2(normals, normals_inds[1]);
        if (t2 >>> 0 !== t2 || t2 >= normals.length)
          return H.ioore(normals, t2);
        t2 = normals[t2];
        if (2 >= normals_inds.length)
          return H.ioore(normals_inds, 2);
        t3 = this._parseIndex$2(normals, normals_inds[2]);
        if (t3 >>> 0 !== t3 || t3 >= normals.length)
          return H.ioore(normals, t3);
        face.vertexNormals = [t1, t2, normals[t3]];
      }
      return face;
    },
    _create_face$4: function(a, b, c, vertices) {
      return this._create_face$6(a, b, c, vertices, null, null);
    },
    _create_uvs$4: function(uvs, a, b, c) {
      var t1, t2, t3;
      t1 = this._parseIndex$2(uvs, a);
      if (t1 >>> 0 !== t1 || t1 >= uvs.length)
        return H.ioore(uvs, t1);
      t1 = uvs[t1];
      t2 = this._parseIndex$2(uvs, b);
      if (t2 >>> 0 !== t2 || t2 >= uvs.length)
        return H.ioore(uvs, t2);
      t2 = uvs[t2];
      t3 = this._parseIndex$2(uvs, c);
      if (t3 >>> 0 !== t3 || t3 >= uvs.length)
        return H.ioore(uvs, t3);
      return [t1, t2, uvs[t3]];
    },
    _handle_face_line$7: function(geometry, vertices, normals, uvs, faces, uvsLine, normals_inds) {
      var t1, t2, t3, t4, t5;
      ++this.facesHandledCount;
      t1 = faces[3];
      if (t1 == null) {
        geometry.faces.push(this._create_face$6(faces[0], faces[1], faces[2], vertices, normals, normals_inds));
        if (uvsLine != null && uvsLine.length > 0) {
          t1 = geometry.faceVertexUvs;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          t2 = uvsLine.length;
          if (0 >= t2)
            return H.ioore(uvsLine, 0);
          t3 = uvsLine[0];
          if (1 >= t2)
            return H.ioore(uvsLine, 1);
          t4 = uvsLine[1];
          if (2 >= t2)
            return H.ioore(uvsLine, 2);
          J.add$1$ax(t1, this._create_uvs$4(uvs, t3, t4, uvsLine[2]));
        }
      } else {
        t2 = normals_inds != null && true;
        t3 = faces[0];
        t4 = faces[1];
        if (t2) {
          geometry.faces.push(this._create_face$6(t3, t4, t1, vertices, normals, [normals_inds[0], normals_inds[1], normals_inds[3]]));
          geometry.faces.push(this._create_face$6(faces[1], faces[2], faces[3], vertices, normals, [normals_inds[1], normals_inds[2], normals_inds[3]]));
        } else {
          geometry.faces.push(this._create_face$4(t3, t4, t1, vertices));
          geometry.faces.push(this._create_face$4(faces[1], faces[2], faces[3], vertices));
        }
        if (uvsLine != null && uvsLine.length > 0) {
          t1 = geometry.faceVertexUvs;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t2 = t1[0];
          t3 = uvsLine.length;
          if (0 >= t3)
            return H.ioore(uvsLine, 0);
          t4 = uvsLine[0];
          if (1 >= t3)
            return H.ioore(uvsLine, 1);
          t5 = uvsLine[1];
          if (3 >= t3)
            return H.ioore(uvsLine, 3);
          J.add$1$ax(t2, this._create_uvs$4(uvs, t4, t5, uvsLine[3]));
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          t5 = uvsLine.length;
          if (1 >= t5)
            return H.ioore(uvsLine, 1);
          t4 = uvsLine[1];
          if (2 >= t5)
            return H.ioore(uvsLine, 2);
          t2 = uvsLine[2];
          if (3 >= t5)
            return H.ioore(uvsLine, 3);
          J.add$1$ax(t1, this._create_uvs$4(uvs, t4, t2, uvsLine[3]));
        }
      }
    },
    _handle_face_line$5: function(geometry, vertices, normals, uvs, faces) {
      return this._handle_face_line$7(geometry, vertices, normals, uvs, faces, null, null);
    },
    _handle_face_line$6: function(geometry, vertices, normals, uvs, faces, uvsLine) {
      return this._handle_face_line$7(geometry, vertices, normals, uvs, faces, uvsLine, null);
    },
    _parse$1: function(text) {
      var t1, object, t2, t3, t4, t5, t6, t7, material, mesh;
      t1 = {};
      this.startedParsing = true;
      object = S.Object3D$();
      t1.geometry_0 = null;
      t1.material_1 = null;
      t1.mesh_2 = null;
      t2 = J.getInterceptor$asx(text);
      if (t2.contains$1(text, new H.JSSyntaxRegExp("^o ", H.JSSyntaxRegExp_makeNative("^o ", true, true, false), null, null)) === false) {
        t1.geometry_0 = S.Geometry$();
        t3 = S.Color$(16777215);
        t4 = S.Color$(16777215);
        t5 = S.Color$(0);
        t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t6.setValues$3(1, 1, 1);
        t7 = $.MaterialCount;
        $.MaterialCount = t7 + 1;
        material = new S.MeshLambertMaterial(null, t3, t4, t5, false, t6, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t7, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
        t1.material_1 = material;
        mesh = S.Mesh$(t1.geometry_0, material);
        t1.mesh_2 = mesh;
        object.add$1(0, mesh);
      }
      C.JSArray_methods.forEach$1(t2.split$1(text, "\n"), new S.RSObjLoader__parse_closure(t1, this, object, [], [], [], new H.JSSyntaxRegExp("v( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)", H.JSSyntaxRegExp_makeNative("v( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)", false, true, false), null, null), new H.JSSyntaxRegExp("vn( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)", H.JSSyntaxRegExp_makeNative("vn( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)", false, true, false), null, null), new H.JSSyntaxRegExp("vt( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)", H.JSSyntaxRegExp_makeNative("vt( +[\\d|\\.|\\+|\\-|e]+)( +[\\d|\\.|\\+|\\-|e]+)", false, true, false), null, null), new H.JSSyntaxRegExp("f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?", H.JSSyntaxRegExp_makeNative("f( +-?\\d+)( +-?\\d+)( +-?\\d+)( +-?\\d+)?", false, true, false), null, null), new H.JSSyntaxRegExp("f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?", H.JSSyntaxRegExp_makeNative("f( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+))?", false, true, false), null, null), new H.JSSyntaxRegExp("f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?", H.JSSyntaxRegExp_makeNative("f( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))( +(-?\\d+)\\/(-?\\d+)\\/(-?\\d+))?", false, true, false), null, null), new H.JSSyntaxRegExp("f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?", H.JSSyntaxRegExp_makeNative("f( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))( +(-?\\d+)\\/\\/(-?\\d+))?", false, true, false), null, null)));
      C.JSArray_methods.forEach$1(object.children, new S.RSObjLoader__parse_closure0());
      return object;
    }
  },
  RSObjLoader_load_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(req) {
      return this.this_0._parse$1(J.get$response$x(req));
    }, "call$1", null, 2, 0, null, 97, "call"]
  },
  RSObjLoader__parse_closure: {
    "^": "Closure:39;box_0,this_1,object_2,vertices_3,normals_4,uvs_5,vertex_pattern_6,normal_pattern_7,uv_pattern_8,face_pattern1_9,face_pattern2_10,face_pattern3_11,face_pattern4_12",
    call$1: function(line) {
      var result, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, material, mesh, matName;
      line = J.trim$0$s(line);
      if (!(line.length === 0 || C.JSString_methods.startsWith$1(line, "#"))) {
        result = this.vertex_pattern_6.firstMatch$1(line);
        if (result != null) {
          t1 = this.box_0;
          t2 = t1.geometry_0.vertices;
          t3 = result._match;
          if (1 >= t3.length)
            return H.ioore(t3, 1);
          t4 = H.Primitives_parseDouble(t3[1], null);
          if (2 >= t3.length)
            return H.ioore(t3, 2);
          t5 = H.Primitives_parseDouble(t3[2], null);
          if (3 >= t3.length)
            return H.ioore(t3, 3);
          t3 = H.Primitives_parseDouble(t3[3], null);
          t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t6.setValues$3(t4, t5, t3);
          J.add$1$ax(t2, t6);
          this.vertices_3.push(J.get$length$asx(t1.geometry_0.vertices));
        } else {
          result = this.normal_pattern_7.firstMatch$1(line);
          if (result != null) {
            t1 = result._match;
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            t2 = H.Primitives_parseDouble(t1[1], null);
            if (2 >= t1.length)
              return H.ioore(t1, 2);
            t3 = H.Primitives_parseDouble(t1[2], null);
            if (3 >= t1.length)
              return H.ioore(t1, 3);
            t1 = H.Primitives_parseDouble(t1[3], null);
            t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
            t4.setValues$3(t2, t3, t1);
            this.normals_4.push(t4);
          } else {
            result = this.uv_pattern_8.firstMatch$1(line);
            if (result != null) {
              t1 = result._match;
              if (1 >= t1.length)
                return H.ioore(t1, 1);
              t2 = H.Primitives_parseDouble(t1[1], null);
              if (2 >= t1.length)
                return H.ioore(t1, 2);
              this.uvs_5.push(new S.UV(t2, H.Primitives_parseDouble(t1[2], null)));
            } else {
              result = this.face_pattern1_9.firstMatch$1(line);
              if (result != null) {
                t1 = this.box_0.geometry_0;
                t2 = result._match;
                t3 = t2.length;
                if (1 >= t3)
                  return H.ioore(t2, 1);
                t4 = t2[1];
                if (2 >= t3)
                  return H.ioore(t2, 2);
                t5 = t2[2];
                if (3 >= t3)
                  return H.ioore(t2, 3);
                t6 = t2[3];
                if (4 >= t3)
                  return H.ioore(t2, 4);
                this.this_1._handle_face_line$5(t1, this.vertices_3, this.normals_4, this.uvs_5, [t4, t5, t6, t2[4]]);
              } else {
                result = this.face_pattern2_10.firstMatch$1(line);
                if (result != null) {
                  t1 = this.box_0.geometry_0;
                  t2 = result._match;
                  t3 = t2.length;
                  if (2 >= t3)
                    return H.ioore(t2, 2);
                  t4 = t2[2];
                  if (5 >= t3)
                    return H.ioore(t2, 5);
                  t5 = t2[5];
                  if (8 >= t3)
                    return H.ioore(t2, 8);
                  t6 = t2[8];
                  if (11 >= t3)
                    return H.ioore(t2, 11);
                  t7 = t2[11];
                  t8 = t2[3];
                  t9 = t2[6];
                  t10 = t2[9];
                  if (12 >= t3)
                    return H.ioore(t2, 12);
                  this.this_1._handle_face_line$6(t1, this.vertices_3, this.normals_4, this.uvs_5, [t4, t5, t6, t7], [t8, t9, t10, t2[12]]);
                } else {
                  result = this.face_pattern3_11.firstMatch$1(line);
                  if (result != null) {
                    t1 = this.box_0.geometry_0;
                    t2 = result._match;
                    t3 = t2.length;
                    if (2 >= t3)
                      return H.ioore(t2, 2);
                    t4 = t2[2];
                    if (6 >= t3)
                      return H.ioore(t2, 6);
                    t5 = t2[6];
                    if (10 >= t3)
                      return H.ioore(t2, 10);
                    t6 = t2[10];
                    if (14 >= t3)
                      return H.ioore(t2, 14);
                    t7 = t2[14];
                    t8 = t2[3];
                    t9 = t2[7];
                    t10 = t2[11];
                    if (15 >= t3)
                      return H.ioore(t2, 15);
                    t11 = t2[15];
                    t12 = t2[4];
                    t13 = t2[8];
                    t14 = t2[12];
                    if (16 >= t3)
                      return H.ioore(t2, 16);
                    this.this_1._handle_face_line$7(t1, this.vertices_3, this.normals_4, this.uvs_5, [t4, t5, t6, t7], [t8, t9, t10, t11], [t12, t13, t14, t2[16]]);
                  } else {
                    result = this.face_pattern4_12.firstMatch$1(line);
                    if (result != null) {
                      t1 = this.box_0.geometry_0;
                      t2 = result._match;
                      t3 = t2.length;
                      if (2 >= t3)
                        return H.ioore(t2, 2);
                      t4 = t2[2];
                      if (5 >= t3)
                        return H.ioore(t2, 5);
                      t5 = t2[5];
                      if (8 >= t3)
                        return H.ioore(t2, 8);
                      t6 = t2[8];
                      if (11 >= t3)
                        return H.ioore(t2, 11);
                      t7 = t2[11];
                      t8 = t2[3];
                      t9 = t2[6];
                      t10 = t2[9];
                      if (12 >= t3)
                        return H.ioore(t2, 12);
                      this.this_1._handle_face_line$7(t1, this.vertices_3, this.normals_4, this.uvs_5, [t4, t5, t6, t7], [], [t8, t9, t10, t2[12]]);
                    } else if (C.JSString_methods.contains$1(line, new H.JSSyntaxRegExp("^o ", H.JSSyntaxRegExp_makeNative("^o ", false, true, false), null, null))) {
                      t1 = this.box_0;
                      t1.geometry_0 = S.Geometry$();
                      t2 = S.Color$(16777215);
                      t3 = S.Color$(16777215);
                      t4 = S.Color$(0);
                      t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
                      t5.setValues$3(1, 1, 1);
                      t6 = $.MaterialCount;
                      $.MaterialCount = t6 + 1;
                      material = new S.MeshLambertMaterial(null, t2, t3, t4, false, t5, null, null, null, null, 0, 1, 0.98, 2, false, 1, "round", "round", false, false, false, 0, true, "", t6, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
                      t1.material_1 = material;
                      mesh = S.Mesh$(t1.geometry_0, material);
                      t1.mesh_2 = mesh;
                      mesh.name = C.JSString_methods.trim$0(C.JSString_methods.substring$1(line, 2));
                      this.object_2.add$1(0, t1.mesh_2);
                    } else if (C.JSString_methods.contains$1(line, new H.JSSyntaxRegExp("^g ", H.JSSyntaxRegExp_makeNative("^g ", false, true, false), null, null)))
                      ;
                    else if (C.JSString_methods.contains$1(line, new H.JSSyntaxRegExp("^usemtl ", H.JSSyntaxRegExp_makeNative("^usemtl ", false, true, false), null, null))) {
                      H.checkString("");
                      matName = H.stringReplaceAllUnchecked(line, "usemtl ", "");
                      t1 = this.this_1;
                      t2 = t1.matIndexes;
                      if (t2 != null && t2.containsKey$1(0, matName))
                        t1.currentIndex = t1.matIndexes.$index(0, matName);
                      else {
                        t2 = t1.currentIndex;
                        if (t2 == null)
                          t1.currentIndex = 0;
                        else
                          t1.currentIndex = J.$add$ns(t2, 1);
                      }
                    } else if (C.JSString_methods.contains$1(line, new H.JSSyntaxRegExp("^mtllib ", H.JSSyntaxRegExp_makeNative("^mtllib ", false, true, false), null, null)))
                      ;
                    else if (C.JSString_methods.contains$1(line, new H.JSSyntaxRegExp("^s ", H.JSSyntaxRegExp_makeNative("^s ", false, true, false), null, null)))
                      ;
                    else
                      this.this_1.unhandledLines.push(line);
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  RSObjLoader__parse_closure0: {
    "^": "Closure:39;",
    call$1: function(child) {
      child.get$geometry().computeFaceNormals$0();
      child.get$geometry().computeBoundingSphere$0();
    }
  },
  Loader: {
    "^": "Object;statusDomElement,onLoadStart,onLoadProgress,onLoadComplete,crossOrigin",
    Loader$1: function(showStatus) {
      this.onLoadStart = new S.Loader_closure();
      this.onLoadProgress = new S.Loader_closure0();
      this.onLoadComplete = new S.Loader_closure1();
    },
    static: {Loader$: function(showStatus) {
        var e, t1, t2, t3;
        if (showStatus) {
          e = W._ElementFactoryProvider_createElement_tag("div", null);
          t1 = J.getInterceptor$x(e);
          t2 = t1.get$style(e);
          t3 = J.getInterceptor$x(t2);
          t3.set$position(t2, "absolute");
          t3.set$right(t2, "0px");
          t3.set$top(t2, "0px");
          t3.set$fontSize(t2, "0.8em");
          t3.set$textAlign(t2, "left");
          t3.set$background(t2, "rgba(0,0,0,0.25)");
          t3.set$color(t2, "#fff");
          t3.set$width(t2, "120px");
          t3.set$padding(t2, "0.5em 0.5em 0.5em 0.5em");
          t3.set$zIndex(t2, "1000");
          t1.set$innerHtml(e, "Loading ...");
          t1 = e;
        } else
          t1 = null;
        t1 = new S.Loader(t1, null, null, null, "anonymous");
        t1.Loader$1(showStatus);
        return t1;
      }}
  },
  Loader_closure: {
    "^": "Closure:55;",
    call$0: function() {
    }
  },
  Loader_closure0: {
    "^": "Closure:39;",
    call$1: function(data) {
    }
  },
  Loader_closure1: {
    "^": "Closure:55;",
    call$0: function() {
    }
  },
  LineBasicMaterial: {
    "^": "Material;color>,linewidth<,linecap,linejoin,fog<,vertexColors<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    $isLineBasicMaterial: true
  },
  UVMapping: {
    "^": "Object;"
  },
  Material: {
    "^": "Object;name*,id*,side<,opacity>,blending<,blendSrc<,blendDst<,blendEquation>,alphaTest<,polygonOffset>,polygonOffsetFactor<,polygonOffsetUnits<,transparent@,depthTest<,depthWrite<,visible*,needsUpdate@",
    get$_data: function() {
      var t1 = this.__data;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.__data = t1;
      }
      return t1;
    },
    $index: function(_, key) {
      return this.get$_data().$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this.get$_data().$indexSet(0, key, value);
      return value;
    }
  },
  MeshBasicMaterial: {
    "^": "Material;color>,map>,lightMap<,specularMap<,envMap<,combine<,reflectivity<,refractionRatio<,shading<,wireframe<,wireframeLinewidth<,wireframeLinecap,wireframeLinejoin,skinning<,morphTargets<,vertexColors<,fog<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    map$1: function($receiver, arg0) {
      return this.map.call$1(arg0);
    },
    $isMeshBasicMaterial: true
  },
  MeshFaceMaterial: {
    "^": "Material;materials<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    $isMeshFaceMaterial: true
  },
  MeshLambertMaterial: {
    "^": "Material;_parameters,color>,ambient<,emissive<,wrapAround<,wrapRGB<,map>,lightMap<,specularMap<,envMap<,combine<,reflectivity<,refractionRatio<,shading<,wireframe<,wireframeLinewidth<,wireframeLinecap,wireframeLinejoin,skinning<,morphTargets<,morphNormals<,vertexColors<,fog<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    map$1: function($receiver, arg0) {
      return this.map.call$1(arg0);
    },
    $isMeshLambertMaterial: true
  },
  MeshPhongMaterial: {
    "^": "Material;color>,ambient<,emissive<,specular<,shininess<,metal<,perPixel<,wrapAround<,wrapRGB<,map>,lightMap<,bumpMap<,bumpScale,normalMap<,normalScale,specularMap<,envMap<,combine<,reflectivity<,refractionRatio<,shading<,wireframe<,wireframeLinewidth<,wireframeLinecap,wireframeLinejoin,skinning<,morphTargets<,morphNormals<,vertexColors<,fog<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    map$1: function($receiver, arg0) {
      return this.map.call$1(arg0);
    },
    $isMeshPhongMaterial: true
  },
  ParticleBasicMaterial: {
    "^": "Material;color>,map>,size*,sizeAttenuation<,vertexColors<,fog<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    map$1: function($receiver, arg0) {
      return this.map.call$1(arg0);
    },
    $isParticleBasicMaterial: true
  },
  ShaderMaterial: {
    "^": "Material;fragmentShader@,vertexShader@,uniforms@,shading<,wireframe<,wireframeLinewidth<,lights<,skinning<,morphTargets<,morphNormals<,vertexColors<,fog<,attributes>,defines<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
    $isShaderMaterial: true
  },
  Line: {
    "^": "Object3D;geometry<,material@,type>",
    Line$3: function(geometry, material, type) {
      var t1 = this.geometry;
      if (t1 != null)
        if (t1.boundingSphere == null)
          t1.computeBoundingSphere$0();
    },
    $isLine: true
  },
  Mesh: {
    "^": "Object3D;geometry<,material@,morphTargetBase<,morphTargetForcedOrder<,morphTargetInfluences<,_morphTargetDictionary,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    Mesh$2: function(geometry, material) {
      var t1, t2;
      if (this.material == null) {
        t1 = S.Color$(C.C__JSRandom.nextInt$1(16777215));
        t2 = $.MaterialCount;
        $.MaterialCount = t2 + 1;
        this.material = new S.MeshBasicMaterial(t1, null, null, null, null, 0, 1, 0.98, 2, true, 1, "round", "round", false, false, 0, true, "", t2, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      }
      t1 = this.geometry;
      if (t1 != null) {
        if (t1.boundingSphere == null)
          t1.computeBoundingSphere$0();
        this.boundRadius = t1.boundingSphere.radius;
        t1.morphTargets;
      }
    },
    $isMesh: true,
    static: {Mesh$: function(geometry, material) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        t1 = $.Object3DCount;
        $.Object3DCount = t1 + 1;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 1, 0);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 0, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(0, 0, 0);
        t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t6.setValues$3(1, 1, 1);
        t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t7.setIdentity$0();
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        t9 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t9.setIdentity$0();
        t9 = new S.Mesh(geometry, material, 0, null, null, null, t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
        t9.Mesh$2(geometry, material);
        return t9;
      }}
  },
  ParticleSystem: {
    "^": "Object3D;geometry<,material@,sortParticles,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    ParticleSystem$2: function(geometry, material) {
      var t1, t2;
      if (this.material == null) {
        t1 = S.Color$(C.C__JSRandom.nextDouble$0() * 16777215);
        t2 = $.MaterialCount;
        $.MaterialCount = t2 + 1;
        this.material = new S.ParticleBasicMaterial(t1, null, 1, true, 0, true, "", t2, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      }
      t1 = this.geometry;
      if (t1 != null) {
        if (t1.boundingSphere == null)
          t1.computeBoundingSphere$0();
        this.boundRadius = t1.boundingSphere.radius;
      }
      this.frustumCulled = false;
    },
    $isParticleSystem: true,
    static: {ParticleSystem$: function(geometry, material) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        t1 = $.Object3DCount;
        $.Object3DCount = t1 + 1;
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 1, 0);
        t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t4.setValues$3(0, 0, 0);
        t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t5.setValues$3(0, 0, 0);
        t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t6.setValues$3(1, 1, 1);
        t7 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t7.setIdentity$0();
        t8 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t8.setIdentity$0();
        t9 = new T.Matrix4(new Float32Array(H._checkLength(16)));
        t9.setIdentity$0();
        t9 = new S.ParticleSystem(geometry, material, false, t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, T.Quaternion$identity(), false, 0, 1, true, false, false, true, new T.Vector3(new Float32Array(H._checkLength(3))), null, null);
        t9.ParticleSystem$2(geometry, material);
        return t9;
      }}
  },
  WebGLRenderTarget: {
    "^": "Texture;width',height,offset:three$WebGLRenderTarget$offset*,repeat:three$WebGLRenderTarget$repeat*,depthBuffer,stencilBuffer,generateMipmaps:three$WebGLRenderTarget$generateMipmaps@,shareDepthFrom,__webglFramebuffer,__webglRenderbuffer,id,image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,offset,repeat,generateMipmaps,premultiplyAlpha,needsUpdate,onUpdate,flipY,unpackAlignment,mipmaps,__data",
    clone$0: function(_) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
      t1 = this.width;
      t2 = this.height;
      t3 = this.wrapS;
      t4 = this.wrapT;
      t5 = this.magFilter;
      t6 = this.anisotropy;
      t7 = this.minFilter;
      t8 = this.three$WebGLRenderTarget$offset;
      t8.toString;
      t9 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t9.setFrom$1(t8);
      t8 = this.three$WebGLRenderTarget$repeat;
      t8.toString;
      t10 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t10.setFrom$1(t8);
      t8 = this.format;
      t11 = this.type;
      t10 = new S.WebGLRenderTarget(t1, t2, t9, t10, this.depthBuffer, this.stencilBuffer, this.three$WebGLRenderTarget$generateMipmaps, this.shareDepthFrom, null, null, null, null, null, t3, t4, t5, t7, t8, t11, t6, null, null, null, null, null, null, null, 4, [], null);
      t10.Texture$9(null, null, t3, t4, t5, t7, t8, t11, t6);
      if (t10.three$WebGLRenderTarget$offset == null)
        t10.three$WebGLRenderTarget$offset = new T.Vector2(new Float32Array(H._checkLength(2)));
      if (t10.three$WebGLRenderTarget$repeat == null) {
        t1 = new Float32Array(H._checkLength(2));
        t1[0] = 1;
        t1[1] = 1;
        t10.three$WebGLRenderTarget$repeat = new T.Vector2(t1);
      }
      return t10;
    }
  },
  WebGLRenderer: {
    "^": "Object;canvas,_gl,precision,_clearColor,_clearAlpha,devicePixelRatio,alpha*,premultipliedAlpha,antialias,stencil,preserveDrawingBuffer,autoClear,autoClearColor,autoClearDepth,autoClearStencil,sortObjects,autoUpdateObjects,autoUpdateScene,gammaInput,gammaOutput,physicallyBasedShading,shadowMapEnabled,shadowMapAutoUpdate,shadowMapDebug,shadowMapCascade,shadowMapType,shadowMapCullFrontFaces,maxMorphTargets,maxMorphNormals,autoScaleCubemaps,renderPluginsPre,renderPluginsPost,info,_programs,_programs_counter,_currentProgram,_currentFramebuffer,_currentMaterialId,_currentGeometryGroupHash,_currentCamera,_geometryGroupCounter,_usedTextureUnits,_enabledAttributes,_oldDoubleSided,_oldFlipSided,_oldBlending,_oldBlendEquation,_oldBlendSrc,_oldBlendDst,_oldDepthTest,_oldDepthWrite,_oldPolygonOffset,_oldPolygonOffsetFactor,_oldPolygonOffsetUnits,_oldLineWidth,_viewportX,_viewportY,_viewportWidth,_viewportHeight,_currentWidth,_currentHeight,_frustum,_projScreenMatrix,_projScreenMatrixPS,_vector3,_direction,_lights,_lightsNeedUpdate,_glExtensionTextureFloat,_glExtensionStandardDerivatives,_glExtensionTextureFilterAnisotropic,_glExtensionCompressedTextureS3TC,maxAnisotropy,supportsVertexTextures,supportsBoneTextures,shadowMapPlugin,maxTextures,maxVertexTextures,maxTextureSize,maxCubemapSize",
    setClearColorHex$2: function(hex, alpha) {
      var t1 = this._clearColor;
      t1.setHex$1(hex);
      this._clearAlpha = alpha;
      J.clearColor$4$x(this._gl, t1._r, t1._g, t1._b, alpha);
    },
    clear$3: function(_, color, depth, stencil) {
      var bits = color ? 16384 : 0;
      if (depth)
        bits |= 256;
      if (stencil)
        bits |= 1024;
      J.clear$1$ax(this._gl, bits);
    },
    clear$0: function($receiver) {
      return this.clear$3($receiver, true, true, true);
    },
    createMeshBuffers$1: function(geometryGroup) {
      var ml, m;
      geometryGroup.set$__webglVertexBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglNormalBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglTangentBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglColorBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglUVBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglUV2Buffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglSkinIndicesBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglSkinWeightsBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglFaceBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.set$__webglLineBuffer(J.createBuffer$0$x(this._gl));
      geometryGroup.get$numMorphTargets();
      geometryGroup.set$__webglMorphTargetsBuffers([]);
      ml = geometryGroup.get$numMorphTargets();
      for (m = 0; m < ml; ++m)
        geometryGroup.get$__webglMorphTargetsBuffers().push(J.createBuffer$0$x(this._gl));
      geometryGroup.get$numMorphNormals();
      geometryGroup.set$__webglMorphNormalsBuffers([]);
      ml = geometryGroup.get$numMorphNormals();
      for (m = 0; m < ml; ++m)
        geometryGroup.get$__webglMorphNormalsBuffers().push(J.createBuffer$0$x(this._gl));
      ++this.info.memory.geometries;
    },
    deallocateMaterial$1: function(material) {
      var il, i;
      if (material.get$program() == null)
        return;
      material.set$program(null);
      for (il = this._programs.length, i = 0; i < il; ++i)
        ;
    },
    initCustomAttributes$2: function(geometry, object) {
      var nvertices, material, t1;
      nvertices = J.get$length$asx(geometry.get$vertices());
      material = object.get$webglmaterial();
      t1 = J.getInterceptor$x(material);
      if (t1.get$attributes(material) != null) {
        if (geometry.get$__webglCustomAttributesList() == null)
          geometry.set$__webglCustomAttributesList([]);
        t1.get$attributes(material).forEach$1(0, new S.WebGLRenderer_initCustomAttributes_closure(this, geometry, nvertices));
      }
    },
    initMeshBuffers$2: function(geometryGroup, object) {
      var geometry, faces3, faces4, t1, t2, nvertices, material, uvType, normalType, vertexColorType, t3, ml, m, t4;
      geometry = object.get$geometry();
      faces3 = geometryGroup.get$faces3();
      faces4 = geometryGroup.get$faces4();
      t1 = faces3.length;
      t2 = faces4.length;
      nvertices = t1 * 3 + t2 * 4;
      material = this.getBufferMaterial$2(object, geometryGroup);
      uvType = this.bufferGuessUVType$1(material);
      normalType = this.bufferGuessNormalType$1(material);
      vertexColorType = this.bufferGuessVertexColorType$1(material);
      t3 = nvertices * 3;
      geometryGroup.set$__vertexArray(new Float32Array(t3));
      if (normalType !== 0)
        geometryGroup.set$__normalArray(new Float32Array(t3));
      if (geometry.hasTangents)
        geometryGroup.set$__tangentArray(new Float32Array(nvertices * 4));
      if (vertexColorType === true)
        geometryGroup.set$__colorArray(new Float32Array(t3));
      if (uvType) {
        geometry.faceUvs;
        geometryGroup.set$__uvArray(new Float32Array(nvertices * 2));
        if (geometry.faceVertexUvs.length > 1)
          geometryGroup.set$__uv2Array(new Float32Array(nvertices * 2));
      }
      object.get$geometry().skinWeights;
      t1 = (t1 + t2 * 2) * 3;
      geometryGroup.set$__faceArray(new Uint16Array(t1));
      t2 = nvertices * 2;
      geometryGroup.set$__lineArray(new Uint16Array(t2));
      geometryGroup.get$numMorphTargets();
      geometryGroup.set$__morphTargetsArrays([]);
      ml = geometryGroup.get$numMorphTargets();
      for (m = 0; m < ml; ++m) {
        t4 = geometryGroup.get$__morphTargetsArrays();
        t4.push(new Float32Array(t3));
      }
      geometryGroup.get$numMorphNormals();
      geometryGroup.set$__morphNormalsArrays([]);
      ml = geometryGroup.get$numMorphNormals();
      for (m = 0; m < ml; ++m) {
        t4 = geometryGroup.get$__morphNormalsArrays();
        t4.push(new Float32Array(t3));
      }
      geometryGroup.set$__webglFaceCount(t1);
      geometryGroup.set$__webglLineCount(t2);
      t1 = J.getInterceptor$x(material);
      if (t1.get$attributes(material) != null) {
        if (geometryGroup.get$__webglCustomAttributesList() == null)
          geometryGroup.set$__webglCustomAttributesList([]);
        t1.get$attributes(material).forEach$1(0, new S.WebGLRenderer_initMeshBuffers_closure(this, geometryGroup, nvertices));
      }
      geometryGroup.set$__inittedArrays(true);
    },
    getBufferMaterial$2: function(object, geometryGroup) {
      var t1, t2, material;
      if (!!J.getInterceptor(object.get$material()).$isMeshFaceMaterial) {
        t1 = H.interceptedTypeCast(object.get$material(), "$isMeshFaceMaterial").materials;
        t2 = geometryGroup.get$materialIndex();
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        material = t1[t2];
      } else
        material = object.get$material();
      t1 = J.getInterceptor$asx(material);
      if (t1.$index(material, "__webglMaterial") == null)
        t1.$indexSet(material, "__webglMaterial", new S.WebGLMaterial(material, null, null, null, null, null, 0, 0, false));
      return t1.$index(material, "__webglMaterial");
    },
    bufferGuessNormalType$1: function(material) {
      if (!material.get$needsNormals())
        return 0;
      if (material.get$needsSmoothNormals())
        return 2;
      else
        return 1;
    },
    bufferGuessVertexColorType$1: function(material) {
      var t1 = material.get$vertexColors();
      if (!(typeof t1 === "boolean" && material.get$vertexColors() === true)) {
        t1 = material.get$vertexColors();
        t1 = typeof t1 === "number" && Math.floor(t1) === t1 && material.get$vertexColors() !== 0;
      } else
        t1 = true;
      if (t1)
        return material.get$vertexColors();
      return false;
    },
    bufferGuessUVType$1: function(material) {
      var t1;
      if (J.get$map$ax(material) == null) {
        material.get$lightMap();
        material.get$bumpMap();
        material.get$normalMap();
        material.get$specularMap();
        t1 = material.get$isShaderMaterial();
      } else
        t1 = true;
      if (t1)
        return true;
      return false;
    },
    setParticleBuffers$3: function(geometry, hint, object) {
      var vertices, t1, vl, colors, cl, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, t2, t3, v, vertex, t4, offset, t5, t6, c, color, il, index, i, ca, cal, value, customAttribute;
      vertices = geometry.get$vertices();
      t1 = J.getInterceptor$asx(vertices);
      vl = t1.get$length(vertices);
      colors = geometry.get$colors();
      cl = colors.length;
      vertexArray = geometry.get$__vertexArray();
      colorArray = geometry.get$__colorArray();
      sortArray = geometry.get$__sortArray();
      dirtyVertices = geometry.get$verticesNeedUpdate();
      geometry.get$elementsNeedUpdate();
      dirtyColors = geometry.get$colorsNeedUpdate();
      customAttributes = geometry.get$__webglCustomAttributesList();
      t2 = object.sortParticles;
      if (t2) {
        t3 = this._projScreenMatrixPS;
        t3.setFrom$1(this._projScreenMatrix);
        t3.multiply$1(0, object.matrixWorld);
        for (v = 0; v < vl; ++v) {
          vertex = t1.$index(vertices, v);
          this._vector3.setFrom$1(vertex);
          this._vector3.applyProjection$1(t3);
          t4 = this._vector3.storage[2];
          if (v >= sortArray.length)
            return H.ioore(sortArray, v);
          sortArray[v] = [t4, v];
        }
        t3 = this.get$numericalSort();
        J.checkMutable$1$a(sortArray, "sort");
        H.IterableMixinWorkaround_sortList(sortArray, t3);
        for (v = 0, offset = null; v < vl; ++v) {
          if (v >= sortArray.length)
            return H.ioore(sortArray, v);
          vertex = t1.$index(vertices, J.$index$asx(sortArray[v], 1));
          offset = v * 3;
          t3 = J.getInterceptor$x(vertex);
          t4 = t3.get$x(vertex);
          t5 = vertexArray.length;
          if (offset >= t5)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t4;
          t4 = offset + 1;
          t6 = t3.get$y(vertex);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t6;
          t6 = offset + 2;
          t3 = t3.get$z(vertex);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t3;
        }
        for (c = 0; c < cl; ++c) {
          offset = c * 3;
          if (c >= sortArray.length)
            return H.ioore(sortArray, c);
          t1 = J.$index$asx(sortArray[c], 1);
          if (t1 >>> 0 !== t1 || t1 >= colors.length)
            return H.ioore(colors, t1);
          color = colors[t1];
          t1 = color._r;
          t3 = colorArray.length;
          if (offset >= t3)
            return H.ioore(colorArray, offset);
          colorArray[offset] = t1;
          t1 = offset + 1;
          t4 = color._g;
          if (t1 >= t3)
            return H.ioore(colorArray, t1);
          colorArray[t1] = t4;
          t4 = offset + 2;
          t1 = color._b;
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t1;
        }
        if (customAttributes != null) {
          il = customAttributes.length;
          for (index = null, i = 0, ca = null, cal = null, value = null; i < il; ++i) {
            if (i >= customAttributes.length)
              return H.ioore(customAttributes, i);
            customAttribute = customAttributes[i];
            customAttribute.get$boundTo();
            customAttribute.get$boundTo();
            continue;
          }
        }
      } else {
        if (dirtyVertices === true)
          for (v = 0, offset = null; v < vl; ++v) {
            vertex = t1.$index(vertices, v);
            offset = v * 3;
            t3 = J.getInterceptor$x(vertex);
            t4 = t3.get$x(vertex);
            t5 = vertexArray.length;
            if (offset >= t5)
              return H.ioore(vertexArray, offset);
            vertexArray[offset] = t4;
            t4 = offset + 1;
            t6 = t3.get$y(vertex);
            if (t4 >= t5)
              return H.ioore(vertexArray, t4);
            vertexArray[t4] = t6;
            t6 = offset + 2;
            t3 = t3.get$z(vertex);
            if (t6 >= t5)
              return H.ioore(vertexArray, t6);
            vertexArray[t6] = t3;
          }
        else
          offset = null;
        if (dirtyColors === true)
          for (t1 = colors.length, c = 0; c < cl; ++c) {
            if (c >= t1)
              return H.ioore(colors, c);
            color = colors[c];
            offset = c * 3;
            t3 = color._r;
            t4 = colorArray.length;
            if (offset >= t4)
              return H.ioore(colorArray, offset);
            colorArray[offset] = t3;
            t3 = offset + 1;
            t5 = color._g;
            if (t3 >= t4)
              return H.ioore(colorArray, t3);
            colorArray[t3] = t5;
            t5 = offset + 2;
            t3 = color._b;
            if (t5 >= t4)
              return H.ioore(colorArray, t5);
            colorArray[t5] = t3;
          }
        if (customAttributes != null) {
          il = customAttributes.length;
          for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
            if (i >= customAttributes.length)
              return H.ioore(customAttributes, i);
            customAttribute = customAttributes[i];
            if (customAttribute.get$needsUpdate()) {
              customAttribute.get$boundTo();
              customAttribute.get$boundTo();
              t1 = false;
            } else
              t1 = false;
            if (t1) {
              t1 = J.getInterceptor$x(customAttribute);
              cal = J.get$length$asx(t1.get$value(customAttribute));
              if (t1.get$size(customAttribute) === 1) {
                if (typeof cal !== "number")
                  return H.iae(cal);
                ca = 0;
                for (; ca < cal; ++ca)
                  customAttribute.get$array().$indexSet(0, ca, J.$index$asx(t1.get$value(customAttribute), ca));
                offset = 0;
              } else if (t1.get$size(customAttribute) === 2) {
                if (typeof cal !== "number")
                  return H.iae(cal);
                offset = 0;
                ca = 0;
                for (; ca < cal; ++ca) {
                  value = J.$index$asx(t1.get$value(customAttribute), ca);
                  t3 = J.getInterceptor$x(value);
                  customAttribute.get$array().$indexSet(0, offset, t3.get$x(value));
                  customAttribute.get$array().$indexSet(0, offset + 1, t3.get$y(value));
                  offset += 2;
                }
              } else if (t1.get$size(customAttribute) === 3)
                if (t1.get$type(customAttribute) === "c") {
                  if (typeof cal !== "number")
                    return H.iae(cal);
                  offset = 0;
                  ca = 0;
                  for (; ca < cal; ++ca) {
                    value = J.$index$asx(t1.get$value(customAttribute), ca);
                    t3 = J.getInterceptor$x(value);
                    customAttribute.get$array().$indexSet(0, offset, t3.get$r(value));
                    customAttribute.get$array().$indexSet(0, offset + 1, value.get$g());
                    customAttribute.get$array().$indexSet(0, offset + 2, t3.get$b(value));
                    offset += 3;
                  }
                } else {
                  if (typeof cal !== "number")
                    return H.iae(cal);
                  offset = 0;
                  ca = 0;
                  for (; ca < cal; ++ca) {
                    value = J.$index$asx(t1.get$value(customAttribute), ca);
                    t3 = J.getInterceptor$x(value);
                    customAttribute.get$array().$indexSet(0, offset, t3.get$x(value));
                    customAttribute.get$array().$indexSet(0, offset + 1, t3.get$y(value));
                    customAttribute.get$array().$indexSet(0, offset + 2, t3.get$z(value));
                    offset += 3;
                  }
                }
              else if (t1.get$size(customAttribute) === 4) {
                if (typeof cal !== "number")
                  return H.iae(cal);
                offset = 0;
                ca = 0;
                for (; ca < cal; ++ca) {
                  value = J.$index$asx(t1.get$value(customAttribute), ca);
                  t3 = J.getInterceptor$x(value);
                  customAttribute.get$array().$indexSet(0, offset, t3.get$x(value));
                  customAttribute.get$array().$indexSet(0, offset + 1, t3.get$y(value));
                  customAttribute.get$array().$indexSet(0, offset + 2, t3.get$z(value));
                  customAttribute.get$array().$indexSet(0, offset + 3, t3.get$w(value));
                  offset += 4;
                }
              } else
                offset = 0;
            }
          }
        }
      }
      if (dirtyVertices === true || t2) {
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglVertexBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
      }
      if (dirtyColors === true || t2) {
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglColorBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
      }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (i = 0; i < il; ++i) {
          if (i >= customAttributes.length)
            return H.ioore(customAttributes, i);
          customAttribute = customAttributes[i];
          if (customAttribute.get$needsUpdate() || t2) {
            J.get$buffer$x(customAttribute).bind$1(34962);
            J.bufferDataTyped$3$x(this._gl, 34962, customAttribute.get$array(), hint);
          }
        }
      }
    },
    setLineBuffers$2: function(geometry, hint) {
      var vertices, colors, lineDistances, t1, vl, cl, vertexArray, colorArray, lineDistanceArray, dirtyVertices, dirtyColors, dirtyLineDistances, customAttributes, v, offset, vertex, t2, t3, t4, t5, c, color, d, il, i, ca, cal, value, customAttribute;
      vertices = geometry.get$vertices();
      colors = geometry.get$colors();
      lineDistances = geometry.get$lineDistances();
      t1 = J.getInterceptor$asx(vertices);
      vl = t1.get$length(vertices);
      cl = colors.length;
      vertexArray = geometry.get$__vertexArray();
      colorArray = geometry.get$__colorArray();
      lineDistanceArray = geometry.get$__lineDistanceArray();
      dirtyVertices = geometry.get$verticesNeedUpdate();
      dirtyColors = geometry.get$colorsNeedUpdate();
      dirtyLineDistances = geometry.get$lineDistancesNeedUpdate();
      customAttributes = geometry.get$__webglCustomAttributesList();
      if (dirtyVertices === true) {
        for (v = 0, offset = null; v < vl; ++v) {
          vertex = t1.$index(vertices, v);
          offset = v * 3;
          t2 = J.getInterceptor$x(vertex);
          t3 = t2.get$x(vertex);
          t4 = vertexArray.length;
          if (offset >= t4)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t3;
          t3 = offset + 1;
          t5 = t2.get$y(vertex);
          if (t3 >= t4)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t5;
          t5 = offset + 2;
          t2 = t2.get$z(vertex);
          if (t5 >= t4)
            return H.ioore(vertexArray, t5);
          vertexArray[t5] = t2;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglVertexBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
      } else
        offset = null;
      if (dirtyColors === true) {
        for (t1 = colors.length, c = 0; c < cl; ++c) {
          if (c >= t1)
            return H.ioore(colors, c);
          color = colors[c];
          offset = c * 3;
          t2 = color._r;
          t3 = colorArray.length;
          if (offset >= t3)
            return H.ioore(colorArray, offset);
          colorArray[offset] = t2;
          t2 = offset + 1;
          t4 = color._g;
          if (t2 >= t3)
            return H.ioore(colorArray, t2);
          colorArray[t2] = t4;
          t4 = offset + 2;
          t2 = color._b;
          if (t4 >= t3)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t2;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglColorBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
      }
      if (dirtyLineDistances === true) {
        for (d = 0; false; ++d) {
          if (d >= 0)
            return H.ioore(lineDistances, d);
          lineDistanceArray[d] = lineDistances[d];
        }
        J.bindBuffer$2$x(this._gl, 34962, geometry.get$__webglLineDistanceBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, lineDistanceArray, hint);
      }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
          if (i >= customAttributes.length)
            return H.ioore(customAttributes, i);
          customAttribute = customAttributes[i];
          if (customAttribute.get$needsUpdate()) {
            customAttribute.get$boundTo();
            customAttribute.get$boundTo();
            t1 = false;
          } else
            t1 = false;
          if (t1) {
            t1 = J.getInterceptor$x(customAttribute);
            cal = J.get$length$asx(t1.get$value(customAttribute));
            if (t1.get$size(customAttribute) === 1) {
              if (typeof cal !== "number")
                return H.iae(cal);
              ca = 0;
              for (; ca < cal; ++ca)
                customAttribute.get$array().$indexSet(0, ca, J.$index$asx(t1.get$value(customAttribute), ca));
              offset = 0;
            } else if (t1.get$size(customAttribute) === 2) {
              if (typeof cal !== "number")
                return H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                value = J.$index$asx(t1.get$value(customAttribute), ca);
                t2 = J.getInterceptor$x(value);
                customAttribute.get$array().$indexSet(0, offset, t2.get$x(value));
                customAttribute.get$array().$indexSet(0, offset + 1, t2.get$y(value));
                offset += 2;
              }
            } else if (t1.get$size(customAttribute) === 3)
              if (t1.get$type(customAttribute) === "c") {
                if (typeof cal !== "number")
                  return H.iae(cal);
                offset = 0;
                ca = 0;
                for (; ca < cal; ++ca) {
                  value = J.$index$asx(t1.get$value(customAttribute), ca);
                  t2 = J.getInterceptor$x(value);
                  customAttribute.get$array().$indexSet(0, offset, t2.get$r(value));
                  customAttribute.get$array().$indexSet(0, offset + 1, value.get$g());
                  customAttribute.get$array().$indexSet(0, offset + 2, t2.get$b(value));
                  offset += 3;
                }
              } else {
                if (typeof cal !== "number")
                  return H.iae(cal);
                offset = 0;
                ca = 0;
                for (; ca < cal; ++ca) {
                  value = J.$index$asx(t1.get$value(customAttribute), ca);
                  t2 = J.getInterceptor$x(value);
                  customAttribute.get$array().$indexSet(0, offset, t2.get$x(value));
                  customAttribute.get$array().$indexSet(0, offset + 1, t2.get$y(value));
                  customAttribute.get$array().$indexSet(0, offset + 2, t2.get$z(value));
                  offset += 3;
                }
              }
            else if (t1.get$size(customAttribute) === 4) {
              if (typeof cal !== "number")
                return H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                value = J.$index$asx(t1.get$value(customAttribute), ca);
                t2 = J.getInterceptor$x(value);
                customAttribute.get$array().$indexSet(0, offset, t2.get$x(value));
                customAttribute.get$array().$indexSet(0, offset + 1, t2.get$y(value));
                customAttribute.get$array().$indexSet(0, offset + 2, t2.get$z(value));
                customAttribute.get$array().$indexSet(0, offset + 3, t2.get$w(value));
                offset += 4;
              }
            } else
              offset = 0;
            t1.get$buffer(customAttribute).bind$1(34962);
            J.bufferDataTyped$3$x(this._gl, 34962, customAttribute.get$array(), hint);
          }
        }
      }
    },
    setMeshBuffers$5: function(geometryGroup, object, hint, dispose, material) {
      var normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, t1, obj_uvs2, morphTargets, morphNormals, fl, t2, f, face, v1, v2, v3, offset, t3, t4, t5, t6, v4, vkl, n1, n2, n3, n4, vk, vka, nka, chf, faceVertexNormals, offset_morphTarget, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, offset_color, vertexColors, faceColor, c1, c2, c3, c4, offset_tangent, vertexTangents, t20, i, vn, offset_normal, vertexNormals, faceNormal, uvi, offset_uv, uv, uv2i, offset_uv2, uv2, vertexIndex, offset_face, offset_line, il, offset_custom, offset_customSrc, value;
      if (geometryGroup.get$__inittedArrays() !== true)
        return;
      normalType = this.bufferGuessNormalType$1(material);
      vertexColorType = this.bufferGuessVertexColorType$1(material);
      uvType = this.bufferGuessUVType$1(material);
      needsSmoothNormals = normalType === 2;
      vertexArray = geometryGroup.get$__vertexArray();
      uvArray = geometryGroup.get$__uvArray();
      uv2Array = geometryGroup.get$__uv2Array();
      normalArray = geometryGroup.get$__normalArray();
      tangentArray = geometryGroup.get$__tangentArray();
      colorArray = geometryGroup.get$__colorArray();
      geometryGroup.get$__skinIndexArray();
      geometryGroup.get$__skinWeightArray();
      morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
      morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
      customAttributes = geometryGroup.get$__webglCustomAttributesList();
      faceArray = geometryGroup.get$__faceArray();
      lineArray = geometryGroup.get$__lineArray();
      geometry = object.get$webglgeometry();
      dirtyVertices = geometry.get$verticesNeedUpdate();
      dirtyElements = geometry.get$elementsNeedUpdate();
      dirtyUvs = geometry.get$uvsNeedUpdate();
      dirtyNormals = geometry.get$normalsNeedUpdate();
      dirtyTangents = geometry.get$tangentsNeedUpdate();
      dirtyColors = geometry.get$colorsNeedUpdate();
      dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
      vertices = geometry.get$vertices();
      chunk_faces3 = geometryGroup.get$faces3();
      chunk_faces4 = geometryGroup.get$faces4();
      obj_faces = geometry.get$faces();
      if (geometry.get$faceVertexUvs().length === 0)
        obj_uvs = [];
      else {
        t1 = geometry.get$faceVertexUvs();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        obj_uvs = t1[0];
      }
      if (geometry.get$faceVertexUvs().length > 1) {
        t1 = geometry.get$faceVertexUvs();
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        obj_uvs2 = t1[1];
      } else
        obj_uvs2 = null;
      geometry.get$colors();
      geometry.get$skinIndices();
      geometry.get$skinWeights();
      morphTargets = geometry.get$morphTargets();
      morphNormals = geometry.get$morphNormals();
      if (dirtyVertices === true) {
        fl = chunk_faces3.length;
        for (t1 = J.getInterceptor$asx(obj_faces), t2 = J.getInterceptor$asx(vertices), f = 0, face = null, v1 = null, v2 = null, v3 = null, offset = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          face = t1.$index(obj_faces, chunk_faces3[f]);
          t3 = J.getInterceptor$x(face);
          v1 = t2.$index(vertices, t3.get$a(face));
          v2 = t2.$index(vertices, t3.get$b(face));
          v3 = t2.$index(vertices, t3.get$c(face));
          t3 = J.getInterceptor$x(v1);
          t4 = t3.get$x(v1);
          t5 = vertexArray.length;
          if (offset >= t5)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t4;
          t4 = offset + 1;
          t6 = t3.get$y(v1);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t6;
          t6 = offset + 2;
          t3 = t3.get$z(v1);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t3;
          t3 = offset + 3;
          t6 = J.getInterceptor$x(v2);
          t4 = t6.get$x(v2);
          if (t3 >= t5)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 4;
          t3 = t6.get$y(v2);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t3;
          t3 = offset + 5;
          t6 = t6.get$z(v2);
          if (t3 >= t5)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t6;
          t6 = offset + 6;
          t3 = J.getInterceptor$x(v3);
          t4 = t3.get$x(v3);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t4;
          t4 = offset + 7;
          t6 = t3.get$y(v3);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t6;
          t6 = offset + 8;
          t3 = t3.get$z(v3);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t3;
          offset += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0, v4 = null; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          face = t1.$index(obj_faces, chunk_faces4[f]);
          t3 = J.getInterceptor$x(face);
          v1 = t2.$index(vertices, t3.get$a(face));
          v2 = t2.$index(vertices, t3.get$b(face));
          v3 = t2.$index(vertices, t3.get$c(face));
          v4 = t2.$index(vertices, t3.get$d(face));
          t3 = J.getInterceptor$x(v1);
          t4 = t3.get$x(v1);
          t5 = vertexArray.length;
          if (offset >= t5)
            return H.ioore(vertexArray, offset);
          vertexArray[offset] = t4;
          t4 = offset + 1;
          t6 = t3.get$y(v1);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t6;
          t6 = offset + 2;
          t3 = t3.get$z(v1);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t3;
          t3 = offset + 3;
          t6 = J.getInterceptor$x(v2);
          t4 = t6.get$x(v2);
          if (t3 >= t5)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 4;
          t3 = t6.get$y(v2);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t3;
          t3 = offset + 5;
          t6 = t6.get$z(v2);
          if (t3 >= t5)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t6;
          t6 = offset + 6;
          t3 = J.getInterceptor$x(v3);
          t4 = t3.get$x(v3);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t4;
          t4 = offset + 7;
          t6 = t3.get$y(v3);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t6;
          t6 = offset + 8;
          t3 = t3.get$z(v3);
          if (t6 >= t5)
            return H.ioore(vertexArray, t6);
          vertexArray[t6] = t3;
          t3 = offset + 9;
          t6 = J.getInterceptor$x(v4);
          t4 = t6.get$x(v4);
          if (t3 >= t5)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 10;
          t3 = t6.get$y(v4);
          if (t4 >= t5)
            return H.ioore(vertexArray, t4);
          vertexArray[t4] = t3;
          t3 = offset + 11;
          t6 = t6.get$z(v4);
          if (t3 >= t5)
            return H.ioore(vertexArray, t3);
          vertexArray[t3] = t6;
          offset += 12;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
      } else {
        f = null;
        fl = null;
        face = null;
        v1 = null;
        v2 = null;
        v3 = null;
        v4 = null;
      }
      if (dirtyMorphTargets === true) {
        t1 = J.getInterceptor$asx(morphTargets);
        vkl = t1.get$length(morphTargets);
        for (t2 = J.getInterceptor$asx(obj_faces), t3 = J.getInterceptor$asx(morphNormals), n1 = null, n2 = null, n3 = null, n4 = null, vk = 0, vka = null, nka = null, chf = null, faceVertexNormals = null; vk < vkl; ++vk) {
          fl = chunk_faces3.length;
          for (f = 0, offset_morphTarget = 0; f < fl; ++f) {
            if (f >= chunk_faces3.length)
              return H.ioore(chunk_faces3, f);
            chf = chunk_faces3[f];
            face = t2.$index(obj_faces, chf);
            t4 = J.getInterceptor$x(face);
            v1 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$a(face));
            v2 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$b(face));
            v3 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$c(face));
            if (vk >= morphTargetsArrays.length)
              return H.ioore(morphTargetsArrays, vk);
            vka = morphTargetsArrays[vk];
            t4 = J.getInterceptor$x(v1);
            t5 = J.getInterceptor$ax(vka);
            t5.$indexSet(vka, offset_morphTarget, t4.get$x(v1));
            t6 = offset_morphTarget + 1;
            t5.$indexSet(vka, t6, t4.get$y(v1));
            t7 = offset_morphTarget + 2;
            t5.$indexSet(vka, t7, t4.get$z(v1));
            t4 = offset_morphTarget + 3;
            t8 = J.getInterceptor$x(v2);
            t5.$indexSet(vka, t4, t8.get$x(v2));
            t9 = offset_morphTarget + 4;
            t5.$indexSet(vka, t9, t8.get$y(v2));
            t10 = offset_morphTarget + 5;
            t5.$indexSet(vka, t10, t8.get$z(v2));
            t8 = offset_morphTarget + 6;
            t11 = J.getInterceptor$x(v3);
            t5.$indexSet(vka, t8, t11.get$x(v3));
            t12 = offset_morphTarget + 7;
            t5.$indexSet(vka, t12, t11.get$y(v3));
            t13 = offset_morphTarget + 8;
            t5.$indexSet(vka, t13, t11.get$z(v3));
            if (material.get$morphNormals() === true) {
              if (needsSmoothNormals) {
                t5 = t3.$index(morphNormals, vk).get$vertexNormals();
                if (chf >= t5.length)
                  return H.ioore(t5, chf);
                faceVertexNormals = t5[chf];
                t5 = J.getInterceptor$x(faceVertexNormals);
                n1 = t5.get$a(faceVertexNormals);
                n2 = t5.get$b(faceVertexNormals);
                n3 = t5.get$c(faceVertexNormals);
              } else {
                n1 = t3.$index(morphNormals, vk).get$faceNormals().$index(0, chf);
                n3 = n1;
                n2 = n3;
              }
              if (vk >= morphNormalsArrays.length)
                return H.ioore(morphNormalsArrays, vk);
              nka = morphNormalsArrays[vk];
              t5 = J.getInterceptor$x(n1);
              t11 = J.getInterceptor$ax(nka);
              t11.$indexSet(nka, offset_morphTarget, t5.get$x(n1));
              t11.$indexSet(nka, t6, t5.get$y(n1));
              t11.$indexSet(nka, t7, t5.get$z(n1));
              t5 = J.getInterceptor$x(n2);
              t11.$indexSet(nka, t4, t5.get$x(n2));
              t11.$indexSet(nka, t9, t5.get$y(n2));
              t11.$indexSet(nka, t10, t5.get$z(n2));
              t5 = J.getInterceptor$x(n3);
              t11.$indexSet(nka, t8, t5.get$x(n3));
              t11.$indexSet(nka, t12, t5.get$y(n3));
              t11.$indexSet(nka, t13, t5.get$z(n3));
            }
            offset_morphTarget += 9;
          }
          fl = chunk_faces4.length;
          for (f = 0; f < fl; ++f) {
            if (f >= chunk_faces4.length)
              return H.ioore(chunk_faces4, f);
            chf = chunk_faces4[f];
            face = t2.$index(obj_faces, chf);
            t4 = J.getInterceptor$x(face);
            v1 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$a(face));
            v2 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$b(face));
            v3 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$c(face));
            v4 = J.$index$asx(t1.$index(morphTargets, vk).get$vertices(), t4.get$d(face));
            if (vk >= morphTargetsArrays.length)
              return H.ioore(morphTargetsArrays, vk);
            vka = morphTargetsArrays[vk];
            t4 = J.getInterceptor$x(v1);
            t5 = J.getInterceptor$ax(vka);
            t5.$indexSet(vka, offset_morphTarget, t4.get$x(v1));
            t6 = offset_morphTarget + 1;
            t5.$indexSet(vka, t6, t4.get$y(v1));
            t7 = offset_morphTarget + 2;
            t5.$indexSet(vka, t7, t4.get$z(v1));
            t4 = offset_morphTarget + 3;
            t8 = J.getInterceptor$x(v2);
            t5.$indexSet(vka, t4, t8.get$x(v2));
            t9 = offset_morphTarget + 4;
            t5.$indexSet(vka, t9, t8.get$y(v2));
            t10 = offset_morphTarget + 5;
            t5.$indexSet(vka, t10, t8.get$z(v2));
            t8 = offset_morphTarget + 6;
            t11 = J.getInterceptor$x(v3);
            t5.$indexSet(vka, t8, t11.get$x(v3));
            t12 = offset_morphTarget + 7;
            t5.$indexSet(vka, t12, t11.get$y(v3));
            t13 = offset_morphTarget + 8;
            t5.$indexSet(vka, t13, t11.get$z(v3));
            t11 = offset_morphTarget + 9;
            t14 = J.getInterceptor$x(v4);
            t5.$indexSet(vka, t11, t14.get$x(v4));
            t15 = offset_morphTarget + 10;
            t5.$indexSet(vka, t15, t14.get$y(v4));
            t16 = offset_morphTarget + 11;
            t5.$indexSet(vka, t16, t14.get$z(v4));
            if (material.get$morphNormals() === true) {
              if (needsSmoothNormals) {
                t5 = t3.$index(morphNormals, vk).get$vertexNormals();
                if (chf >= t5.length)
                  return H.ioore(t5, chf);
                faceVertexNormals = t5[chf];
                t5 = J.getInterceptor$x(faceVertexNormals);
                n1 = t5.get$a(faceVertexNormals);
                n2 = t5.get$b(faceVertexNormals);
                n3 = t5.get$c(faceVertexNormals);
                n4 = t5.get$d(faceVertexNormals);
              } else {
                n1 = t3.$index(morphNormals, vk).get$faceNormals().$index(0, chf);
                n4 = n1;
                n3 = n4;
                n2 = n3;
              }
              if (vk >= morphNormalsArrays.length)
                return H.ioore(morphNormalsArrays, vk);
              nka = morphNormalsArrays[vk];
              t5 = J.getInterceptor$x(n1);
              t14 = J.getInterceptor$ax(nka);
              t14.$indexSet(nka, offset_morphTarget, t5.get$x(n1));
              t14.$indexSet(nka, t6, t5.get$y(n1));
              t14.$indexSet(nka, t7, t5.get$z(n1));
              t5 = J.getInterceptor$x(n2);
              t14.$indexSet(nka, t4, t5.get$x(n2));
              t14.$indexSet(nka, t9, t5.get$y(n2));
              t14.$indexSet(nka, t10, t5.get$z(n2));
              t5 = J.getInterceptor$x(n3);
              t14.$indexSet(nka, t8, t5.get$x(n3));
              t14.$indexSet(nka, t12, t5.get$y(n3));
              t14.$indexSet(nka, t13, t5.get$z(n3));
              t5 = J.getInterceptor$x(n4);
              t14.$indexSet(nka, t11, t5.get$x(n4));
              t14.$indexSet(nka, t15, t5.get$y(n4));
              t14.$indexSet(nka, t16, t5.get$z(n4));
            }
            offset_morphTarget += 12;
          }
          t4 = this._gl;
          t5 = geometryGroup.get$__webglMorphTargetsBuffers();
          if (vk >= t5.length)
            return H.ioore(t5, vk);
          J.bindBuffer$2$x(t4, 34962, t5[vk]);
          t5 = this._gl;
          if (vk >= morphTargetsArrays.length)
            return H.ioore(morphTargetsArrays, vk);
          J.bufferDataTyped$3$x(t5, 34962, morphTargetsArrays[vk], hint);
          if (material.get$morphNormals() === true) {
            t4 = this._gl;
            t5 = geometryGroup.get$__webglMorphNormalsBuffers();
            if (vk >= t5.length)
              return H.ioore(t5, vk);
            J.bindBuffer$2$x(t4, 34962, t5[vk]);
            t5 = this._gl;
            if (vk >= morphNormalsArrays.length)
              return H.ioore(morphNormalsArrays, vk);
            J.bufferDataTyped$3$x(t5, 34962, morphNormalsArrays[vk], hint);
          }
        }
      }
      if (dirtyColors === true && vertexColorType === true) {
        fl = chunk_faces3.length;
        for (t1 = J.getInterceptor$asx(obj_faces), t2 = vertexColorType === 2, f = 0, offset_color = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          face = t1.$index(obj_faces, chunk_faces3[f]);
          vertexColors = face.get$vertexColors();
          faceColor = J.get$color$x(face);
          t3 = J.getInterceptor$asx(vertexColors);
          if (t3.get$length(vertexColors) === 3 && t2) {
            c1 = t3.$index(vertexColors, 0);
            c2 = t3.$index(vertexColors, 1);
            c3 = t3.$index(vertexColors, 2);
          } else {
            c3 = faceColor;
            c2 = c3;
            c1 = c2;
          }
          t3 = J.getInterceptor$x(c1);
          t4 = t3.get$r(c1);
          t5 = colorArray.length;
          if (offset_color >= t5)
            return H.ioore(colorArray, offset_color);
          colorArray[offset_color] = t4;
          t4 = offset_color + 1;
          t6 = c1.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t6;
          t6 = offset_color + 2;
          t3 = t3.get$b(c1);
          if (t6 >= t5)
            return H.ioore(colorArray, t6);
          colorArray[t6] = t3;
          t3 = offset_color + 3;
          t6 = J.getInterceptor$x(c2);
          t4 = t6.get$r(c2);
          if (t3 >= t5)
            return H.ioore(colorArray, t3);
          colorArray[t3] = t4;
          t4 = offset_color + 4;
          t3 = c2.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t3;
          t3 = offset_color + 5;
          t6 = t6.get$b(c2);
          if (t3 >= t5)
            return H.ioore(colorArray, t3);
          colorArray[t3] = t6;
          t6 = offset_color + 6;
          t3 = J.getInterceptor$x(c3);
          t4 = t3.get$r(c3);
          if (t6 >= t5)
            return H.ioore(colorArray, t6);
          colorArray[t6] = t4;
          t4 = offset_color + 7;
          t6 = c3.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t6;
          t6 = offset_color + 8;
          t3 = t3.get$b(c3);
          if (t6 >= t5)
            return H.ioore(colorArray, t6);
          colorArray[t6] = t3;
          offset_color += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          face = t1.$index(obj_faces, chunk_faces4[f]);
          vertexColors = face.get$vertexColors();
          faceColor = J.get$color$x(face);
          t3 = J.getInterceptor$asx(vertexColors);
          if (t3.get$length(vertexColors) === 4 && t2) {
            c1 = t3.$index(vertexColors, 0);
            c2 = t3.$index(vertexColors, 1);
            c3 = t3.$index(vertexColors, 2);
            c4 = t3.$index(vertexColors, 3);
          } else {
            c4 = faceColor;
            c3 = c4;
            c2 = c3;
            c1 = c2;
          }
          t3 = J.getInterceptor$x(c1);
          t4 = t3.get$r(c1);
          t5 = colorArray.length;
          if (offset_color >= t5)
            return H.ioore(colorArray, offset_color);
          colorArray[offset_color] = t4;
          t4 = offset_color + 1;
          t6 = c1.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t6;
          t6 = offset_color + 2;
          t3 = t3.get$b(c1);
          if (t6 >= t5)
            return H.ioore(colorArray, t6);
          colorArray[t6] = t3;
          t3 = offset_color + 3;
          t6 = J.getInterceptor$x(c2);
          t4 = t6.get$r(c2);
          if (t3 >= t5)
            return H.ioore(colorArray, t3);
          colorArray[t3] = t4;
          t4 = offset_color + 4;
          t3 = c2.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t3;
          t3 = offset_color + 5;
          t6 = t6.get$b(c2);
          if (t3 >= t5)
            return H.ioore(colorArray, t3);
          colorArray[t3] = t6;
          t6 = offset_color + 6;
          t3 = J.getInterceptor$x(c3);
          t4 = t3.get$r(c3);
          if (t6 >= t5)
            return H.ioore(colorArray, t6);
          colorArray[t6] = t4;
          t4 = offset_color + 7;
          t6 = c3.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t6;
          t6 = offset_color + 8;
          t3 = t3.get$b(c3);
          if (t6 >= t5)
            return H.ioore(colorArray, t6);
          colorArray[t6] = t3;
          t3 = offset_color + 9;
          t6 = J.getInterceptor$x(c4);
          t4 = t6.get$r(c4);
          if (t3 >= t5)
            return H.ioore(colorArray, t3);
          colorArray[t3] = t4;
          t4 = offset_color + 10;
          t3 = c4.get$g();
          if (t4 >= t5)
            return H.ioore(colorArray, t4);
          colorArray[t4] = t3;
          t3 = offset_color + 11;
          t6 = t6.get$b(c4);
          if (t3 >= t5)
            return H.ioore(colorArray, t3);
          colorArray[t3] = t6;
          offset_color += 12;
        }
        if (offset_color > 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglColorBuffer());
          J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
        }
      }
      if (dirtyTangents === true && geometry.get$hasTangents()) {
        fl = chunk_faces3.length;
        for (t1 = J.getInterceptor$asx(obj_faces), f = 0, offset_tangent = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          face = t1.$index(obj_faces, chunk_faces3[f]);
          vertexTangents = face.get$vertexTangents();
          t2 = vertexTangents.length;
          if (0 >= t2)
            return H.ioore(vertexTangents, 0);
          t10 = vertexTangents[0];
          if (1 >= t2)
            return H.ioore(vertexTangents, 1);
          t20 = vertexTangents[1];
          if (2 >= t2)
            return H.ioore(vertexTangents, 2);
          t3 = vertexTangents[2];
          t2 = J.getInterceptor$x(t10);
          t4 = t2.get$x(t10);
          t5 = tangentArray.length;
          if (offset_tangent >= t5)
            return H.ioore(tangentArray, offset_tangent);
          tangentArray[offset_tangent] = t4;
          t4 = offset_tangent + 1;
          t6 = t2.get$y(t10);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t6;
          t6 = offset_tangent + 2;
          t4 = t2.get$z(t10);
          if (t6 >= t5)
            return H.ioore(tangentArray, t6);
          tangentArray[t6] = t4;
          t4 = offset_tangent + 3;
          t10 = t2.get$w(t10);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t10;
          t10 = offset_tangent + 4;
          t4 = J.getInterceptor$x(t20);
          t2 = t4.get$x(t20);
          if (t10 >= t5)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t2;
          t2 = offset_tangent + 5;
          t10 = t4.get$y(t20);
          if (t2 >= t5)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t10;
          t10 = offset_tangent + 6;
          t2 = t4.get$z(t20);
          if (t10 >= t5)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t2;
          t2 = offset_tangent + 7;
          t20 = t4.get$w(t20);
          if (t2 >= t5)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t20;
          t20 = offset_tangent + 8;
          t2 = J.getInterceptor$x(t3);
          t4 = t2.get$x(t3);
          if (t20 >= t5)
            return H.ioore(tangentArray, t20);
          tangentArray[t20] = t4;
          t4 = offset_tangent + 9;
          t20 = t2.get$y(t3);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t20;
          t20 = offset_tangent + 10;
          t4 = t2.get$z(t3);
          if (t20 >= t5)
            return H.ioore(tangentArray, t20);
          tangentArray[t20] = t4;
          t4 = offset_tangent + 11;
          t3 = t2.get$w(t3);
          if (t4 >= t5)
            return H.ioore(tangentArray, t4);
          tangentArray[t4] = t3;
          offset_tangent += 12;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          face = t1.$index(obj_faces, chunk_faces4[f]);
          vertexTangents = face.get$vertexTangents();
          t2 = vertexTangents.length;
          if (0 >= t2)
            return H.ioore(vertexTangents, 0);
          t10 = vertexTangents[0];
          if (1 >= t2)
            return H.ioore(vertexTangents, 1);
          t20 = vertexTangents[1];
          if (2 >= t2)
            return H.ioore(vertexTangents, 2);
          t3 = vertexTangents[2];
          if (3 >= t2)
            return H.ioore(vertexTangents, 3);
          t4 = vertexTangents[3];
          t2 = J.getInterceptor$x(t10);
          t5 = t2.get$x(t10);
          t6 = tangentArray.length;
          if (offset_tangent >= t6)
            return H.ioore(tangentArray, offset_tangent);
          tangentArray[offset_tangent] = t5;
          t5 = offset_tangent + 1;
          t7 = t2.get$y(t10);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t7;
          t7 = offset_tangent + 2;
          t5 = t2.get$z(t10);
          if (t7 >= t6)
            return H.ioore(tangentArray, t7);
          tangentArray[t7] = t5;
          t5 = offset_tangent + 3;
          t10 = t2.get$w(t10);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t10;
          t10 = offset_tangent + 4;
          t5 = J.getInterceptor$x(t20);
          t2 = t5.get$x(t20);
          if (t10 >= t6)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t2;
          t2 = offset_tangent + 5;
          t10 = t5.get$y(t20);
          if (t2 >= t6)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t10;
          t10 = offset_tangent + 6;
          t2 = t5.get$z(t20);
          if (t10 >= t6)
            return H.ioore(tangentArray, t10);
          tangentArray[t10] = t2;
          t2 = offset_tangent + 7;
          t20 = t5.get$w(t20);
          if (t2 >= t6)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t20;
          t20 = offset_tangent + 8;
          t2 = J.getInterceptor$x(t3);
          t5 = t2.get$x(t3);
          if (t20 >= t6)
            return H.ioore(tangentArray, t20);
          tangentArray[t20] = t5;
          t5 = offset_tangent + 9;
          t20 = t2.get$y(t3);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t20;
          t20 = offset_tangent + 10;
          t5 = t2.get$z(t3);
          if (t20 >= t6)
            return H.ioore(tangentArray, t20);
          tangentArray[t20] = t5;
          t5 = offset_tangent + 11;
          t3 = t2.get$w(t3);
          if (t5 >= t6)
            return H.ioore(tangentArray, t5);
          tangentArray[t5] = t3;
          t3 = offset_tangent + 12;
          t5 = J.getInterceptor$x(t4);
          t2 = t5.get$x(t4);
          if (t3 >= t6)
            return H.ioore(tangentArray, t3);
          tangentArray[t3] = t2;
          t2 = offset_tangent + 13;
          t3 = t5.get$y(t4);
          if (t2 >= t6)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t3;
          t3 = offset_tangent + 14;
          t2 = t5.get$z(t4);
          if (t3 >= t6)
            return H.ioore(tangentArray, t3);
          tangentArray[t3] = t2;
          t2 = offset_tangent + 15;
          t4 = t5.get$w(t4);
          if (t2 >= t6)
            return H.ioore(tangentArray, t2);
          tangentArray[t2] = t4;
          offset_tangent += 16;
        }
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglTangentBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, tangentArray, hint);
      }
      if (dirtyNormals === true && normalType !== 0) {
        fl = chunk_faces3.length;
        for (t1 = J.getInterceptor$asx(obj_faces), f = 0, i = null, vn = null, offset_normal = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          face = t1.$index(obj_faces, chunk_faces3[f]);
          vertexNormals = face.get$vertexNormals();
          faceNormal = face.get$normal();
          if (vertexNormals.length === 3 && needsSmoothNormals)
            for (i = 0; i < 3; ++i) {
              if (i >= vertexNormals.length)
                return H.ioore(vertexNormals, i);
              vn = vertexNormals[i];
              t2 = J.getInterceptor$x(vn);
              t3 = t2.get$x(vn);
              t4 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t4)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t3;
              t3 = offset_normal + 1;
              t5 = t2.get$y(vn);
              if (t3 >= t4)
                return H.ioore(normalArray, t3);
              normalArray[t3] = t5;
              t5 = offset_normal + 2;
              t2 = t2.get$z(vn);
              if (t5 >= t4)
                return H.ioore(normalArray, t5);
              normalArray[t5] = t2;
              offset_normal += 3;
            }
          else
            for (t2 = J.getInterceptor$x(faceNormal), i = 0; i < 3; ++i) {
              t3 = t2.get$x(faceNormal);
              t4 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t4)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t3;
              t3 = offset_normal + 1;
              t5 = t2.get$y(faceNormal);
              if (t3 >= t4)
                return H.ioore(normalArray, t3);
              normalArray[t3] = t5;
              t5 = offset_normal + 2;
              t3 = t2.get$z(faceNormal);
              if (t5 >= t4)
                return H.ioore(normalArray, t5);
              normalArray[t5] = t3;
              offset_normal += 3;
            }
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          face = t1.$index(obj_faces, chunk_faces4[f]);
          vertexNormals = face.get$vertexNormals();
          faceNormal = face.get$normal();
          if (vertexNormals.length === 4 && needsSmoothNormals)
            for (i = 0; i < 4; ++i) {
              if (i >= vertexNormals.length)
                return H.ioore(vertexNormals, i);
              vn = vertexNormals[i];
              t2 = J.getInterceptor$x(vn);
              t3 = t2.get$x(vn);
              t4 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t4)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t3;
              t3 = offset_normal + 1;
              t5 = t2.get$y(vn);
              if (t3 >= t4)
                return H.ioore(normalArray, t3);
              normalArray[t3] = t5;
              t5 = offset_normal + 2;
              t2 = t2.get$z(vn);
              if (t5 >= t4)
                return H.ioore(normalArray, t5);
              normalArray[t5] = t2;
              offset_normal += 3;
            }
          else
            for (t2 = J.getInterceptor$x(faceNormal), i = 0; i < 4; ++i) {
              t3 = t2.get$x(faceNormal);
              t4 = normalArray.length;
              if (offset_normal < 0 || offset_normal >= t4)
                return H.ioore(normalArray, offset_normal);
              normalArray[offset_normal] = t3;
              t3 = offset_normal + 1;
              t5 = t2.get$y(faceNormal);
              if (t3 >= t4)
                return H.ioore(normalArray, t3);
              normalArray[t3] = t5;
              t5 = offset_normal + 2;
              t3 = t2.get$z(faceNormal);
              if (t5 >= t4)
                return H.ioore(normalArray, t5);
              normalArray[t5] = t3;
              offset_normal += 3;
            }
        }
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglNormalBuffer());
        J.bufferDataTyped$3$x(this._gl, 34962, normalArray, hint);
      } else
        i = null;
      t1 = dirtyUvs === true;
      if (t1 && J.get$isEmpty$asx(obj_uvs) !== true && uvType) {
        fl = chunk_faces3.length;
        for (t2 = J.getInterceptor$asx(obj_uvs), f = 0, uvi = null, offset_uv = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          uv = t2.$index(obj_uvs, chunk_faces3[f]);
          if (uv == null)
            continue;
          for (t3 = J.getInterceptor$asx(uv), i = 0; i < 3; ++i) {
            uvi = t3.$index(uv, i);
            t4 = uvi.get$u();
            t5 = uvArray.length;
            if (offset_uv < 0 || offset_uv >= t5)
              return H.ioore(uvArray, offset_uv);
            uvArray[offset_uv] = t4;
            t4 = offset_uv + 1;
            t6 = uvi.get$v();
            if (t4 >= t5)
              return H.ioore(uvArray, t4);
            uvArray[t4] = t6;
            offset_uv += 2;
          }
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          uv = t2.$index(obj_uvs, chunk_faces4[f]);
          if (uv == null)
            continue;
          for (t3 = J.getInterceptor$asx(uv), i = 0; i < 4; ++i) {
            uvi = t3.$index(uv, i);
            t4 = uvi.get$u();
            t5 = uvArray.length;
            if (offset_uv < 0 || offset_uv >= t5)
              return H.ioore(uvArray, offset_uv);
            uvArray[offset_uv] = t4;
            t4 = offset_uv + 1;
            t6 = uvi.get$v();
            if (t4 >= t5)
              return H.ioore(uvArray, t4);
            uvArray[t4] = t6;
            offset_uv += 2;
          }
        }
        if (offset_uv > 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglUVBuffer());
          J.bufferDataTyped$3$x(this._gl, 34962, uvArray, hint);
        }
      }
      if (t1 && obj_uvs2 != null && uvType) {
        fl = chunk_faces3.length;
        for (t1 = J.getInterceptor$asx(obj_uvs2), f = 0, uv2i = null, offset_uv2 = 0; f < fl; ++f) {
          if (f >= chunk_faces3.length)
            return H.ioore(chunk_faces3, f);
          uv2 = t1.$index(obj_uvs2, chunk_faces3[f]);
          if (uv2 == null)
            continue;
          for (t2 = J.getInterceptor$asx(uv2), i = 0; i < 3; ++i) {
            uv2i = t2.$index(uv2, i);
            t3 = uv2i.get$u();
            t4 = uv2Array.length;
            if (offset_uv2 < 0 || offset_uv2 >= t4)
              return H.ioore(uv2Array, offset_uv2);
            uv2Array[offset_uv2] = t3;
            t3 = offset_uv2 + 1;
            t5 = uv2i.get$v();
            if (t3 >= t4)
              return H.ioore(uv2Array, t3);
            uv2Array[t3] = t5;
            offset_uv2 += 2;
          }
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f >= chunk_faces4.length)
            return H.ioore(chunk_faces4, f);
          uv2 = t1.$index(obj_uvs2, chunk_faces4[f]);
          if (uv2 == null)
            continue;
          for (t2 = J.getInterceptor$asx(uv2), i = 0; i < 4; ++i) {
            uv2i = t2.$index(uv2, i);
            t3 = uv2i.get$u();
            t4 = uv2Array.length;
            if (offset_uv2 < 0 || offset_uv2 >= t4)
              return H.ioore(uv2Array, offset_uv2);
            uv2Array[offset_uv2] = t3;
            t3 = offset_uv2 + 1;
            t5 = uv2i.get$v();
            if (t3 >= t4)
              return H.ioore(uv2Array, t3);
            uv2Array[t3] = t5;
            offset_uv2 += 2;
          }
        }
        if (offset_uv2 > 0) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglUV2Buffer());
          J.bufferDataTyped$3$x(this._gl, 34962, uv2Array, hint);
        }
      }
      if (dirtyElements === true) {
        fl = chunk_faces3.length;
        for (f = 0, vertexIndex = 0, offset_face = 0, offset_line = 0; f < fl; ++f) {
          t1 = faceArray.length;
          if (offset_face >= t1)
            return H.ioore(faceArray, offset_face);
          faceArray[offset_face] = vertexIndex;
          t2 = offset_face + 1;
          t3 = vertexIndex + 1;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t3;
          t2 = offset_face + 2;
          t4 = vertexIndex + 2;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t4;
          offset_face += 3;
          t2 = lineArray.length;
          if (offset_line >= t2)
            return H.ioore(lineArray, offset_line);
          lineArray[offset_line] = vertexIndex;
          t1 = offset_line + 1;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t1 = offset_line + 2;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = vertexIndex;
          t1 = offset_line + 3;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t4;
          t1 = offset_line + 4;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t3 = offset_line + 5;
          if (t3 >= t2)
            return H.ioore(lineArray, t3);
          lineArray[t3] = t4;
          offset_line += 6;
          vertexIndex += 3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = faceArray.length;
          if (offset_face >= t1)
            return H.ioore(faceArray, offset_face);
          faceArray[offset_face] = vertexIndex;
          t2 = offset_face + 1;
          t3 = vertexIndex + 1;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t3;
          t2 = offset_face + 2;
          t4 = vertexIndex + 3;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t4;
          t2 = offset_face + 3;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t3;
          t2 = offset_face + 4;
          t5 = vertexIndex + 2;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t5;
          t2 = offset_face + 5;
          if (t2 >= t1)
            return H.ioore(faceArray, t2);
          faceArray[t2] = t4;
          offset_face += 6;
          t2 = lineArray.length;
          if (offset_line >= t2)
            return H.ioore(lineArray, offset_line);
          lineArray[offset_line] = vertexIndex;
          t1 = offset_line + 1;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t1 = offset_line + 2;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = vertexIndex;
          t1 = offset_line + 3;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t4;
          t1 = offset_line + 4;
          if (t1 >= t2)
            return H.ioore(lineArray, t1);
          lineArray[t1] = t3;
          t3 = offset_line + 5;
          if (t3 >= t2)
            return H.ioore(lineArray, t3);
          lineArray[t3] = t5;
          t3 = offset_line + 6;
          if (t3 >= t2)
            return H.ioore(lineArray, t3);
          lineArray[t3] = t5;
          t5 = offset_line + 7;
          if (t5 >= t2)
            return H.ioore(lineArray, t5);
          lineArray[t5] = t4;
          offset_line += 8;
          vertexIndex += 4;
        }
        J.bindBuffer$2$x(this._gl, 34963, geometryGroup.get$__webglFaceBuffer());
        J.bufferDataTyped$3$x(this._gl, 34963, faceArray, hint);
        J.bindBuffer$2$x(this._gl, 34963, geometryGroup.get$__webglLineBuffer());
        J.bufferDataTyped$3$x(this._gl, 34963, lineArray, hint);
      }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (i = 0, offset_custom = 0, offset_customSrc = 0, value = null; i < il; ++i) {
          if (i >= customAttributes.length)
            return H.ioore(customAttributes, i);
          customAttributes[i].get$__original().get$needsUpdate();
          continue;
        }
      }
      if (dispose) {
        geometryGroup.set$__inittedArrays(false);
        geometryGroup.set$__colorArray(null);
        geometryGroup.set$__normalArray(null);
        geometryGroup.set$__tangentArray(null);
        geometryGroup.set$__uvArray(null);
        geometryGroup.set$__uv2Array(null);
        geometryGroup.set$__faceArray(null);
        geometryGroup.set$__vertexArray(null);
        geometryGroup.set$__lineArray(null);
        geometryGroup.set$__skinIndexArray(null);
        geometryGroup.set$__skinWeightArray(null);
      }
    },
    renderBufferImmediate$3: function(object, program, material) {
      var t1;
      object.get$hasPositions();
      object.get$hasNormals();
      object.get$hasUvs();
      object.get$hasColors();
      object.get$hasPositions();
      object.get$hasNormals();
      object.get$hasUvs();
      object.get$hasColors();
      t1 = J.getInterceptor$x(object);
      J.drawArrays$3$x(this._gl, 4, 0, t1.get$count(object));
      t1.set$count(object, 0);
    },
    renderBufferDirect$6: function(camera, lights, fog, material, webglgeometry, webglobject) {
      var program, attributes, wireframeBit, geometryHash, updateBuffers, object, geometry, t1, index, offsets, il, i, t2, startIndex, position, positionSize, normal, normalSize, uv, uvSize, color, colorSize, tangent, tangentSize, t3, t4;
      if (J.get$visible$x(material) !== true)
        return;
      program = this.setProgram$5(camera, lights, fog, material, webglobject);
      attributes = program.attributes;
      wireframeBit = material.get$wireframe() ? 1 : 0;
      geometryHash = J.$add$ns(J.$add$ns(J.$mul$ns(J.get$id$x(webglgeometry), 16777215), program.id * 2), wireframeBit);
      if (geometryHash !== this._currentGeometryGroupHash) {
        this._currentGeometryGroupHash = geometryHash;
        updateBuffers = true;
      } else
        updateBuffers = false;
      if (updateBuffers)
        this.disableAttributes$0();
      object = webglobject.get$object();
      geometry = webglgeometry.get$_geometry();
      t1 = J.getInterceptor(object);
      if (!!t1.$isMesh) {
        index = geometry.get$aIndex();
        offsets = geometry.get$offsets();
        offsets.get$length(offsets).$gt(0, 1);
        for (il = offsets.get$length(offsets), t1 = this.info, i = 0; C.JSInt_methods.$lt(i, il); ++i) {
          t2 = offsets.$index(0, i);
          startIndex = t2.get$index(t2);
          if (updateBuffers) {
            position = geometry.get$attributes(geometry).$index(0, "position");
            positionSize = position.get$itemSize();
            position.get$buffer(position).bind$1(34962);
            this.enableAttribute$1(attributes.$index(0, "position"));
            J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), positionSize, 5126, false, 0, startIndex.$mul(0, positionSize).$mul(0, 4));
            normal = geometry.get$attributes(geometry).$index(0, "normal");
            if (J.$ge$n(attributes.$index(0, "normal"), 0) && true) {
              normalSize = normal.get$itemSize();
              normal.get$buffer(normal).bind$1(34962);
              this.enableAttribute$1(attributes.$index(0, "normal"));
              J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "normal"), normalSize, 5126, false, 0, startIndex.$mul(0, normalSize).$mul(0, 4));
            }
            uv = geometry.get$attributes(geometry).$index(0, "uv");
            if (J.$ge$n(attributes.$index(0, "uv"), 0) && true) {
              uvSize = uv.get$itemSize();
              uv.get$buffer(uv).bind$1(34962);
              this.enableAttribute$1(attributes.$index(0, "uv"));
              J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "uv"), uvSize, 5126, false, 0, startIndex.$mul(0, uvSize).$mul(0, 4));
            }
            color = geometry.get$attributes(geometry).$index(0, "color");
            if (J.$ge$n(attributes.$index(0, "color"), 0) && true) {
              colorSize = color.get$itemSize();
              color.get$buffer(color).bind$1(34962);
              this.enableAttribute$1(attributes.$index(0, "color"));
              J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "color"), colorSize, 5126, false, 0, startIndex.$mul(0, colorSize).$mul(0, 4));
            }
            tangent = geometry.get$attributes(geometry).$index(0, "tangent");
            if (J.$ge$n(attributes.$index(0, "tangent"), 0) && true) {
              tangentSize = tangent.get$itemSize();
              tangent.get$buffer(tangent).bind$1(34962);
              this.enableAttribute$1(attributes.$index(0, "tangent"));
              J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "tangent"), tangentSize, 5126, false, 0, startIndex.$mul(0, tangentSize).$mul(0, 4));
            }
            index.get$buffer(index).bind$1(34963);
          }
          t2 = this._gl;
          t3 = offsets.$index(0, i);
          t3 = t3.get$count(t3);
          t4 = offsets.$index(0, i);
          J.drawElements$4$x(t2, 4, t3, 5123, t4.get$start(t4).$mul(0, 2));
          t4 = t1.render;
          t4.set$calls(t4.get$calls() + 1);
          t4 = t1.render;
          t3 = t4.get$vertices();
          t2 = offsets.$index(0, i);
          t4.set$vertices(C.JSNumber_methods.$add(t3, t2.get$count(t2)));
          t2 = t1.render;
          t3 = t2.get$faces();
          t4 = offsets.$index(0, i);
          t2.set$faces(C.JSInt_methods.$add(t3, t4.get$count(t4).$tdiv(0, 3)));
        }
      } else if (!!t1.$isParticleSystem)
        if (updateBuffers) {
          position = geometry.get$attributes(geometry).$index(0, "position");
          positionSize = position.get$itemSize();
          position.get$buffer(position).bind$1(34962);
          this.enableAttribute$1(attributes.$index(0, "position"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), positionSize, 5126, false, 0, 0);
          color = geometry.get$attributes(geometry).$index(0, "color");
          if (J.$ge$n(attributes.$index(0, "color"), 0) && true) {
            colorSize = color.get$itemSize();
            color.get$buffer(color).bind$1(34962);
            this.enableAttribute$1(attributes.$index(0, "color"));
            J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "color"), colorSize, 5126, false, 0, 0);
          }
          J.drawArrays$3$x(this._gl, 0, 0, position.get$numItems().$tdiv(0, 3));
          t1 = this.info;
          t2 = t1.render;
          t2.set$calls(t2.get$calls() + 1);
          t1 = t1.render;
          t2 = J.getInterceptor$x(t1);
          t2.set$points(t1, C.JSNumber_methods.$add(t2.get$points(t1), position.get$numItems().$tdiv(0, 3)));
        }
    },
    renderBuffer$6: function(camera, lights, fog, material, geometryGroup, object) {
      var t1, webglobject, webglcamera, t2, program, attributes, wireframeBit, geometryGroupHash, updateBuffers, il, i, attribute, t3, t4, primitives;
      t1 = J.getInterceptor(object);
      if (!!t1.$isWebGLObject)
        webglobject = object;
      else {
        if (t1.$index(object, "__webglObject") == null)
          t1.$indexSet(object, "__webglObject", new S.WebGLObject(false, false, null, null, null, null, null, null, object, null, null, true, 0, null));
        webglobject = t1.$index(object, "__webglObject");
      }
      object = webglobject.get$object();
      t1 = J.getInterceptor(camera);
      if (!!t1.$isWebGLCamera)
        webglcamera = camera;
      else {
        if (t1.$index(camera, "__webglCamera") == null) {
          t2 = new Float32Array(16);
          t1.$indexSet(camera, "__webglCamera", new S.WebGLCamera(camera, t2, new Float32Array(16)));
        }
        webglcamera = t1.$index(camera, "__webglCamera");
      }
      webglcamera.get$_camera();
      if (J.get$visible$x(material) !== true)
        return;
      program = this.setProgram$5(webglcamera, lights, fog, material, webglobject);
      attributes = program.attributes;
      wireframeBit = material.get$wireframe() ? 1 : 0;
      geometryGroupHash = J.$add$ns(J.$add$ns(J.$mul$ns(J.get$id$x(geometryGroup), 16777215), program.id * 2), wireframeBit);
      if (geometryGroupHash !== this._currentGeometryGroupHash) {
        this._currentGeometryGroupHash = geometryGroupHash;
        updateBuffers = true;
      } else
        updateBuffers = false;
      if (updateBuffers)
        this.disableAttributes$0();
      if (material.get$morphTargets() !== true && J.$ge$n(attributes.$index(0, "position"), 0)) {
        if (updateBuffers) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
          this.enableAttribute$1(attributes.$index(0, "position"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), 3, 5126, false, 0, 0);
        }
      } else if (webglobject.get$morphTargetBase() !== 0)
        this.setupMorphTargets$3(material, geometryGroup, webglobject);
      if (updateBuffers) {
        if (geometryGroup.get$__webglCustomAttributesList() != null) {
          il = geometryGroup.get$__webglCustomAttributesList().length;
          for (i = 0; i < il; ++i) {
            t1 = geometryGroup.get$__webglCustomAttributesList();
            if (i >= t1.length)
              return H.ioore(t1, i);
            attribute = t1[i];
            t1 = J.getInterceptor$x(attribute);
            if (J.$ge$n(attributes.$index(0, t1.get$buffer(attribute).get$belongsToAttribute()), 0)) {
              t1.get$buffer(attribute).bind$1(34962);
              this.enableAttribute$1(attributes.$index(0, t1.get$buffer(attribute).get$belongsToAttribute()));
              J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, t1.get$buffer(attribute).get$belongsToAttribute()), t1.get$size(attribute), 5126, false, 0, 0);
            }
          }
        }
        if (J.$ge$n(attributes.$index(0, "color"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglColorBuffer());
          this.enableAttribute$1(attributes.$index(0, "color"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "color"), 3, 5126, false, 0, 0);
        }
        if (J.$ge$n(attributes.$index(0, "normal"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglNormalBuffer());
          this.enableAttribute$1(attributes.$index(0, "normal"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "normal"), 3, 5126, false, 0, 0);
        }
        if (J.$ge$n(attributes.$index(0, "tangent"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglTangentBuffer());
          this.enableAttribute$1(attributes.$index(0, "tangent"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "tangent"), 4, 5126, false, 0, 0);
        }
        if (J.$ge$n(attributes.$index(0, "uv"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglUVBuffer());
          this.enableAttribute$1(attributes.$index(0, "uv"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "uv"), 2, 5126, false, 0, 0);
        }
        if (J.$ge$n(attributes.$index(0, "uv2"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglUV2Buffer());
          this.enableAttribute$1(attributes.$index(0, "uv2"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "uv2"), 2, 5126, false, 0, 0);
        }
        if (material.get$skinning() && J.$ge$n(attributes.$index(0, "skinIndex"), 0) && J.$ge$n(attributes.$index(0, "skinWeight"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglSkinIndicesBuffer());
          this.enableAttribute$1(attributes.$index(0, "skinIndex"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "skinIndex"), 4, 5126, false, 0, 0);
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglSkinWeightsBuffer());
          this.enableAttribute$1(attributes.$index(0, "skinWeight"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "skinWeight"), 4, 5126, false, 0, 0);
        }
        if (J.$ge$n(attributes.$index(0, "lineDistance"), 0)) {
          J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglLineDistanceBuffer());
          this.enableAttribute$1(attributes.$index(0, "lineDistance"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "lineDistance"), 1, 5126, false, 0, 0);
        }
      }
      t1 = J.getInterceptor(object);
      if (!!t1.$isMesh) {
        if (material.get$wireframe()) {
          t1 = material.get$wireframeLinewidth();
          t2 = this._oldLineWidth;
          if (t1 == null ? t2 != null : t1 !== t2) {
            J.lineWidth$1$x(this._gl, t1);
            this._oldLineWidth = t1;
          }
          if (updateBuffers)
            J.bindBuffer$2$x(this._gl, 34963, geometryGroup.get$__webglLineBuffer());
          J.drawElements$4$x(this._gl, 1, geometryGroup.get$__webglLineCount(), 5123, 0);
        } else {
          if (updateBuffers)
            J.bindBuffer$2$x(this._gl, 34963, geometryGroup.get$__webglFaceBuffer());
          J.drawElements$4$x(this._gl, 4, geometryGroup.get$__webglFaceCount(), 5123, 0);
        }
        t1 = this.info;
        t2 = t1.render;
        t2.set$calls(t2.get$calls() + 1);
        t2 = t1.render;
        t3 = t2.get$vertices();
        t4 = geometryGroup.get$__webglFaceCount();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.set$vertices(t3 + t4);
        t1 = t1.render;
        t4 = t1.get$faces();
        t3 = geometryGroup.get$__webglFaceCount();
        if (typeof t3 !== "number")
          return t3.$tdiv();
        t1.set$faces(t4 + C.JSInt_methods._tdivFast$1(t3, 3));
      } else if (!!t1.$isLine) {
        primitives = object.type === 0 ? 3 : 1;
        t1 = material.get$linewidth();
        t2 = this._oldLineWidth;
        if (t1 == null ? t2 != null : t1 !== t2) {
          J.lineWidth$1$x(this._gl, t1);
          this._oldLineWidth = t1;
        }
        J.drawArrays$3$x(this._gl, primitives, 0, geometryGroup.get$__webglLineCount());
        t1 = this.info.render;
        t1.set$calls(t1.get$calls() + 1);
      } else if (!!t1.$isParticleSystem) {
        J.drawArrays$3$x(this._gl, 0, 0, geometryGroup.get$__webglParticleCount());
        t1 = this.info;
        t2 = t1.render;
        t2.set$calls(t2.get$calls() + 1);
        t1 = t1.render;
        t2 = J.getInterceptor$x(t1);
        t3 = t2.get$points(t1);
        t4 = geometryGroup.get$__webglParticleCount();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.set$points(t1, t3 + t4);
      }
    },
    enableAttribute$1: function(attribute) {
      var k, t1;
      k = J.toString$0(attribute);
      t1 = this._enabledAttributes;
      if (t1.$index(0, k) == null || t1.$index(0, k) !== true) {
        J.enableVertexAttribArray$1$x(this._gl, attribute);
        t1.$indexSet(0, k, true);
      }
    },
    disableAttributes$0: function() {
      this._enabledAttributes.forEach$1(0, new S.WebGLRenderer_disableAttributes_closure(this));
    },
    setupMorphTargets$3: function(material, geometryGroup, object) {
      var attributes, t1, t2, t3, activeInfluenceIndices, influences, il, i, influence, influenceIndex, m;
      attributes = material.get$program().attributes;
      if (object.get$morphTargetBase() !== -1 && J.$ge$n(attributes.$index(0, "position"), 0)) {
        t1 = this._gl;
        t2 = geometryGroup.get$__webglMorphTargetsBuffers();
        t3 = object.get$morphTargetBase();
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        J.bindBuffer$2$x(t1, 34962, t2[t3]);
        this.enableAttribute$1(attributes.$index(0, "position"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), 3, 5126, false, 0, 0);
      } else if (J.$ge$n(attributes.$index(0, "position"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
        this.enableAttribute$1(attributes.$index(0, "position"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "position"), 3, 5126, false, 0, 0);
      }
      object.get$morphTargetForcedOrder().length;
      activeInfluenceIndices = [];
      influences = object.get$morphTargetInfluences();
      il = influences.length;
      for (i = 0; i < il; ++i) {
        if (i >= influences.length)
          return H.ioore(influences, i);
        influence = influences[i];
        if (influence > 0)
          activeInfluenceIndices.push([i, influence]);
      }
      if (activeInfluenceIndices.length > material.get$numSupportedMorphTargets()) {
        t1 = this.get$numericalSort();
        C.JSArray_methods.checkMutable$1(activeInfluenceIndices, "sort");
        H.IterableMixinWorkaround_sortList(activeInfluenceIndices, t1);
        C.JSArray_methods.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
      } else if (activeInfluenceIndices.length > material.get$numSupportedMorphNormals()) {
        t1 = this.get$numericalSort();
        C.JSArray_methods.checkMutable$1(activeInfluenceIndices, "sort");
        H.IterableMixinWorkaround_sortList(activeInfluenceIndices, t1);
      } else if (activeInfluenceIndices.length === 0)
        activeInfluenceIndices.push([0, 0]);
      for (influenceIndex = null, m = 0; m < material.get$numSupportedMorphTargets();) {
        t1 = activeInfluenceIndices.length;
        if (m < t1) {
          t2 = activeInfluenceIndices[m];
          t2 = t2 != null && t2.length !== 0;
        } else
          t2 = false;
        if (t2) {
          if (m >= t1)
            return H.ioore(activeInfluenceIndices, m);
          t1 = activeInfluenceIndices[m];
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          influenceIndex = t1[0];
          t1 = this._gl;
          t2 = geometryGroup.get$__webglMorphTargetsBuffers();
          if (influenceIndex >>> 0 !== influenceIndex || influenceIndex >= t2.length)
            return H.ioore(t2, influenceIndex);
          J.bindBuffer$2$x(t1, 34962, t2[influenceIndex]);
          this.enableAttribute$1(attributes.$index(0, "morphTarget" + m));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "morphTarget" + m), 3, 5126, false, 0, 0);
          if (material.get$morphNormals() === true) {
            t1 = this._gl;
            t2 = geometryGroup.get$__webglMorphNormalsBuffers();
            if (influenceIndex >= t2.length)
              return H.ioore(t2, influenceIndex);
            J.bindBuffer$2$x(t1, 34962, t2[influenceIndex]);
            this.enableAttribute$1(attributes.$index(0, "morphNormal" + m));
            J.vertexAttribPointer$6$x(this._gl, attributes.$index(0, "morphNormal" + m), 3, 5126, false, 0, 0);
          }
          t1 = object.get$__webglMorphTargetInfluences();
          if (influenceIndex >= influences.length)
            return H.ioore(influences, influenceIndex);
          t2 = influences[influenceIndex];
          if (m >= t1.length)
            return H.ioore(t1, m);
          t1[m] = t2;
        } else {
          t1 = object.get$__webglMorphTargetInfluences();
          if (m >= t1.length)
            return H.ioore(t1, m);
          t1[m] = 0;
        }
        ++m;
      }
      if (material.get$program().uniforms.$index(0, "morphTargetInfluences") != null)
        J.uniform1fv$2$x(this._gl, material.get$program().uniforms.$index(0, "morphTargetInfluences"), object.get$__webglMorphTargetInfluences());
    },
    painterSort$2: [function(a, b) {
      var t1, t2;
      t1 = J.getInterceptor$x(a);
      if (!J.get$isNaN$n(t1.get$z(a))) {
        t2 = J.getInterceptor$x(b);
        t2 = J.get$isNaN$n(t2.get$z(b)) || J.get$isInfinite$n(t1.get$z(a)) || J.get$isInfinite$n(t2.get$z(b));
      } else
        t2 = true;
      return t2 ? 0 : C.JSNumber_methods.toInt$0(J.$sub$n(J.get$z$x(b), t1.get$z(a)));
    }, "call$2", "get$painterSort", 4, 0, 61, 35, 58],
    numericalSort$2: [function(a, b) {
      return J.toInt$0$n(J.$sub$n(J.$index$asx(b, 0), J.$index$asx(a, 0)));
    }, "call$2", "get$numericalSort", 4, 0, 61],
    render$2: [function(scene, camera) {
      return this._render$2(scene, camera);
    }, "call$2", "get$render", 4, 0, 100],
    _render$4$forceClear$renderTarget: function(scene, c, forceClear, renderTarget) {
      var lights, fog, camera, t1, t2, renderList, il, t3, i, webglObject, object, t4, buffer, meshMaterial, materialIndex, t5, t6, material;
      lights = scene.lights;
      fog = scene.fog;
      this._currentMaterialId = -1;
      this._lightsNeedUpdate = true;
      if (this.autoUpdateScene)
        scene.updateMatrixWorld$0();
      camera = S.WebGLCamera_WebGLCamera(c);
      if (J.get$parent$x(camera) == null)
        camera.updateMatrixWorld$0();
      camera.get$matrixWorldInverse().copyInverse$1(camera.get$matrixWorld());
      this._projScreenMatrix.setFrom$1(camera.get$projectionMatrix()).multiply$1(0, camera.get$matrixWorldInverse());
      t1 = this._frustum;
      t1.setFromMatrix$1(this._projScreenMatrix);
      if (this.autoUpdateObjects)
        this.initWebGLObjects$1(scene);
      this.renderPlugins$3(this.renderPluginsPre, scene, camera);
      t2 = this.info;
      t2.render.set$calls(0);
      t2.render.set$vertices(0);
      t2.render.set$faces(0);
      J.set$points$x(t2.render, 0);
      this.setRenderTarget$1(renderTarget);
      if (this.autoClear || forceClear)
        this.clear$3(0, this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
      renderList = scene.get$_data().$index(0, "__webglObjects");
      t2 = J.getInterceptor$asx(renderList);
      il = t2.get$length(renderList);
      if (typeof il !== "number")
        return H.iae(il);
      t3 = this.sortObjects;
      i = 0;
      for (; i < il; ++i) {
        webglObject = t2.$index(renderList, i);
        object = webglObject.get$object();
        webglObject.set$render(false);
        t4 = J.getInterceptor$x(object);
        if (t4.get$visible(object) === true)
          if (!(!!t4.$isMesh || !!t4.$isParticleSystem) || !object.get$frustumCulled() || t1.contains$1(0, object)) {
            webglObject.set$_modelViewMatrix(camera.get$matrixWorldInverse().$mul(0, webglObject.get$matrixWorld()));
            webglObject.set$_normalMatrix(S.calcInverse(webglObject.get$_modelViewMatrix()));
            webglObject.get$_normalMatrix().transpose$0();
            t4 = J.getInterceptor$x(webglObject);
            buffer = t4.get$buffer(webglObject);
            meshMaterial = webglObject.get$webglmaterial();
            if (!!J.getInterceptor(webglObject.get$material()).$isMeshFaceMaterial) {
              materialIndex = buffer.get$materialIndex();
              if (J.$ge$n(materialIndex, 0)) {
                t5 = webglObject.get$geometry().materials;
                if (materialIndex >>> 0 !== materialIndex || materialIndex >= t5.length)
                  return H.ioore(t5, materialIndex);
                t5 = t5[materialIndex];
                t6 = J.getInterceptor$asx(t5);
                if (t6.$index(t5, "__webglMaterial") == null)
                  t6.$indexSet(t5, "__webglMaterial", new S.WebGLMaterial(t5, null, null, null, null, null, 0, 0, false));
                material = t6.$index(t5, "__webglMaterial");
                if (material.get$transparent() === true) {
                  webglObject.set$transparent(material);
                  webglObject.set$opaque(null);
                } else {
                  webglObject.set$opaque(material);
                  webglObject.set$transparent(null);
                }
              }
            } else if (meshMaterial != null)
              if (meshMaterial.get$transparent() != null) {
                webglObject.set$transparent(meshMaterial);
                webglObject.set$opaque(null);
              } else {
                webglObject.set$opaque(meshMaterial);
                webglObject.set$transparent(null);
              }
            webglObject.set$render(true);
            if (t3)
              if (object.get$renderDepth() != null)
                t4.set$z(webglObject, object.get$renderDepth());
              else {
                t5 = object.get$matrixWorld().getTranslation$0();
                this._vector3 = t5;
                t5.applyProjection$1(this._projScreenMatrix);
                t4.set$z(webglObject, this._vector3.storage[2]);
              }
          }
      }
      if (t3)
        t2.sort$1(renderList, this.get$painterSort());
      renderList = scene.get$_data().$index(0, "__webglObjectsImmediate");
      t1 = J.getInterceptor$asx(renderList);
      il = t1.get$length(renderList);
      if (typeof il !== "number")
        return H.iae(il);
      i = 0;
      for (; i < il; ++i) {
        webglObject = t1.$index(renderList, i);
        if (J.get$visible$x(webglObject.get$object()) === true) {
          webglObject.set$_modelViewMatrix(camera.get$matrixWorldInverse().$mul(0, webglObject.get$matrixWorld()));
          webglObject.set$_normalMatrix(S.calcInverse(webglObject.get$_modelViewMatrix()));
          webglObject.get$_normalMatrix().transpose$0();
          material = webglObject.get$webglmaterial();
          if (material.get$transparent() === true) {
            webglObject.set$transparent(material);
            webglObject.set$opaque(null);
          } else {
            webglObject.set$opaque(material);
            webglObject.set$transparent(null);
          }
        }
      }
      this.setBlending$1(0);
      this.renderObjects$8(scene.get$_data().$index(0, "__webglObjects"), true, "opaque", camera, lights, fog, false, null);
      this.renderObjectsImmediate$7(scene.get$_data().$index(0, "__webglObjectsImmediate"), "opaque", camera, lights, fog, false, null);
      this.renderObjects$8(scene.get$_data().$index(0, "__webglObjects"), false, "transparent", camera, lights, fog, true, null);
      this.renderObjectsImmediate$7(scene.get$_data().$index(0, "__webglObjectsImmediate"), "transparent", camera, lights, fog, true, null);
      this.renderPlugins$3(this.renderPluginsPost, scene, camera);
      this.setDepthTest$1(true);
      this.setDepthWrite$1(true);
    },
    _render$2: function(scene, c) {
      return this._render$4$forceClear$renderTarget(scene, c, false, null);
    },
    renderPlugins$3: function(plugins, scene, camera) {
      C.JSArray_methods.forEach$1(plugins, new S.WebGLRenderer_renderPlugins_closure(this, scene, camera));
    },
    renderObjects$8: function(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
      var t1, start, end, delta, t2, i, object, buffer, material, t3, webglObject, t4;
      t1 = J.getInterceptor$asx(renderList);
      if (reverse) {
        start = J.$sub$n(t1.get$length(renderList), 1);
        end = -1;
        delta = -1;
      } else {
        end = t1.get$length(renderList);
        start = 0;
        delta = 1;
      }
      for (t1 = J.getInterceptor$asx(renderList), t2 = materialType === "opaque", i = start, object = null, buffer = null, material = null; t3 = J.getInterceptor(i), !t3.$eq(i, end); i = t3.$add(i, delta)) {
        webglObject = t1.$index(renderList, i);
        if (webglObject.get$render() === true) {
          object = webglObject.get$object();
          buffer = J.get$buffer$x(webglObject);
          material = t2 ? webglObject.get$opaque() : webglObject.get$transparent();
          if (material == null)
            continue;
          if (useBlending)
            this.setBlending$4(material.get$blending(), J.get$blendEquation$x(material), material.get$blendSrc(), material.get$blendDst());
          this.setDepthTest$1(material.get$depthTest());
          t4 = material.get$depthWrite();
          if (this._oldDepthWrite !== t4) {
            J.depthMask$1$x(this._gl, t4);
            this._oldDepthWrite = t4;
          }
          this.setPolygonOffset$3(J.get$polygonOffset$x(material), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
          this.setMaterialFaces$1(material);
          if (buffer.get$isBufferGeometry())
            this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
          else
            this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
        }
      }
    },
    renderObjectsImmediate$7: function(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
      var t1, il, material, i, webglObject, object, t2;
      t1 = J.getInterceptor$asx(renderList);
      il = t1.get$length(renderList);
      if (typeof il !== "number")
        return H.iae(il);
      material = null;
      i = 0;
      for (; i < il; ++i) {
        webglObject = t1.$index(renderList, i);
        object = webglObject.get$object();
        if (J.get$visible$x(object) === true) {
          material = J.$index$asx(webglObject, materialType);
          if (material !== true)
            continue;
          if (useBlending)
            this.setBlending$4(material.get$blending(), J.get$blendEquation$x(material), material.get$blendSrc(), material.get$blendDst());
          this.setDepthTest$1(material.get$depthTest());
          t2 = material.get$depthWrite();
          if (this._oldDepthWrite !== t2) {
            J.depthMask$1$x(this._gl, t2);
            this._oldDepthWrite = t2;
          }
          this.setPolygonOffset$3(J.get$polygonOffset$x(material), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
          this.renderImmediateObject$5(camera, lights, fog, material, object);
        }
      }
    },
    renderImmediateObject$5: function(camera, lights, fog, material, object) {
      var program = this.setProgram$5(camera, lights, fog, material, object);
      this._currentGeometryGroupHash = -1;
      this.setMaterialFaces$1(material);
      object.get$immediateRenderCallback();
      object.render$1(new S.WebGLRenderer_renderImmediateObject_closure(this, material, program));
    },
    sortFacesByMaterial$2: function(geometry, material) {
      var hash_map, numMorphTargets, numMorphNormals, usesFaceMaterial, fl, f, face, materialIndex, groupHash, t1, vertices, t2, t3;
      hash_map = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      numMorphTargets = J.get$length$asx(geometry.get$morphTargets());
      numMorphNormals = J.get$length$asx(geometry.get$morphNormals());
      usesFaceMaterial = !!J.getInterceptor(material).$isMeshFaceMaterial;
      geometry.set$geometryGroups(P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      fl = J.get$length$asx(geometry.get$faces());
      for (f = 0; f < fl; ++f) {
        face = J.$index$asx(geometry.get$faces(), f);
        materialIndex = usesFaceMaterial ? J.toString$0(face.get$materialIndex()) : "0";
        if (hash_map.$index(0, materialIndex) == null)
          hash_map.$indexSet(0, materialIndex, P.LinkedHashMap_LinkedHashMap$_literal(["hash", materialIndex, "counter", 0], null, null));
        groupHash = H.S(J.$index$asx(hash_map.$index(0, materialIndex), "hash")) + "_" + H.S(J.$index$asx(hash_map.$index(0, materialIndex), "counter"));
        if (geometry.get$geometryGroups().$index(0, groupHash) == null)
          geometry.get$geometryGroups().$indexSet(0, groupHash, new S.WebGLGeometry(null, 0, [], [], H.Primitives_parseInt(materialIndex, null, null), numMorphTargets, numMorphNormals, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null));
        t1 = J.getInterceptor$x(face);
        vertices = t1.get$size(face);
        if (J.$add$ns(geometry.get$geometryGroups().$index(0, groupHash).get$vertices(), vertices) > 65535) {
          t2 = hash_map.$index(0, materialIndex);
          t3 = J.getInterceptor$asx(t2);
          t3.$indexSet(t2, "counter", J.$add$ns(t3.$index(t2, "counter"), 1));
          groupHash = H.S(J.$index$asx(hash_map.$index(0, materialIndex), "hash")) + "_" + H.S(J.$index$asx(hash_map.$index(0, materialIndex), "counter"));
          if (geometry.get$geometryGroups().$index(0, groupHash) == null)
            geometry.get$geometryGroups().$indexSet(0, groupHash, new S.WebGLGeometry(null, 0, [], [], H.Primitives_parseInt(materialIndex, null, null), numMorphTargets, numMorphNormals, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null));
        }
        if (t1.get$size(face) === 3)
          geometry.get$geometryGroups().$index(0, groupHash).get$faces3().push(f);
        else
          geometry.get$geometryGroups().$index(0, groupHash).get$faces4().push(f);
        t1 = geometry.get$geometryGroups().$index(0, groupHash);
        t1.set$vertices(J.$add$ns(t1.get$vertices(), vertices));
      }
      geometry.set$geometryGroupsList([]);
      geometry.get$geometryGroups().forEach$1(0, new S.WebGLRenderer_sortFacesByMaterial_closure(this, geometry));
      return;
    },
    initWebGLObjects$1: function(scene) {
      var t1, t2, webglobject, t3, ol, o;
      if (scene.get$_data().$index(0, "__webglObjects") == null) {
        scene.get$_data().$indexSet(0, "__webglObjects", []);
        scene.get$_data().$indexSet(0, "__webglObjectsImmediate", []);
        scene.get$_data().$indexSet(0, "__webglSprites", []);
        scene.get$_data().$indexSet(0, "__webglFlares", []);
      }
      for (; t1 = scene.__objectsAdded, t1.length > 0;) {
        this.addObject$2(t1[0], scene);
        C.JSArray_methods.removeAt$1(scene.__objectsAdded, 0);
      }
      for (; t1 = scene.__objectsRemoved, t1.length > 0;) {
        t1 = t1[0];
        t2 = J.getInterceptor$asx(t1);
        if (t2.$index(t1, "__webglObject") == null)
          t2.$indexSet(t1, "__webglObject", new S.WebGLObject(false, false, null, null, null, null, null, null, t1, null, null, true, 0, null));
        webglobject = t2.$index(t1, "__webglObject");
        if (!t2.$isMesh)
          if (!t2.$isParticleSystem)
            t3 = !!t2.$isLine;
          else
            t3 = true;
        else
          t3 = true;
        if (t3) {
          t2 = scene.__data;
          if (t2 == null) {
            t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            scene.__data = t2;
          }
          this.removeInstances$2(t2.$index(0, "__webglObjects"), t1);
        } else if (t2.$index(t1, "immediateRenderCallback") != null) {
          t2 = scene.__data;
          if (t2 == null) {
            t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            scene.__data = t2;
          }
          this.removeInstances$2(t2.$index(0, "__webglObjectsImmediate"), t1);
        }
        webglobject.set$__webglActive(false);
        C.JSArray_methods.removeAt$1(scene.__objectsRemoved, 0);
      }
      ol = J.get$length$asx(scene.get$_data().$index(0, "__webglObjects"));
      if (typeof ol !== "number")
        return H.iae(ol);
      o = 0;
      for (; o < ol; ++o) {
        t1 = scene.__data;
        if (t1 == null) {
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          scene.__data = t1;
        }
        this.updateObject$1(J.$index$asx(t1.$index(0, "__webglObjects"), o));
      }
    },
    addObject$2: function(object, scene) {
      var t1, webglobject, geometry, t2, material, nvertices;
      t1 = J.getInterceptor$asx(object);
      if (t1.$index(object, "__webglObject") == null)
        t1.$indexSet(object, "__webglObject", new S.WebGLObject(false, false, null, null, null, null, null, null, object, null, null, true, 0, null));
      webglobject = t1.$index(object, "__webglObject");
      geometry = webglobject.get$webglgeometry();
      if (webglobject.get$__webglInit() !== true) {
        webglobject.set$__webglInit(true);
        t2 = new T.Matrix4(new Float32Array(16));
        t2.setIdentity$0();
        webglobject.set$_modelViewMatrix(t2);
        webglobject.set$_normalMatrix(new T.Matrix3(new Float32Array(9)));
        if (geometry != null && geometry.get$__webglInit() == null)
          geometry.set$__webglInit(true);
        if (!!t1.$isMesh) {
          material = object.material;
          if (!!J.getInterceptor(object.geometry).$isGeometry && true) {
            if (geometry.get$geometryGroups() == null)
              this.sortFacesByMaterial$2(geometry, material);
            geometry.get$geometryGroups().forEach$1(0, new S.WebGLRenderer_addObject_closure(this, webglobject, geometry));
          }
        } else if (!!t1.$isLine) {
          if (geometry.get$__webglVertexBuffer() == null) {
            geometry.set$__webglVertexBuffer(J.createBuffer$0$x(this._gl));
            geometry.set$__webglColorBuffer(J.createBuffer$0$x(this._gl));
            geometry.set$__webglLineDistanceBuffer(J.createBuffer$0$x(this._gl));
            ++this.info.memory.geometries;
            nvertices = J.get$length$asx(geometry.get$vertices());
            t2 = nvertices * 3;
            geometry.set$__vertexArray(new Float32Array(t2));
            geometry.set$__colorArray(new Float32Array(t2));
            geometry.set$__lineDistanceArray(new Float32Array(nvertices));
            geometry.set$__webglLineCount(nvertices);
            this.initCustomAttributes$2(geometry, webglobject);
            geometry.set$verticesNeedUpdate(true);
            geometry.set$colorsNeedUpdate(true);
            geometry.set$lineDistancesNeedUpdate(true);
          }
        } else if (!!t1.$isParticleSystem)
          if (geometry.get$__webglVertexBuffer() == null)
            if (!!J.getInterceptor(object.geometry).$isGeometry && true) {
              geometry.set$__webglVertexBuffer(J.createBuffer$0$x(this._gl));
              geometry.set$__webglColorBuffer(J.createBuffer$0$x(this._gl));
              ++this.info.memory.geometries;
              nvertices = J.get$length$asx(geometry.get$vertices());
              t2 = nvertices * 3;
              geometry.set$__vertexArray(new Float32Array(t2));
              geometry.set$__colorArray(new Float32Array(t2));
              geometry.set$__sortArray([]);
              geometry.set$__webglParticleCount(nvertices);
              this.initCustomAttributes$2(geometry, webglobject);
              geometry.set$verticesNeedUpdate(true);
              geometry.set$colorsNeedUpdate(true);
            }
      }
      if (!webglobject.get$__webglActive()) {
        if (!!t1.$isMesh)
          geometry.get$geometryGroups().forEach$1(0, new S.WebGLRenderer_addObject_closure0(this, scene, webglobject));
        else {
          t2 = !!t1.$isLine || !!t1.$isParticleSystem;
          if (t2) {
            t1 = scene.__data;
            if (t1 == null) {
              t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
              scene.__data = t1;
            }
            J.add$1$ax(t1.$index(0, "__webglObjects"), new S.WebGLObject(false, false, null, null, null, null, null, geometry, webglobject.get$object(), null, null, webglobject.get$render(), J.get$z$x(webglobject), null));
          } else if (t1.$index(object, "immediateRenderCallback") != null) {
            t1 = scene.__data;
            if (t1 == null) {
              t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
              scene.__data = t1;
            }
            J.add$1$ax(t1.$index(0, "__webglObjectsImmediate"), new S.WebGLObject(false, false, null, null, null, null, null, null, webglobject.get$object(), null, null, webglobject.get$render(), J.get$z$x(webglobject), null));
          }
        }
        webglobject.set$__webglActive(true);
      }
    },
    addBuffer$3: function(objlist, buffer, object) {
      J.add$1$ax(objlist, new S.WebGLObject(false, false, null, null, null, null, null, buffer, object.get$object(), null, null, object.get$render(), J.get$z$x(object), null));
    },
    updateObject$1: function(webglobject) {
      var object, geometry, t1, il, material, i, geometryGroup, customAttributesDirty;
      object = webglobject.get$object();
      geometry = webglobject.get$webglgeometry();
      t1 = J.getInterceptor(object);
      if (!!t1.$isMesh) {
        for (il = geometry.get$geometryGroupsList().length, material = null, i = 0; i < il; ++i) {
          t1 = geometry.get$geometryGroupsList();
          if (i >= t1.length)
            return H.ioore(t1, i);
          geometryGroup = t1[i];
          material = this.getBufferMaterial$2(webglobject, geometryGroup);
          if (geometry.get$buffersNeedUpdate() === true)
            this.initMeshBuffers$2(geometryGroup, webglobject);
          customAttributesDirty = J.get$attributes$x(material) != null && this.areCustomAttributesDirty$1(material);
          if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
            this.setMeshBuffers$5(geometryGroup, webglobject, 35048, geometry.get$isDynamic() !== true, material);
        }
        geometry.set$verticesNeedUpdate(false);
        geometry.set$morphTargetsNeedUpdate(false);
        geometry.set$elementsNeedUpdate(false);
        geometry.set$uvsNeedUpdate(false);
        geometry.set$normalsNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        geometry.set$tangentsNeedUpdate(false);
        geometry.set$buffersNeedUpdate(false);
        if (J.get$attributes$x(material) != null)
          this.clearCustomAttributes$1(material);
      } else if (!!t1.$isLine) {
        material = this.getBufferMaterial$2(webglobject, geometry);
        t1 = J.getInterceptor$x(material);
        customAttributesDirty = t1.get$attributes(material) != null && this.areCustomAttributesDirty$1(material);
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$lineDistancesNeedUpdate() === true || customAttributesDirty)
          this.setLineBuffers$2(geometry, 35048);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        geometry.set$lineDistancesNeedUpdate(false);
        if (t1.get$attributes(material) != null)
          this.clearCustomAttributes$1(material);
      } else if (!!t1.$isParticleSystem) {
        material = this.getBufferMaterial$2(webglobject, null);
        t1 = J.getInterceptor$x(material);
        customAttributesDirty = t1.get$attributes(material) != null && this.areCustomAttributesDirty$1(material);
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles || customAttributesDirty)
          this.setParticleBuffers$3(geometry, 35048, object);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        if (t1.get$attributes(material) != null)
          this.clearCustomAttributes$1(material);
      }
    },
    areCustomAttributesDirty$1: function(material) {
      var t1 = J.get$attributes$x(material);
      return J.any$1$ax(t1.get$values(t1), new S.WebGLRenderer_areCustomAttributesDirty_closure());
    },
    clearCustomAttributes$1: function(material) {
      return J.get$attributes$x(material).forEach$1(0, new S.WebGLRenderer_clearCustomAttributes_closure());
    },
    removeInstances$2: function(objlist, object) {
      var t1, o, t2;
      for (t1 = J.getInterceptor$asx(objlist), o = J.$sub$n(t1.get$length(objlist), 1); t2 = J.getInterceptor$n(o), t2.$ge(o, 0); o = t2.$sub(o, 1))
        if (J.$eq(t1.$index(objlist, o).get$object(), object))
          t1.removeAt$1(objlist, o);
    },
    initMaterial$4: function(material, lights, fog, webglobject) {
      var object, shaderID, t1, maxLightCount, maxShadows, maxBones, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, attributes, i;
      object = webglobject.get$object();
      if (material.get$isMeshDepthMaterial())
        shaderID = "depth";
      else if (material.get$isMeshNormalMaterial())
        shaderID = "normal";
      else if (material.get$isMeshBasicMaterial())
        shaderID = "basic";
      else if (material.get$isMeshLambertMaterial())
        shaderID = "lambert";
      else if (material.get$isMeshPhongMaterial())
        shaderID = "phong";
      else if (material.get$isLineBasicMaterial())
        shaderID = "basic";
      else
        shaderID = material.get$isParticleBasicMaterial() ? "particle_basic" : null;
      if (shaderID != null) {
        t1 = S.ShaderLib().$index(0, shaderID);
        material.set$uniforms(S.UniformsUtils_clone(t1.$index(0, "uniforms")));
        material.set$vertexShader(t1.$index(0, "vertexShader"));
        material.set$fragmentShader(t1.$index(0, "fragmentShader"));
      }
      maxLightCount = this.allocateLights$1(lights);
      maxShadows = this.allocateShadows$1(lights);
      maxBones = this.allocateBones$1(object);
      t1 = material.get$fragmentShader();
      t2 = material.get$vertexShader();
      t3 = material.get$uniforms();
      t4 = J.getInterceptor$x(material);
      t5 = t4.get$attributes(material);
      t6 = material.get$defines();
      t4 = t4.get$map(material);
      t7 = material.get$envMap();
      t8 = material.get$lightMap();
      t9 = material.get$bumpMap();
      t10 = material.get$normalMap();
      t11 = material.get$specularMap();
      t12 = material.get$vertexColors();
      t13 = material.get$fog();
      t14 = material.get$sizeAttenuation();
      t15 = material.get$skinning();
      if (this.supportsBoneTextures === true)
        if (object != null)
          t16 = false;
        else
          t16 = false;
      else
        t16 = false;
      t17 = object != null;
      if (t17)
        ;
      if (t17)
        ;
      t17 = material.get$morphTargets();
      t18 = material.get$morphNormals();
      t19 = this.maxMorphTargets;
      t20 = this.maxMorphNormals;
      t21 = maxLightCount.$index(0, "directional");
      t22 = maxLightCount.$index(0, "point");
      t23 = maxLightCount.$index(0, "spot");
      t24 = maxLightCount.$index(0, "hemi");
      t25 = this.shadowMapEnabled && object.get$receiveShadow();
      t26 = material.get$alphaTest();
      t27 = material.get$metal();
      t28 = material.get$perPixel();
      t29 = material.get$wrapAround();
      material.set$program(this.buildProgram$41$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$flipSided$fog$fogExp$lightMap$map$maxBones$maxDirLights$maxHemiLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$normalMap$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapType$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround(shaderID, t1, t2, t3, t5, t6, t26, null, null, t9, material.get$side() === 2, t7, material.get$side() === 1, fog, false, t8, t4, maxBones, t21, t24, t20, t19, t22, maxShadows, t23, t27, t18, t17, t10, t28, this.shadowMapCascade, this.shadowMapDebug, t25, this.shadowMapType, t14, t15, t11, t13, t16, t12, t29));
      attributes = material.get$program().attributes;
      if (material.get$morphTargets() === true) {
        material.set$numSupportedMorphTargets(0);
        for (i = 0; i < t19; ++i)
          if (J.$ge$n(attributes.$index(0, "morphTarget" + i), 0))
            material.set$numSupportedMorphTargets(material.get$numSupportedMorphTargets() + 1);
      }
      if (material.get$morphNormals() === true) {
        material.set$numSupportedMorphNormals(0);
        for (i = 0; i < t20; ++i)
          if (J.$ge$n(attributes.$index(0, "morphNormal" + i), 0))
            material.set$numSupportedMorphNormals(material.get$numSupportedMorphNormals() + 1);
      }
      material.set$uniformsList([]);
      material.get$uniforms().forEach$1(0, new S.WebGLRenderer_initMaterial_closure(material));
    },
    setProgram$5: function(camera, lights, fog, material, object) {
      var program, p_uniforms, m_uniforms, t1, refreshMaterial, t2, t3, uvScaleMap, t4;
      this._usedTextureUnits = 0;
      if (material.get$needsUpdate()) {
        if (material.get$program() != null)
          this.deallocateMaterial$1(material);
        this.initMaterial$4(material, lights, fog, object);
        material.set$needsUpdate(false);
      }
      if (material.get$morphTargets() === true)
        if (object.get$__webglMorphTargetInfluences() == null)
          object.set$__webglMorphTargetInfluences(new Float32Array(H._checkLength(this.maxMorphTargets)));
      program = material.get$program();
      p_uniforms = program.uniforms;
      m_uniforms = material.get$uniforms();
      t1 = this._currentProgram;
      if (program == null ? t1 != null : program !== t1) {
        J.useProgram$1$x(this._gl, program.glProgram);
        this._currentProgram = program;
        refreshMaterial = true;
      } else
        refreshMaterial = false;
      t1 = J.getInterceptor$x(material);
      t2 = t1.get$id(material);
      t3 = this._currentMaterialId;
      if (t2 == null ? t3 != null : t2 !== t3) {
        this._currentMaterialId = t1.get$id(material);
        refreshMaterial = true;
      }
      if (!refreshMaterial) {
        t2 = this._currentCamera;
        t2 = camera == null ? t2 != null : camera !== t2;
      } else
        t2 = true;
      if (t2) {
        J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(0, "projectionMatrix"), false, camera.get$projectionMatrix().storage);
        t2 = this._currentCamera;
        if (camera == null ? t2 != null : camera !== t2)
          this._currentCamera = camera;
      }
      if (material.get$skinning()) {
        if (this.supportsBoneTextures === true)
          object.get$useVertexTexture();
        p_uniforms.get$boneGlobalMatrices();
        J.uniformMatrix4fv$3$x(this._gl, p_uniforms.get$boneGlobalMatrices(), false, object.get$boneMatrices());
      }
      if (refreshMaterial) {
        if (material.get$isMeshPhongMaterial() || material.get$isMeshLambertMaterial() || material.get$lights() === true) {
          if (this._lightsNeedUpdate) {
            this.setupLights$2(program, lights);
            this._lightsNeedUpdate = false;
          }
          t2 = this._lights;
          J.set$value$x(m_uniforms.$index(0, "ambientLightColor"), t2.$index(0, "ambient"));
          J.set$value$x(m_uniforms.$index(0, "directionalLightColor"), J.$index$asx(t2.$index(0, "directional"), "colors"));
          J.set$value$x(m_uniforms.$index(0, "directionalLightDirection"), J.$index$asx(t2.$index(0, "directional"), "positions"));
          J.set$value$x(m_uniforms.$index(0, "pointLightColor"), J.$index$asx(t2.$index(0, "point"), "colors"));
          J.set$value$x(m_uniforms.$index(0, "pointLightPosition"), J.$index$asx(t2.$index(0, "point"), "positions"));
          J.set$value$x(m_uniforms.$index(0, "pointLightDistance"), J.$index$asx(t2.$index(0, "point"), "distances"));
          J.set$value$x(m_uniforms.$index(0, "spotLightColor"), J.$index$asx(t2.$index(0, "spot"), "colors"));
          J.set$value$x(m_uniforms.$index(0, "spotLightPosition"), J.$index$asx(t2.$index(0, "spot"), "positions"));
          J.set$value$x(m_uniforms.$index(0, "spotLightDistance"), J.$index$asx(t2.$index(0, "spot"), "distances"));
          J.set$value$x(m_uniforms.$index(0, "spotLightDirection"), J.$index$asx(t2.$index(0, "spot"), "directions"));
          J.set$value$x(m_uniforms.$index(0, "spotLightAngleCos"), J.$index$asx(t2.$index(0, "spot"), "anglesCos"));
          J.set$value$x(m_uniforms.$index(0, "spotLightExponent"), J.$index$asx(t2.$index(0, "spot"), "exponents"));
          J.set$value$x(m_uniforms.$index(0, "hemisphereLightSkyColor"), J.$index$asx(t2.$index(0, "hemi"), "skyColors"));
          J.set$value$x(m_uniforms.$index(0, "hemisphereLightGroundColor"), J.$index$asx(t2.$index(0, "hemi"), "groundColors"));
          J.set$value$x(m_uniforms.$index(0, "hemisphereLightDirection"), J.$index$asx(t2.$index(0, "hemi"), "positions"));
        }
        if (material.get$isMeshBasicMaterial() || material.get$isMeshLambertMaterial() || material.get$isMeshPhongMaterial()) {
          J.set$value$x(m_uniforms.$index(0, "opacity"), t1.get$opacity(material));
          t2 = this.gammaInput;
          if (t2)
            J.get$value$x(m_uniforms.$index(0, "diffuse")).copyGammaToLinear$1(t1.get$color(material));
          else
            J.set$value$x(m_uniforms.$index(0, "diffuse"), t1.get$color(material));
          J.set$value$x(m_uniforms.$index(0, "map"), t1.get$map(material));
          J.set$value$x(m_uniforms.$index(0, "lightMap"), material.get$lightMap());
          J.set$value$x(m_uniforms.$index(0, "specularMap"), material.get$specularMap());
          material.get$bumpMap();
          material.get$normalMap();
          if (t1.get$map(material) != null)
            uvScaleMap = t1.get$map(material);
          else {
            material.get$specularMap();
            material.get$normalMap();
            material.get$bumpMap();
            uvScaleMap = null;
          }
          if (uvScaleMap != null) {
            t3 = uvScaleMap.get$offset(uvScaleMap).storage;
            t4 = uvScaleMap.get$repeat(uvScaleMap).storage;
            J.get$value$x(m_uniforms.$index(0, "offsetRepeat")).setValues$4(t3[0], t3[1], t4[0], t4[1]);
          }
          J.set$value$x(m_uniforms.$index(0, "envMap"), material.get$envMap());
          t3 = m_uniforms.$index(0, "flipEnvMap");
          material.get$envMap();
          J.set$value$x(t3, -1);
          if (t2)
            J.set$value$x(m_uniforms.$index(0, "reflectivity"), material.get$reflectivity());
          else
            J.set$value$x(m_uniforms.$index(0, "reflectivity"), material.get$reflectivity());
          J.set$value$x(m_uniforms.$index(0, "refractionRatio"), material.get$refractionRatio());
          J.set$value$x(m_uniforms.$index(0, "combine"), material.get$combine());
          t2 = m_uniforms.$index(0, "useRefract");
          material.get$envMap();
          J.set$value$x(t2, 0);
        }
        if (material.get$isLineBasicMaterial()) {
          J.set$value$x(m_uniforms.$index(0, "diffuse"), t1.get$color(material));
          J.set$value$x(m_uniforms.$index(0, "opacity"), t1.get$opacity(material));
        } else if (material.get$isParticleBasicMaterial()) {
          J.set$value$x(m_uniforms.$index(0, "psColor"), t1.get$color(material));
          J.set$value$x(m_uniforms.$index(0, "opacity"), t1.get$opacity(material));
          J.set$value$x(m_uniforms.$index(0, "size"), t1.get$size(material));
          J.set$value$x(m_uniforms.$index(0, "scale"), J.$div$n(J.get$height$x(this.canvas), 2));
          J.set$value$x(m_uniforms.$index(0, "map"), t1.get$map(material));
        } else if (material.get$isMeshPhongMaterial()) {
          J.set$value$x(m_uniforms.$index(0, "shininess"), material.get$shininess());
          if (this.gammaInput) {
            J.get$value$x(m_uniforms.$index(0, "ambient")).copyGammaToLinear$1(material.get$ambient());
            J.get$value$x(m_uniforms.$index(0, "emissive")).copyGammaToLinear$1(material.get$emissive());
            J.get$value$x(m_uniforms.$index(0, "specular")).copyGammaToLinear$1(material.get$specular());
          } else {
            J.set$value$x(m_uniforms.$index(0, "ambient"), material.get$ambient());
            J.set$value$x(m_uniforms.$index(0, "emissive"), material.get$emissive());
            J.set$value$x(m_uniforms.$index(0, "specular"), material.get$specular());
          }
          if (material.get$wrapAround())
            J.get$value$x(m_uniforms.$index(0, "wrapRGB")).copy$1(material.get$wrapRGB());
        } else if (material.get$isMeshLambertMaterial()) {
          if (this.gammaInput) {
            J.get$value$x(m_uniforms.$index(0, "ambient")).copyGammaToLinear$1(material.get$ambient());
            J.get$value$x(m_uniforms.$index(0, "emissive")).copyGammaToLinear$1(material.get$emissive());
          } else {
            J.set$value$x(m_uniforms.$index(0, "ambient"), material.get$ambient());
            J.set$value$x(m_uniforms.$index(0, "emissive"), material.get$emissive());
          }
          if (material.get$wrapAround())
            J.get$value$x(m_uniforms.$index(0, "wrapRGB")).copy$1(material.get$wrapRGB());
        } else if (material.get$isMeshDepthMaterial()) {
          J.set$value$x(m_uniforms.$index(0, "mNear"), camera.get$near());
          J.set$value$x(m_uniforms.$index(0, "mFar"), camera.get$far());
          J.set$value$x(m_uniforms.$index(0, "opacity"), t1.get$opacity(material));
        } else if (material.get$isMeshNormalMaterial())
          J.set$value$x(m_uniforms.$index(0, "opacity"), t1.get$opacity(material));
        if (object.get$receiveShadow() && !material.get$shadowPass())
          this.refreshUniformsShadow$2(m_uniforms, lights);
        this.loadUniformsGeneric$2(program, material.get$uniformsList());
        if (!material.get$isShaderMaterial())
          if (!material.get$isMeshPhongMaterial()) {
            material.get$envMap();
            t1 = false;
          } else
            t1 = true;
        else
          t1 = true;
        if (t1)
          if (p_uniforms.$index(0, "cameraPosition") != null) {
            this._vector3 = camera.get$matrixWorld().getTranslation$0();
            t1 = this._gl;
            t2 = p_uniforms.$index(0, "cameraPosition");
            t3 = this._vector3.storage;
            J.uniform3f$4$x(t1, t2, t3[0], t3[1], t3[2]);
          }
        if (material.get$isMeshPhongMaterial() || material.get$isMeshLambertMaterial() || material.get$isShaderMaterial() || material.get$skinning())
          if (p_uniforms.$index(0, "viewMatrix") != null)
            J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(0, "viewMatrix"), false, camera.get$matrixWorldInverse().storage);
      }
      t1 = this._gl;
      t2 = p_uniforms.$index(0, "modelViewMatrix");
      t3 = object.get$_modelViewMatrix();
      J.uniformMatrix4fv$3$x(t1, t2, false, t3.get$storage(t3));
      if (p_uniforms.$index(0, "normalMatrix") != null)
        J.uniformMatrix3fv$3$x(this._gl, p_uniforms.$index(0, "normalMatrix"), false, object.get$_normalMatrix().storage);
      if (p_uniforms.$index(0, "modelMatrix") != null) {
        t1 = this._gl;
        t2 = p_uniforms.$index(0, "modelMatrix");
        t3 = object.get$matrixWorld();
        J.uniformMatrix4fv$3$x(t1, t2, false, t3.get$storage(t3));
      }
      return program;
    },
    refreshUniformsShadow$2: function(uniforms, lights) {
      var il, j, i, light, t1, j0;
      if (uniforms.containsKey$1(0, "shadowMatrix"))
        for (il = lights.length, j = 0, i = 0; i < il; ++i) {
          if (i >= lights.length)
            return H.ioore(lights, i);
          light = lights[i];
          if (!light.get$castShadow())
            continue;
          t1 = !!J.getInterceptor(light).$isDirectionalLight && !light.shadowCascade;
          if (t1) {
            j0 = j + 1;
            if (J.$lt$n(J.get$length$asx(J.get$value$x(uniforms.$index(0, "shadowMap"))), j0)) {
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowMap")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowMapSize")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowMatrix")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowDarkness")), j0);
              J.set$length$asx(J.get$value$x(uniforms.$index(0, "shadowBias")), j0);
            }
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowMap")), j, light.get$shadowMap());
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowMapSize")), j, light.get$shadowMapSize());
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowMatrix")), j, light.get$shadowMatrix());
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowDarkness")), j, light.get$shadowDarkness());
            J.$indexSet$ax(J.get$value$x(uniforms.$index(0, "shadowBias")), j, light.get$shadowBias());
            j = j0;
          }
        }
    },
    getTextureUnit$0: function() {
      var unit, t1, line;
      unit = this._usedTextureUnits;
      t1 = this.maxTextures;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (unit >= t1) {
        line = "WebGLRenderer: trying to use " + unit + " texture units while this GPU supports only " + H.S(this.maxTextures);
        H.printString(line);
      }
      ++this._usedTextureUnits;
      return unit;
    },
    loadUniformsGeneric$2: function(program, uniforms) {
      var jl, uniform, value, type, texture, textureUnit, i, il, j, t1, $location, textures, t2;
      jl = uniforms.length;
      for (uniform = null, value = null, type = null, texture = null, textureUnit = null, i = null, il = null, j = 0; j < jl; ++j) {
        t1 = program.uniforms;
        if (j >= uniforms.length)
          return H.ioore(uniforms, j);
        $location = t1.$index(0, J.$index$asx(uniforms[j], 1));
        if ($location == null)
          continue;
        if (j >= uniforms.length)
          return H.ioore(uniforms, j);
        uniform = J.$index$asx(uniforms[j], 0);
        t1 = J.getInterceptor$x(uniform);
        type = t1.get$type(uniform);
        value = uniform.get$typedValue();
        if (type === "i")
          J.uniform1i$2$x(this._gl, $location, value);
        else if (type === "f")
          J.uniform1f$2$x(this._gl, $location, value);
        else if (type === "v2") {
          t1 = J.getInterceptor$x(value);
          J.uniform2f$3$x(this._gl, $location, t1.get$x(value), t1.get$y(value));
        } else if (type === "v3") {
          t1 = J.getInterceptor$x(value);
          J.uniform3f$4$x(this._gl, $location, t1.get$x(value), t1.get$y(value), t1.get$z(value));
        } else if (type === "v4") {
          t1 = J.getInterceptor$x(value);
          J.uniform4f$5$x(this._gl, $location, t1.get$x(value), t1.get$y(value), t1.get$z(value), t1.get$w(value));
        } else if (type === "c") {
          t1 = J.getInterceptor$x(value);
          J.uniform3f$4$x(this._gl, $location, t1.get$r(value), value.get$g(), t1.get$b(value));
        } else if (type === "iv1")
          J.uniform1iv$2$x(this._gl, $location, value);
        else if (type === "iv")
          J.uniform3iv$2$x(this._gl, $location, value);
        else if (type === "fv1")
          J.uniform1fv$2$x(this._gl, $location, value);
        else if (type === "fv")
          J.uniform3fv$2$x(this._gl, $location, value);
        else if (type === "v2v")
          J.uniform2fv$2$x(this._gl, $location, value);
        else if (type === "v3v")
          J.uniform3fv$2$x(this._gl, $location, value);
        else if (type === "v4v")
          J.uniform4fv$2$x(this._gl, $location, value);
        else if (type === "m2")
          J.uniformMatrix2fv$3$x(this._gl, $location, false, value);
        else if (type === "m3")
          J.uniformMatrix3fv$3$x(this._gl, $location, false, value);
        else if (type === "m4")
          J.uniformMatrix4fv$3$x(this._gl, $location, false, value);
        else if (type === "m4v")
          J.uniformMatrix4fv$3$x(this._gl, $location, false, value);
        else if (type === "t") {
          texture = t1.get$value(uniform);
          textureUnit = this.getTextureUnit$0();
          J.uniform1i$2$x(this._gl, $location, textureUnit);
          if (texture == null)
            continue;
          texture.get$image();
          texture.get$image();
          this.setTexture$2(texture, textureUnit);
        } else if (type === "tv") {
          textures = t1.get$value(uniform);
          t2 = J.getInterceptor$ax(textures);
          uniform.set$_three$_array(new Int32Array(H._ensureNativeList(J.toList$0$ax(t2.map$1(textures, new S.WebGLRenderer_loadUniformsGeneric_closure(this))))));
          J.uniform1iv$2$x(this._gl, $location, uniform.get$_three$_array());
          il = t2.get$length(textures);
          if (typeof il !== "number")
            return H.iae(il);
          i = 0;
          for (; i < il; ++i) {
            texture = J.$index$asx(t1.get$value(uniform), i);
            t2 = uniform.get$_three$_array();
            if (i >= t2.length)
              return H.ioore(t2, i);
            textureUnit = t2[i];
            if (texture == null)
              continue;
            this.setTexture$2(texture, textureUnit);
          }
        }
      }
    },
    setColorGamma$4: function(array, offset, color, intensitySq) {
      var t1, t2;
      t1 = J.getInterceptor$x(color);
      t2 = J.getInterceptor$ax(array);
      t2.$indexSet(array, offset, t1.get$r(color) * t1.get$r(color) * intensitySq);
      t2.$indexSet(array, offset + 1, color.get$g() * color.get$g() * intensitySq);
      t2.$indexSet(array, offset + 2, t1.get$b(color) * t1.get$b(color) * intensitySq);
    },
    setColorLinear$4: function(array, offset, color, intensity) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(color);
      t2 = t1.get$r(color);
      if (typeof intensity !== "number")
        return H.iae(intensity);
      t3 = J.getInterceptor$ax(array);
      t3.$indexSet(array, offset, t2 * intensity);
      t3.$indexSet(array, offset + 1, color.get$g() * intensity);
      t3.$indexSet(array, offset + 2, t1.get$b(color) * intensity);
    },
    setupLights$2: function(program, lights) {
      var zlights, dirColors, dirPositions, pointColors, pointDistances, spotColors, hemiSkyColors, hemiGroundColors, ll, t1, t2, t3, l, r, g, b, color, skyColor, groundColor, intensity, intensitySq, position, distance, dirLength, pointLength, spotLength, hemiLength, dirCount, pointCount, spotCount, hemiCount, dirOffset, pointOffset, spotOffset, hemiOffset, light, t4, t5, t6, l0;
      zlights = this._lights;
      dirColors = J.$index$asx(zlights.$index(0, "directional"), "colors");
      dirPositions = J.$index$asx(zlights.$index(0, "directional"), "positions");
      pointColors = J.$index$asx(zlights.$index(0, "point"), "colors");
      J.$index$asx(zlights.$index(0, "point"), "positions");
      pointDistances = J.$index$asx(zlights.$index(0, "point"), "distances");
      spotColors = J.$index$asx(zlights.$index(0, "spot"), "colors");
      J.$index$asx(zlights.$index(0, "spot"), "positions");
      J.$index$asx(zlights.$index(0, "spot"), "distances");
      J.$index$asx(zlights.$index(0, "spot"), "directions");
      J.$index$asx(zlights.$index(0, "spot"), "anglesCos");
      J.$index$asx(zlights.$index(0, "spot"), "exponents");
      hemiSkyColors = J.$index$asx(zlights.$index(0, "hemi"), "skyColors");
      hemiGroundColors = J.$index$asx(zlights.$index(0, "hemi"), "groundColors");
      J.$index$asx(zlights.$index(0, "hemi"), "positions");
      ll = lights.length;
      for (t1 = this.gammaInput, t2 = J.getInterceptor$asx(dirColors), t3 = J.getInterceptor$asx(dirPositions), l = 0, r = 0, g = 0, b = 0, color = null, skyColor = null, groundColor = null, intensity = null, intensitySq = null, position = null, distance = null, dirLength = 0, pointLength = 0, spotLength = 0, hemiLength = 0, dirCount = 0, pointCount = 0, spotCount = 0, hemiCount = 0, dirOffset = 0, pointOffset = 0, spotOffset = 0, hemiOffset = 0; l < ll; ++l) {
        if (l >= lights.length)
          return H.ioore(lights, l);
        light = lights[l];
        t4 = J.getInterceptor(light);
        t5 = !!t4.$isDirectionalLight;
        t6 = !t5;
        if ((!t6 || false) && light.get$onlyShadow() || t4.get$visible(light) !== true)
          continue;
        color = t4.get$color(light);
        if (t6)
          t6 = false;
        else
          t6 = true;
        if (t6) {
          intensity = light.get$intensity();
          distance = light.get$distance();
        }
        if (!!t4.$isAmbientLight) {
          if (!light.visible)
            continue;
          t4 = J.getInterceptor$x(color);
          if (t1) {
            r += t4.get$r(color) * t4.get$r(color);
            g += color.get$g() * color.get$g();
            b += t4.get$b(color) * t4.get$b(color);
          } else {
            r += t4.get$r(color);
            g += color.get$g();
            b += t4.get$b(color);
          }
        } else if (t5) {
          ++dirCount;
          if (!light.visible)
            continue;
          this._direction = light.matrixWorld.getTranslation$0();
          t4 = light.target.matrixWorld.getTranslation$0();
          this._vector3 = t4;
          this._direction.sub$1(t4);
          this._direction.normalize$0(0);
          t4 = this._direction.storage;
          if (t4[0] === 0 && t4[1] === 0 && t4[2] === 0)
            continue;
          dirOffset = dirLength * 3;
          t4 = dirOffset + 3;
          t2.set$length(dirColors, t4);
          t3.set$length(dirPositions, t4);
          t3.$indexSet(dirPositions, dirOffset, this._direction.storage[0]);
          t3.$indexSet(dirPositions, dirOffset + 1, this._direction.storage[1]);
          t3.$indexSet(dirPositions, dirOffset + 2, this._direction.storage[2]);
          if (t1) {
            if (typeof intensity !== "number")
              return intensity.$mul();
            this.setColorGamma$4(dirColors, dirOffset, color, intensity * intensity);
          } else
            this.setColorLinear$4(dirColors, dirOffset, color, intensity);
          ++dirLength;
        }
      }
      ll = P.max(t2.get$length(dirColors), dirCount * 3);
      for (l = dirLength * 3; l < ll; ++l)
        t2.$indexSet(dirColors, l, 0);
      t1 = J.getInterceptor$asx(pointColors);
      ll = P.max(t1.get$length(pointColors), pointCount * 3);
      for (l = pointLength * 3; l < ll; ++l)
        t1.$indexSet(pointColors, l, 0);
      t1 = J.getInterceptor$asx(spotColors);
      ll = P.max(t1.get$length(spotColors), spotCount * 3);
      for (l = spotLength * 3; l < ll; ++l)
        t1.$indexSet(spotColors, l, 0);
      t1 = J.getInterceptor$asx(hemiSkyColors);
      t2 = hemiCount * 3;
      ll = P.max(t1.get$length(hemiSkyColors), t2);
      for (l = hemiLength * 3, l0 = l; l0 < ll; ++l0)
        t1.$indexSet(hemiSkyColors, l0, 0);
      t1 = J.getInterceptor$asx(hemiGroundColors);
      ll = P.max(t1.get$length(hemiGroundColors), t2);
      for (; l < ll; ++l)
        t1.$indexSet(hemiGroundColors, l, 0);
      J.$indexSet$ax(zlights.$index(0, "directional"), "length", dirLength);
      J.$indexSet$ax(zlights.$index(0, "point"), "length", pointLength);
      J.$indexSet$ax(zlights.$index(0, "spot"), "length", spotLength);
      J.$indexSet$ax(zlights.$index(0, "hemi"), "length", hemiLength);
      J.$indexSet$ax(zlights.$index(0, "ambient"), 0, r);
      J.$indexSet$ax(zlights.$index(0, "ambient"), 1, g);
      J.$indexSet$ax(zlights.$index(0, "ambient"), 2, b);
    },
    setMaterialFaces$1: function(material) {
      var doubleSided, flipSided, t1;
      doubleSided = material.get$side() === 2;
      flipSided = material.get$side() === 1;
      if (this._oldDoubleSided !== doubleSided) {
        t1 = this._gl;
        if (doubleSided)
          J.disable$1$x(t1, 2884);
        else
          J.enable$1$x(t1, 2884);
        this._oldDoubleSided = doubleSided;
      }
      if (this._oldFlipSided !== flipSided) {
        t1 = this._gl;
        if (flipSided)
          J.frontFace$1$x(t1, 2304);
        else
          J.frontFace$1$x(t1, 2305);
        this._oldFlipSided = flipSided;
      }
    },
    setDepthTest$1: function(depthTest) {
      var t1;
      if (this._oldDepthTest !== depthTest) {
        t1 = this._gl;
        if (depthTest)
          J.enable$1$x(t1, 2929);
        else
          J.disable$1$x(t1, 2929);
        this._oldDepthTest = depthTest;
      }
    },
    setDepthWrite$1: function(depthWrite) {
      if (this._oldDepthWrite !== depthWrite) {
        J.depthMask$1$x(this._gl, depthWrite);
        this._oldDepthWrite = depthWrite;
      }
    },
    setPolygonOffset$3: function(polygonoffset, factor, units) {
      var t1;
      if (!J.$eq(this._oldPolygonOffset, polygonoffset)) {
        t1 = this._gl;
        if (polygonoffset === true)
          J.enable$1$x(t1, 32823);
        else
          J.disable$1$x(t1, 32823);
        this._oldPolygonOffset = polygonoffset;
      }
      if (polygonoffset === true)
        t1 = this._oldPolygonOffsetFactor !== factor || this._oldPolygonOffsetUnits !== units;
      else
        t1 = false;
      if (t1) {
        J.polygonOffset$2$x(this._gl, factor, units);
        this._oldPolygonOffsetFactor = factor;
        this._oldPolygonOffsetUnits = units;
      }
    },
    setBlending$4: function(blending, blendEquation, blendSrc, blendDst) {
      var t1;
      if (blending !== this._oldBlending) {
        if (blending === 0)
          J.disable$1$x(this._gl, 3042);
        else if (blending === 2) {
          J.enable$1$x(this._gl, 3042);
          J.blendEquation$1$x(this._gl, 32774);
          J.blendFunc$2$x(this._gl, 770, 1);
        } else if (blending === 3) {
          J.enable$1$x(this._gl, 3042);
          J.blendEquation$1$x(this._gl, 32774);
          J.blendFunc$2$x(this._gl, 0, 769);
        } else if (blending === 4) {
          J.enable$1$x(this._gl, 3042);
          J.blendEquation$1$x(this._gl, 32774);
          J.blendFunc$2$x(this._gl, 0, 768);
        } else {
          t1 = this._gl;
          if (blending === 5)
            J.enable$1$x(t1, 3042);
          else {
            J.enable$1$x(t1, 3042);
            J.blendEquationSeparate$2$x(this._gl, 32774, 32774);
            J.blendFuncSeparate$4$x(this._gl, 770, 771, 1, 771);
          }
        }
        this._oldBlending = blending;
      }
      if (blending === 5) {
        if (!J.$eq(blendEquation, this._oldBlendEquation)) {
          J.blendEquation$1$x(this._gl, this.paramThreeToGL$1(blendEquation));
          this._oldBlendEquation = blendEquation;
        }
        t1 = this._oldBlendSrc;
        if (blendSrc == null ? t1 == null : blendSrc === t1) {
          t1 = this._oldBlendDst;
          t1 = blendDst == null ? t1 != null : blendDst !== t1;
        } else
          t1 = true;
        if (t1) {
          J.blendFunc$2$x(this._gl, this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
          this._oldBlendSrc = blendSrc;
          this._oldBlendDst = blendDst;
        }
      } else {
        this._oldBlendEquation = null;
        this._oldBlendSrc = null;
        this._oldBlendDst = null;
      }
    },
    setBlending$1: function(blending) {
      return this.setBlending$4(blending, null, null, null);
    },
    generateDefines$1: function(defines) {
      var t1, chunks;
      t1 = {};
      t1.chunk_0 = null;
      chunks = [];
      defines.forEach$1(0, new S.WebGLRenderer_generateDefines_closure(t1, chunks));
      return C.JSArray_methods.join$1(chunks, "\n");
    },
    buildProgram$41$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$flipSided$fog$fogExp$lightMap$map$maxBones$maxDirLights$maxHemiLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$normalMap$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapType$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround: function(shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, flipSided, fog, fogExp, lightMap, map, maxBones, maxDirLights, maxHemiLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, normalMap, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapType, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround) {
      var t1, chunks, code, t2, pl, p, program, shadowMapTypeDefine, customDefines, glprogram, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, prefix_vertex, glFragmentShader, glVertexShader, $status, error, identifiers, i;
      t1 = {};
      chunks = [];
      if (shaderID != null)
        chunks.push(shaderID);
      else {
        chunks.push(fragmentShader);
        chunks.push(vertexShader);
      }
      defines.forEach$1(0, new S.WebGLRenderer_buildProgram_closure(chunks));
      code = C.JSArray_methods.join$0(chunks) + "maxDirLights" + maxDirLights + "maxPointLights" + maxPointLights + "maxSpotLights" + maxSpotLights + "maxHemiLights" + maxHemiLights + "maxShadows" + maxShadows + "maxBones" + H.S(maxBones) + "map" + J.toString$0(map) + "envMap" + H.S(envMap) + "lightMap" + H.S(lightMap) + "bumpMap" + H.S(bumpMap) + "normalMap" + H.S(normalMap) + "specularMap" + H.S(specularMap) + "vertexColors" + H.S(vertexColors) + "fog" + H.S(fog) + "useFog" + H.S(useFog) + "fogExp" + fogExp + "skinning" + skinning + "useVertexTexture" + useVertexTexture + "boneTextureWidth" + H.S(boneTextureWidth) + "boneTextureHeight" + H.S(boneTextureHeight) + "morphTargets" + H.S(morphTargets) + "morphNormals" + H.S(morphNormals) + "perPixel" + perPixel + "wrapAround" + wrapAround + "doubleSided" + doubleSided + "flipSided" + flipSided + "shadowMapEnabled" + shadowMapEnabled + "shadowMapType" + shadowMapType + "shadowMapDebug" + shadowMapDebug + "shadowMapCascade" + shadowMapCascade + "sizeAttenuation" + sizeAttenuation;
      t2 = this._programs;
      pl = t2.length;
      for (p = 0; p < pl; ++p) {
        program = t2[p];
        if (program.code === code) {
          ++program.usedTimes;
          return program;
        }
      }
      if (shadowMapType === 1)
        shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
      else
        shadowMapTypeDefine = shadowMapType === 2 ? "SHADOWMAP_TYPE_PCF_SOFT" : "SHADOWMAP_TYPE_BASIC";
      customDefines = this.generateDefines$1(defines);
      glprogram = J.createProgram$0$x(this._gl);
      t2 = "precision " + this.precision + " float;";
      t3 = this.supportsVertexTextures === true ? "#define VERTEX_TEXTURES" : "";
      t4 = this.gammaInput;
      t5 = t4 ? "#define GAMMA_INPUT" : "";
      t6 = this.gammaOutput;
      t7 = t6 ? "#define GAMMA_OUTPUT" : "";
      t8 = this.physicallyBasedShading;
      t9 = t8 ? "#define PHYSICALLY_BASED_SHADING" : "";
      t10 = "#define MAX_DIR_LIGHTS " + maxDirLights;
      t11 = "#define MAX_POINT_LIGHTS " + maxPointLights;
      t12 = "#define MAX_SPOT_LIGHTS " + maxSpotLights;
      t13 = "#define MAX_HEMI_LIGHTS " + maxHemiLights;
      t14 = "#define MAX_SHADOWS " + maxShadows;
      t15 = "#define MAX_BONES " + H.S(maxBones);
      t16 = map != null;
      t17 = t16 ? "#define USE_MAP" : "";
      t18 = typeof vertexColors === "boolean";
      if (!(t18 && vertexColors))
        t19 = typeof vertexColors === "number" && Math.floor(vertexColors) === vertexColors && vertexColors !== 0;
      else
        t19 = true;
      t19 = t19 ? "#define USE_COLOR" : "";
      t20 = skinning ? "#define USE_SKINNING" : "";
      t21 = useVertexTexture ? "#define BONE_TEXTURE" : "";
      t22 = morphTargets === true ? "#define USE_MORPHTARGETS" : "";
      t23 = morphNormals === true ? "#define USE_MORPHNORMALS" : "";
      t24 = perPixel ? "#define PHONG_PER_PIXEL" : "";
      t25 = wrapAround ? "#define WRAP_AROUND" : "";
      t26 = doubleSided ? "#define DOUBLE_SIDED" : "";
      t27 = flipSided ? "#define FLIP_SIDED" : "";
      t28 = shadowMapEnabled ? "#define USE_SHADOWMAP" : "";
      t29 = shadowMapEnabled ? "#define " + shadowMapTypeDefine : "";
      t30 = shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "";
      t31 = shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "";
      prefix_vertex = C.JSArray_methods.join$1([t2, customDefines, t3, t5, t7, t9, t10, t11, t12, t13, t14, t15, t17, "", "", "", "", "", t19, t20, t21, "", "", t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "attribute vec2 uv2;", "#ifdef USE_COLOR", "attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "attribute vec3 morphTarget0;", "attribute vec3 morphTarget1;", "attribute vec3 morphTarget2;", "attribute vec3 morphTarget3;", "#ifdef USE_MORPHNORMALS", "attribute vec3 morphNormal0;", "attribute vec3 morphNormal1;", "attribute vec3 morphNormal2;", "attribute vec3 morphNormal3;", "#else", "attribute vec3 morphTarget4;", "attribute vec3 morphTarget5;", "attribute vec3 morphTarget6;", "attribute vec3 morphTarget7;", "#endif", "#endif", "#ifdef USE_SKINNING", "attribute vec4 skinIndex;", "attribute vec4 skinWeight;", "#endif", ""], "\n");
      t2 = "precision " + this.precision + " float;";
      t3 = "#define MAX_DIR_LIGHTS " + maxDirLights;
      t5 = "#define MAX_POINT_LIGHTS " + maxPointLights;
      t7 = "#define MAX_SPOT_LIGHTS " + maxSpotLights;
      t9 = "#define MAX_HEMI_LIGHTS " + maxHemiLights;
      t10 = "#define MAX_SHADOWS " + maxShadows;
      t11 = alphaTest !== 0 ? "#define ALPHATEST " + alphaTest : "";
      t4 = t4 ? "#define GAMMA_INPUT" : "";
      t6 = t6 ? "#define GAMMA_OUTPUT" : "";
      t8 = t8 ? "#define PHYSICALLY_BASED_SHADING" : "";
      t12 = useFog === true;
      t13 = t12 && false ? "#define USE_FOG" : "";
      if (t12)
        ;
      t12 = t16 ? "#define USE_MAP" : "";
      if (!(t18 && vertexColors))
        t14 = typeof vertexColors === "number" && Math.floor(vertexColors) === vertexColors && vertexColors !== 0;
      else
        t14 = true;
      t14 = t14 ? "#define USE_COLOR" : "";
      t15 = metal ? "#define METAL" : "";
      t16 = perPixel ? "#define PHONG_PER_PIXEL" : "";
      t17 = wrapAround ? "#define WRAP_AROUND" : "";
      t18 = doubleSided ? "#define DOUBLE_SIDED" : "";
      t19 = flipSided ? "#define FLIP_SIDED" : "";
      t20 = shadowMapEnabled ? "#define USE_SHADOWMAP" : "";
      t21 = shadowMapEnabled ? "#define " + shadowMapTypeDefine : "";
      t22 = shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "";
      glFragmentShader = this.getShader$2("fragment", C.JSArray_methods.join$1([t2, "", customDefines, "", t3, t5, t7, t9, t10, t11, t4, t6, t8, t13, "", t12, "", "", "", "", "", t14, t15, t16, t17, t18, t19, t20, t21, t22, shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", ""], "\n") + H.S(fragmentShader));
      glVertexShader = this.getShader$2("vertex", prefix_vertex + H.S(vertexShader));
      J.attachShader$2$x(this._gl, glprogram, glVertexShader);
      J.attachShader$2$x(this._gl, glprogram, glFragmentShader);
      J.linkProgram$1$x(this._gl, glprogram);
      if (J.getProgramParameter$2$x(this._gl, glprogram, 35714) !== true) {
        $status = J.getProgramParameter$2$x(this._gl, glprogram, 35715);
        error = J.getError$0$x(this._gl);
        P.print("Could not initialise shader\nVALIDATE_STATUS: " + H.S($status) + ", gl error [" + H.S(error) + "]");
        $.WebGLRenderer_programLinkFailed = true;
      }
      J.deleteShader$1$x(this._gl, glFragmentShader);
      J.deleteShader$1$x(this._gl, glVertexShader);
      t2 = this._programs_counter++;
      t3 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      program = new S.Program(t2, glprogram, code, 1, P.LinkedHashMap_LinkedHashMap$_empty(null, null), t3);
      t1.identifiers_0 = null;
      identifiers = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "modelMatrix", "cameraPosition", "morphTargetInfluences"];
      t1.identifiers_0 = identifiers;
      if (useVertexTexture)
        identifiers.push("boneTexture");
      else
        identifiers.push("boneGlobalMatrices");
      uniforms.forEach$1(0, new S.WebGLRenderer_buildProgram_closure0(t1));
      this.cacheUniformLocations$2(program, t1.identifiers_0);
      t1.identifiers_0 = ["position", "normal", "uv", "uv2", "tangent", "color", "skinIndex", "skinWeight", "lineDistance"];
      for (i = 0; i < maxMorphTargets; ++i)
        t1.identifiers_0.push("morphTarget" + i);
      for (i = 0; i < maxMorphNormals; ++i)
        t1.identifiers_0.push("morphNormal" + i);
      if (attributes != null)
        attributes.forEach$1(0, new S.WebGLRenderer_buildProgram_closure1(t1));
      this.cacheAttributeLocations$2(program, t1.identifiers_0);
      this._programs.push(program);
      this.info.memory.programs = this._programs.length;
      return program;
    },
    cacheUniformLocations$2: function(program, identifiers) {
      var l, t1, i, id;
      l = identifiers.length;
      for (t1 = program.glProgram, i = 0; i < l; ++i) {
        if (i >= identifiers.length)
          return H.ioore(identifiers, i);
        id = identifiers[i];
        program.uniforms.$indexSet(0, id, J.getUniformLocation$2$x(this._gl, t1, id));
      }
    },
    cacheAttributeLocations$2: function(program, identifiers) {
      var l, t1, t2, i, id;
      l = identifiers.length;
      for (t1 = program.attributes, t2 = program.glProgram, i = 0; i < l; ++i) {
        if (i >= identifiers.length)
          return H.ioore(identifiers, i);
        id = identifiers[i];
        t1.$indexSet(0, id, J.getAttribLocation$2$x(this._gl, t2, id));
      }
    },
    addLineNumbers$1: function(string) {
      var chunks, il, i, i0, t1;
      chunks = string.split("\n");
      il = chunks.length;
      for (i = 0; i < il; i = i0) {
        i0 = i + 1;
        t1 = "" + i0 + ":";
        if (i >= chunks.length)
          return H.ioore(chunks, i);
        t1 += H.S(chunks[i]);
        if (i >= chunks.length)
          return H.ioore(chunks, i);
        chunks[i] = t1;
      }
      return C.JSArray_methods.join$1(chunks, "\n");
    },
    getShader$2: function(type, string) {
      var shader;
      if (type === "fragment")
        shader = J.createShader$1$x(this._gl, 35632);
      else
        shader = type === "vertex" ? J.createShader$1$x(this._gl, 35633) : null;
      J.shaderSource$2$x(this._gl, shader, string);
      J.compileShader$1$x(this._gl, shader);
      if (J.getShaderParameter$2$x(this._gl, shader, 35713) !== true) {
        P.print(J.getShaderInfoLog$1$x(this._gl, shader));
        P.print(this.addLineNumbers$1(string));
        return;
      }
      return shader;
    },
    setTextureParameters$3: function(textureType, texture, isImagePowerOfTwo) {
      var t1 = this._gl;
      if (isImagePowerOfTwo) {
        J.texParameteri$3$x(t1, textureType, 10242, this.paramThreeToGL$1(texture.get$wrapS()));
        J.texParameteri$3$x(this._gl, textureType, 10243, this.paramThreeToGL$1(texture.get$wrapT()));
        J.texParameteri$3$x(this._gl, textureType, 10240, this.paramThreeToGL$1(texture.get$magFilter()));
        J.texParameteri$3$x(this._gl, textureType, 10241, this.paramThreeToGL$1(texture.get$minFilter()));
      } else {
        J.texParameteri$3$x(t1, textureType, 10242, 33071);
        J.texParameteri$3$x(this._gl, textureType, 10243, 33071);
        J.texParameteri$3$x(this._gl, textureType, 10240, this.filterFallback$1(texture.get$magFilter()));
        J.texParameteri$3$x(this._gl, textureType, 10241, this.filterFallback$1(texture.get$minFilter()));
      }
      if (this._glExtensionTextureFilterAnisotropic != null && J.get$type$x(texture) !== 15)
        if (texture.get$anisotropy() > 1 || J.$index$asx(texture, "__oldAnisotropy") != null) {
          J.texParameterf$3$x(this._gl, textureType, 34046, P.min(texture.get$anisotropy(), this.maxAnisotropy));
          J.$indexSet$ax(texture, "__oldAnisotropy", texture.get$anisotropy());
        }
    },
    setTexture$2: function(texture, slot) {
      var t1, t2, image, t3, t4, isImagePowerOfTwo, glFormat, glType, mipmaps, i, mipmap;
      if (texture.get$needsUpdate()) {
        t1 = J.getInterceptor$asx(texture);
        if (t1.$index(texture, "__webglInit") == null) {
          t1.$indexSet(texture, "__webglInit", true);
          t1.$indexSet(texture, "__webglTexture", J.createTexture$0$x(this._gl));
          ++this.info.memory.textures;
        }
        J.activeTexture$1$x(this._gl, 33984 + slot);
        J.bindTexture$2$x(this._gl, 3553, t1.$index(texture, "__webglTexture"));
        t2 = this._gl;
        J.pixelStorei$2$x(t2, 37440, t1.get$flipY(texture) === true ? 1 : 0);
        t2 = this._gl;
        J.pixelStorei$2$x(t2, 37441, texture.get$premultiplyAlpha() ? 1 : 0);
        J.pixelStorei$2$x(this._gl, 3317, texture.get$unpackAlignment());
        image = texture.get$image();
        t2 = J.getInterceptor$x(image);
        t3 = t2.get$width(image);
        t4 = J.getInterceptor$n(t3);
        if (t4.$and(t3, t4.$sub(t3, 1)) === 0) {
          t2 = t2.get$height(image);
          t3 = J.getInterceptor$n(t2);
          isImagePowerOfTwo = t3.$and(t2, t3.$sub(t2, 1)) === 0;
        } else
          isImagePowerOfTwo = false;
        glFormat = this.paramThreeToGL$1(t1.get$format(texture));
        glType = this.paramThreeToGL$1(t1.get$type(texture));
        this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
        mipmaps = texture.get$mipmaps();
        t1 = mipmaps.length;
        if (t1 > 0 && isImagePowerOfTwo) {
          for (i = 0; i < t1; ++i) {
            if (i >= mipmaps.length)
              return H.ioore(mipmaps, i);
            mipmap = mipmaps[i];
            J.texImage2D$6$x(this._gl, 3553, i, glFormat, glFormat, glType, mipmap);
          }
          texture.set$generateMipmaps(false);
        } else if (!!J.getInterceptor(texture.get$image()).$isImageElement)
          J.texImage2DImage$6$x(this._gl, 3553, 0, glFormat, glFormat, glType, texture.get$image());
        else if (!!J.getInterceptor(texture.get$image()).$isCanvasElement)
          J.texImage2DCanvas$6$x(this._gl, 3553, 0, glFormat, glFormat, glType, texture.get$image());
        else if (!!J.getInterceptor(texture.get$image()).$isVideoElement)
          J.texImage2DVideo$6$x(this._gl, 3553, 0, glFormat, glFormat, glType, texture.get$image());
        if (texture.get$generateMipmaps() && isImagePowerOfTwo)
          J.generateMipmap$1$x(this._gl, 3553);
        texture.set$needsUpdate(false);
        texture.get$onUpdate();
      } else {
        J.activeTexture$1$x(this._gl, 33984 + slot);
        J.bindTexture$2$x(this._gl, 3553, J.$index$asx(texture, "__webglTexture"));
      }
    },
    setupFrameBuffer$3: function(framebuffer, renderTarget, textureTarget) {
      var t1, t2;
      J.bindFramebuffer$2$x(this._gl, 36160, framebuffer);
      t1 = this._gl;
      t2 = renderTarget.__data;
      if (t2 == null) {
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        renderTarget.__data = t2;
      }
      J.framebufferTexture2D$5$x(t1, 36160, 36064, textureTarget, t2.$index(0, "__webglTexture"), 0);
    },
    setupRenderBuffer$2: function(renderbuffer, renderTarget) {
      var t1, t2, t3, t4;
      J.bindRenderbuffer$2$x(this._gl, 36161, renderbuffer);
      t1 = renderTarget.depthBuffer;
      if (t1 && !renderTarget.stencilBuffer) {
        J.renderbufferStorage$4$x(this._gl, 36161, 33189, renderTarget.width, renderTarget.height);
        J.framebufferRenderbuffer$4$x(this._gl, 36160, 36096, 36161, renderbuffer);
      } else {
        t1 = t1 && renderTarget.stencilBuffer;
        t2 = renderTarget.width;
        t3 = this._gl;
        t4 = renderTarget.height;
        if (t1) {
          J.renderbufferStorage$4$x(t3, 36161, 34041, t2, t4);
          J.framebufferRenderbuffer$4$x(this._gl, 36160, 33306, 36161, renderbuffer);
        } else
          J.renderbufferStorage$4$x(t3, 36161, 32854, t2, t4);
      }
    },
    setRenderTarget$1: function(renderTarget) {
      var t1, t2, t3, isTargetPowerOfTwo, glFormat, glType, framebuffer, width, height, vx, vy;
      t1 = renderTarget != null;
      if (t1 && renderTarget.__webglFramebuffer == null) {
        renderTarget.depthBuffer;
        renderTarget.stencilBuffer;
        t2 = J.createTexture$0$x(this._gl);
        renderTarget.get$_data().$indexSet(0, "__webglTexture", t2);
        ++this.info.memory.textures;
        t2 = renderTarget.width;
        t3 = J.getInterceptor$n(t2);
        if (t3.$and(t2, t3.$sub(t2, 1)) === 0) {
          t2 = renderTarget.height;
          isTargetPowerOfTwo = (t2 & t2 - 1) === 0;
        } else
          isTargetPowerOfTwo = false;
        glFormat = this.paramThreeToGL$1(renderTarget.format);
        glType = this.paramThreeToGL$1(renderTarget.type);
        renderTarget.__webglFramebuffer = J.createFramebuffer$0$x(this._gl);
        renderTarget.__webglRenderbuffer = J.createRenderbuffer$0$x(this._gl);
        J.bindTexture$2$x(this._gl, 3553, renderTarget.get$_data().$index(0, "__webglTexture"));
        this.setTextureParameters$3(3553, renderTarget, isTargetPowerOfTwo);
        J.texImage2DTyped$9$x(this._gl, 3553, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        this.setupFrameBuffer$3(renderTarget.__webglFramebuffer, renderTarget, 3553);
        this.setupRenderBuffer$2(renderTarget.__webglRenderbuffer, renderTarget);
        if (isTargetPowerOfTwo)
          J.generateMipmap$1$x(this._gl, 3553);
        J.bindTexture$2$x(this._gl, 3553, null);
        J.bindRenderbuffer$2$x(this._gl, 36161, null);
        J.bindFramebuffer$2$x(this._gl, 36160, null);
      }
      if (t1) {
        framebuffer = renderTarget.__webglFramebuffer;
        width = renderTarget.width;
        height = renderTarget.height;
        vx = 0;
        vy = 0;
      } else {
        width = this._viewportWidth;
        height = this._viewportHeight;
        vx = this._viewportX;
        vy = this._viewportY;
        framebuffer = null;
      }
      t1 = this._currentFramebuffer;
      if (framebuffer == null ? t1 != null : framebuffer !== t1) {
        J.bindFramebuffer$2$x(this._gl, 36160, framebuffer);
        J.viewport$4$x(this._gl, vx, vy, width, height);
        this._currentFramebuffer = framebuffer;
      }
      this._currentWidth = width;
      this._currentHeight = height;
    },
    filterFallback$1: function(f) {
      if (f === 3 || f === 4 || f === 5)
        return 9728;
      return 9729;
    },
    paramThreeToGL$1: function(p) {
      var t1 = J.getInterceptor(p);
      if (t1.$eq(p, 0))
        return 10497;
      if (t1.$eq(p, 1))
        return 33071;
      if (t1.$eq(p, 2))
        return 33648;
      if (t1.$eq(p, 3))
        return 9728;
      if (t1.$eq(p, 4))
        return 9984;
      if (t1.$eq(p, 5))
        return 9986;
      if (t1.$eq(p, 6))
        return 9729;
      if (t1.$eq(p, 7))
        return 9985;
      if (t1.$eq(p, 8))
        return 9987;
      if (t1.$eq(p, 10))
        return 5121;
      if (t1.$eq(p, 1016))
        return 32819;
      if (t1.$eq(p, 1017))
        return 32820;
      if (t1.$eq(p, 1018))
        return 33635;
      if (t1.$eq(p, 9))
        return 5120;
      if (t1.$eq(p, 11))
        return 5122;
      if (t1.$eq(p, 12))
        return 5123;
      if (t1.$eq(p, 13))
        return 5124;
      if (t1.$eq(p, 14))
        return 5125;
      if (t1.$eq(p, 15))
        return 5126;
      if (t1.$eq(p, 16))
        return 6406;
      if (t1.$eq(p, 17))
        return 6407;
      if (t1.$eq(p, 18))
        return 6408;
      if (t1.$eq(p, 19))
        return 6409;
      if (t1.$eq(p, 20))
        return 6410;
      if (t1.$eq(p, 100))
        return 32774;
      if (t1.$eq(p, 101))
        return 32778;
      if (t1.$eq(p, 102))
        return 32779;
      if (t1.$eq(p, 200))
        return 0;
      if (t1.$eq(p, 201))
        return 1;
      if (t1.$eq(p, 202))
        return 768;
      if (t1.$eq(p, 203))
        return 769;
      if (t1.$eq(p, 204))
        return 770;
      if (t1.$eq(p, 205))
        return 771;
      if (t1.$eq(p, 206))
        return 772;
      if (t1.$eq(p, 207))
        return 773;
      if (t1.$eq(p, 208))
        return 774;
      if (t1.$eq(p, 209))
        return 775;
      if (t1.$eq(p, 210))
        return 776;
      if (this._glExtensionCompressedTextureS3TC != null) {
        if (t1.$eq(p, 2001))
          return 33776;
        if (t1.$eq(p, 2002))
          return 33777;
        if (t1.$eq(p, 2003))
          return 33778;
        if (t1.$eq(p, 2004))
          return 33779;
      }
      return 0;
    },
    allocateBones$1: function(object) {
      var t1, nVertexMatrices;
      if (this.supportsBoneTextures === true)
        if (object != null)
          t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return 1024;
      else {
        nVertexMatrices = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(J.$sub$n(J.getParameter$1$x(this._gl, 36347), 20) / 4)));
        if (object != null)
          ;
        return nVertexMatrices;
      }
    },
    allocateLights$1: function(lights) {
      var ll, l, dirLights, pointLights, spotLights, hemiLights, light, t1;
      ll = lights.length;
      for (l = 0, dirLights = 0, pointLights = 0, spotLights = 0, hemiLights = 0; l < ll; ++l) {
        if (l >= lights.length)
          return H.ioore(lights, l);
        light = lights[l];
        t1 = !!J.getInterceptor(light).$isDirectionalLight;
        if ((t1 || false) && light.get$onlyShadow())
          continue;
        if (t1)
          ++dirLights;
      }
      return P.LinkedHashMap_LinkedHashMap$_literal(["directional", dirLights, "point", pointLights, "spot", spotLights, "hemi", hemiLights], null, null);
    },
    allocateShadows$1: function(lights) {
      var ll, l, maxShadows, light;
      ll = lights.length;
      for (l = 0, maxShadows = 0; l < ll; ++l) {
        if (l >= lights.length)
          return H.ioore(lights, l);
        light = lights[l];
        if (!light.get$castShadow())
          continue;
        if (!!J.getInterceptor(light).$isDirectionalLight && !light.shadowCascade)
          ++maxShadows;
      }
      return maxShadows;
    },
    initGL$0: function() {
      var error, t1, exception;
      try {
        t1 = J.getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil$x(this.canvas, this.alpha, this.antialias, this.premultipliedAlpha, this.preserveDrawingBuffer, this.stencil);
        this._gl = t1;
        if (t1 == null)
          throw H.wrapException("Error creating WebGL context.");
      } catch (exception) {
        t1 = H.unwrapException(exception);
        error = t1;
        P.print(error);
      }

      this._glExtensionTextureFloat = J.getExtension$1$x(this._gl, "OES_texture_float");
      this._glExtensionStandardDerivatives = J.getExtension$1$x(this._gl, "OES_standard_derivatives");
      t1 = J.getExtension$1$x(this._gl, "EXT_texture_filter_anisotropic");
      this._glExtensionTextureFilterAnisotropic = t1;
      if (t1 == null) {
        t1 = J.getExtension$1$x(this._gl, "MOZ_EXT_texture_filter_anisotropic");
        this._glExtensionTextureFilterAnisotropic = t1;
      }
      if (t1 == null)
        this._glExtensionTextureFilterAnisotropic = J.getExtension$1$x(this._gl, "WEBKIT_EXT_texture_filter_anisotropic");
      t1 = this._glExtensionCompressedTextureS3TC;
      if (t1 == null) {
        t1 = J.getExtension$1$x(this._gl, "WEBGL_compressed_texture_s3tc");
        this._glExtensionCompressedTextureS3TC = t1;
      }
      if (t1 == null) {
        t1 = J.getExtension$1$x(this._gl, "MOZ_WEBGL_compressed_texture_s3tc");
        this._glExtensionCompressedTextureS3TC = t1;
      }
      if (t1 == null)
        this._glExtensionCompressedTextureS3TC = J.getExtension$1$x(this._gl, "WEBKIT_WEBGL_compressed_texture_s3tc");
      if (this._glExtensionTextureFloat == null)
        P.print("THREE.WebGLRenderer: Float textures not supported.");
      if (this._glExtensionStandardDerivatives == null)
        P.print("THREE.WebGLRenderer: Standard derivatives not supported.");
      if (this._glExtensionTextureFilterAnisotropic == null)
        P.print("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
      if (this._glExtensionCompressedTextureS3TC == null)
        P.print("THREE.WebGLRenderer: S3TC compressed textures not supported.");
    },
    WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$devicePixelRatio$precision$premultipliedAlpha$preserveDrawingBuffer$stencil: function(alpha, antialias, canvas, clearAlpha, clearColorHex, devicePixelRatio, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
      var t1, _vertexShaderPrecisionHighpFloat, _vertexShaderPrecisionMediumpFloat, _fragmentShaderPrecisionHighpFloat, _fragmentShaderPrecisionMediumpFloat, highpAvailable, mediumpAvailable, t2, depthShader, depthUniforms, t3, t4, t5;
      t1 = window.devicePixelRatio != null ? window.devicePixelRatio : 1;
      this.devicePixelRatio = t1;
      this._lights = P.LinkedHashMap_LinkedHashMap$_literal(["ambient", [0, 0, 0], "directional", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "colors", [], "positions", []], null, null), "point", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "colors", [], "positions", [], "distances", []], null, null), "spot", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "colors", [], "positions", [], "distances", [], "directions", [], "anglesCos", [], "exponents", []], null, null), "hemi", P.LinkedHashMap_LinkedHashMap$_literal(["length", 0, "skyColors", [], "groundColors", [], "positions", []], null, null)], null, null);
      if (this.canvas == null)
        this.canvas = W.CanvasElement_CanvasElement(null, null);
      this.initGL$0();
      J.clearColor$4$x(this._gl, 0, 0, 0, 1);
      J.clearDepth$1$x(this._gl, 1);
      J.clearStencil$1$x(this._gl, 0);
      J.enable$1$x(this._gl, 2929);
      J.depthFunc$1$x(this._gl, 515);
      J.frontFace$1$x(this._gl, 2305);
      J.cullFace$1$x(this._gl, 1029);
      J.enable$1$x(this._gl, 2884);
      J.enable$1$x(this._gl, 3042);
      J.blendEquation$1$x(this._gl, 32774);
      J.blendFunc$2$x(this._gl, 770, 771);
      t1 = this._clearColor;
      J.clearColor$4$x(this._gl, t1._r, t1._g, t1._b, this._clearAlpha);
      this.maxTextures = J.getParameter$1$x(this._gl, 34930);
      this.maxVertexTextures = J.getParameter$1$x(this._gl, 35660);
      this.maxTextureSize = J.getParameter$1$x(this._gl, 3379);
      this.maxCubemapSize = J.getParameter$1$x(this._gl, 34076);
      this.maxAnisotropy = this._glExtensionTextureFilterAnisotropic != null ? J.getParameter$1$x(this._gl, 34047) : 0;
      t1 = J.$gt$n(this.maxVertexTextures, 0);
      this.supportsVertexTextures = t1;
      this.supportsBoneTextures = t1 && this._glExtensionTextureFloat != null;
      if (this._glExtensionCompressedTextureS3TC != null)
        J.getParameter$1$x(this._gl, 34467);
      _vertexShaderPrecisionHighpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36338);
      _vertexShaderPrecisionMediumpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36337);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36336);
      _fragmentShaderPrecisionHighpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36338);
      _fragmentShaderPrecisionMediumpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36337);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36336);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36341);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36340);
      J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36339);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36341);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36340);
      J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36339);
      t1 = _vertexShaderPrecisionHighpFloat.precision;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = _fragmentShaderPrecisionHighpFloat.precision;
        if (typeof t1 !== "number")
          return t1.$gt();
        highpAvailable = t1 > 0;
      } else
        highpAvailable = false;
      t1 = _vertexShaderPrecisionMediumpFloat.precision;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = _fragmentShaderPrecisionMediumpFloat.precision;
        if (typeof t1 !== "number")
          return t1.$gt();
        mediumpAvailable = t1 > 0;
      } else
        mediumpAvailable = false;
      if (this.precision === "highp" && !highpAvailable)
        if (mediumpAvailable) {
          this.precision = "mediump";
          P.print("WebGLRenderer: highp not supported, using mediump");
        } else {
          this.precision = "lowp";
          P.print("WebGLRenderer: highp and mediump not supported, using lowp");
        }
      if (this.precision === "mediump" && !mediumpAvailable) {
        this.precision = "lowp";
        P.print("WebGLRenderer: mediump not supported, using lowp");
      }
      t1 = S.Frustum$();
      t2 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t2.setIdentity$0();
      t2 = new S.ShadowMapPlugin(t1, t2, new T.Vector3(new Float32Array(H._checkLength(3))), new T.Vector3(new Float32Array(H._checkLength(3))), null, null, null, null, null, null);
      this.shadowMapPlugin = t2;
      t2._gl = this._gl;
      t2._renderer = this;
      depthShader = S.ShaderLib().$index(0, "depthRGBA");
      depthUniforms = S.UniformsUtils_clone(depthShader.$index(0, "uniforms"));
      t1 = depthShader.$index(0, "fragmentShader");
      t3 = depthShader.$index(0, "vertexShader");
      t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t5 = $.MaterialCount;
      $.MaterialCount = t5 + 1;
      t5 = new S.ShaderMaterial(t1, t3, null, 2, false, 1, false, false, false, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t5.uniforms = depthUniforms;
      t2._depthMaterial = S.WebGLMaterial_WebGLMaterial$from(t5);
      t1 = depthShader.$index(0, "fragmentShader");
      t3 = depthShader.$index(0, "vertexShader");
      t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t5 = $.MaterialCount;
      $.MaterialCount = t5 + 1;
      t5 = new S.ShaderMaterial(t1, t3, null, 2, false, 1, false, false, true, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t5.uniforms = depthUniforms;
      t2._depthMaterialMorph = S.WebGLMaterial_WebGLMaterial$from(t5);
      t1 = depthShader.$index(0, "fragmentShader");
      t3 = depthShader.$index(0, "vertexShader");
      t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t5 = $.MaterialCount;
      $.MaterialCount = t5 + 1;
      t5 = new S.ShaderMaterial(t1, t3, null, 2, false, 1, false, true, false, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t5.uniforms = depthUniforms;
      t2._depthMaterialSkin = S.WebGLMaterial_WebGLMaterial$from(t5);
      t1 = depthShader.$index(0, "fragmentShader");
      t3 = depthShader.$index(0, "vertexShader");
      t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t5 = $.MaterialCount;
      $.MaterialCount = t5 + 1;
      t5 = new S.ShaderMaterial(t1, t3, null, 2, false, 1, false, true, true, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
      t5.uniforms = depthUniforms;
      t2._depthMaterialMorphSkin = S.WebGLMaterial_WebGLMaterial$from(t5);
      t2._depthMaterial.set$shadowPass(true);
      t2._depthMaterialMorph.set$shadowPass(true);
      t2._depthMaterialSkin.set$shadowPass(true);
      t2._depthMaterialMorphSkin.set$shadowPass(true);
      this.renderPluginsPre.push(t2);
    },
    static: {"^": "WebGLRenderer_PRECISION_HIGH,WebGLRenderer_programLinkFailed"}
  },
  WebGLRenderer_initCustomAttributes_closure: {
    "^": "Closure:61;this_0,geometry_1,nvertices_2",
    call$2: function(key, attribute) {
      var t1, t2, t3;
      attribute.get$__webglInitialized();
      attribute.set$__webglInitialized(true);
      t1 = J.getInterceptor$x(attribute);
      t2 = t1.get$size(attribute);
      if (typeof t2 !== "number")
        return H.iae(t2);
      attribute.set$array(new Float32Array(H._checkLength(this.nvertices_2 * t2)));
      t2 = this.this_0._gl;
      t3 = new S.Buffer(t2, null, null);
      t3._glbuffer = J.createBuffer$0$x(t2);
      t1.set$buffer(attribute, t3);
      t1.get$buffer(attribute).set$belongsToAttribute(key);
      attribute.set$needsUpdate(true);
      this.geometry_1.get$__webglCustomAttributesList().push(attribute);
    }
  },
  WebGLRenderer_initMeshBuffers_closure: {
    "^": "Closure:61;this_0,geometryGroup_1,nvertices_2",
    call$2: function(key, attribute) {
      var t1, t2, buffer, originalAttribute;
      attribute.get$__webglInitialized();
      attribute.set$__webglInitialized(true);
      t1 = J.getInterceptor$x(attribute);
      t2 = t1.get$size(attribute);
      if (typeof t2 !== "number")
        return H.iae(t2);
      attribute.set$array(new Float32Array(H._checkLength(this.nvertices_2 * t2)));
      t2 = this.this_0._gl;
      buffer = new S.Buffer(t2, null, null);
      buffer._glbuffer = J.createBuffer$0$x(t2);
      buffer.belongsToAttribute = key;
      t1.set$buffer(attribute, buffer);
      originalAttribute = t1.clone$0(attribute);
      originalAttribute.set$needsUpdate(true);
      attribute.set$__original(originalAttribute);
      this.geometryGroup_1.get$__webglCustomAttributesList().push(attribute);
    }
  },
  WebGLRenderer_disableAttributes_closure: {
    "^": "Closure:61;this_0",
    call$2: function(attribute, enabled) {
      var t1;
      if (enabled === true) {
        t1 = this.this_0;
        J.disableVertexAttribArray$1$x(t1._gl, H.Primitives_parseInt(attribute, null, null));
        t1._enabledAttributes.$indexSet(0, attribute, false);
      }
    }
  },
  WebGLRenderer_renderPlugins_closure: {
    "^": "Closure:39;this_0,scene_1,camera_2",
    call$1: function(plugin) {
      var t1 = this.this_0;
      t1._currentProgram = null;
      t1._currentCamera = null;
      t1._oldBlending = -1;
      t1._oldDepthTest = -1;
      t1._oldDepthWrite = -1;
      t1._oldDoubleSided = -1;
      t1._oldFlipSided = -1;
      t1._currentGeometryGroupHash = -1;
      t1._currentMaterialId = -1;
      t1._lightsNeedUpdate = true;
      plugin.render$4(this.scene_1, this.camera_2.get$_camera(), t1._currentWidth, t1._currentHeight);
      t1._currentProgram = null;
      t1._currentCamera = null;
      t1._oldBlending = -1;
      t1._oldDepthTest = -1;
      t1._oldDepthWrite = -1;
      t1._oldDoubleSided = -1;
      t1._oldFlipSided = -1;
      t1._currentGeometryGroupHash = -1;
      t1._currentMaterialId = -1;
      t1._lightsNeedUpdate = true;
    }
  },
  WebGLRenderer_renderImmediateObject_closure: {
    "^": "Closure:39;this_0,material_1,program_2",
    call$1: [function(object) {
      this.this_0.renderBufferImmediate$3(object, this.program_2, this.material_1);
    }, "call$1", null, 2, 0, null, 15, "call"]
  },
  WebGLRenderer_sortFacesByMaterial_closure: {
    "^": "Closure:61;this_0,geometry_1",
    call$2: function(k, g) {
      J.set$id$x(g, this.this_0._geometryGroupCounter++);
      this.geometry_1.get$geometryGroupsList().push(g);
    }
  },
  WebGLRenderer_addObject_closure: {
    "^": "Closure:61;this_0,webglobject_1,geometry_2",
    call$2: function(k, geometryGroup) {
      var t1;
      if (geometryGroup.get$__webglVertexBuffer() == null) {
        t1 = this.this_0;
        t1.createMeshBuffers$1(geometryGroup);
        t1.initMeshBuffers$2(geometryGroup, this.webglobject_1);
        t1 = this.geometry_2;
        t1.set$verticesNeedUpdate(true);
        t1.set$morphTargetsNeedUpdate(true);
        t1.set$elementsNeedUpdate(true);
        t1.set$uvsNeedUpdate(true);
        t1.set$normalsNeedUpdate(true);
        t1.set$tangentsNeedUpdate(true);
        t1.set$colorsNeedUpdate(true);
      }
    }
  },
  WebGLRenderer_addObject_closure0: {
    "^": "Closure:61;this_3,scene_4,webglobject_5",
    call$2: function(k, geometryGroup) {
      this.this_3.addBuffer$3(this.scene_4.get$_data().$index(0, "__webglObjects"), geometryGroup, this.webglobject_5);
    }
  },
  WebGLRenderer_areCustomAttributesDirty_closure: {
    "^": "Closure:39;",
    call$1: function(a) {
      return a.get$needsUpdate();
    }
  },
  WebGLRenderer_clearCustomAttributes_closure: {
    "^": "Closure:61;",
    call$2: function(_, a) {
      a.set$needsUpdate(false);
    }
  },
  WebGLRenderer_initMaterial_closure: {
    "^": "Closure:61;material_0",
    call$2: function(k, u) {
      return this.material_0.get$uniformsList().push([u, k]);
    }
  },
  WebGLRenderer_loadUniformsGeneric_closure: {
    "^": "Closure:39;this_0",
    call$1: [function(_) {
      return this.this_0.getTextureUnit$0();
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  WebGLRenderer_generateDefines_closure: {
    "^": "Closure:61;box_0,chunks_1",
    call$2: function(d, value) {
      var chunk;
      if (!J.$eq(value, false)) {
        chunk = "#define " + H.S(d) + " " + H.S(value);
        this.box_0.chunk_0 = chunk;
        this.chunks_1.push(chunk);
      }
    }
  },
  WebGLRenderer_buildProgram_closure: {
    "^": "Closure:61;chunks_1",
    call$2: function(d, define) {
      var t1 = this.chunks_1;
      t1.push(d);
      t1.push(define);
    }
  },
  WebGLRenderer_buildProgram_closure0: {
    "^": "Closure:61;box_0",
    call$2: function(u, _) {
      return this.box_0.identifiers_0.push(u);
    }
  },
  WebGLRenderer_buildProgram_closure1: {
    "^": "Closure:61;box_0",
    call$2: function(a, _) {
      return this.box_0.identifiers_0.push(a);
    }
  },
  WebGLRendererInfo: {
    "^": "Object;memory,render@",
    render$1: function(arg0) {
      return this.render.call$1(arg0);
    },
    render$4: function(arg0, arg1, arg2, arg3) {
      return this.render.call$4(arg0, arg1, arg2, arg3);
    },
    WebGLRendererInfo$0: function() {
      this.memory = new S.WebGLRendererMemoryInfo(0, 0, 0);
      this.render = new S.WebGLRendererRenderInfo(0, 0, 0, 0);
    }
  },
  WebGLRendererMemoryInfo: {
    "^": "Object;programs,geometries,textures"
  },
  WebGLRendererRenderInfo: {
    "^": "Object;calls@,vertices@,faces@,points*"
  },
  Program: {
    "^": "Object;id*,glProgram,code,usedTimes,attributes>,uniforms@"
  },
  Buffer: {
    "^": "Object;context,_glbuffer,belongsToAttribute@",
    bind$1: function(target) {
      J.bindBuffer$2$x(this.context, target, this._glbuffer);
    }
  },
  WebGLObject: {
    "^": "Object;__webglInit@,__webglActive@,_modelViewMatrix@,_normalMatrix@,_normalMatrixArray,_modelViewMatrixArray,modelMatrixArray,buffer*,object<,opaque@,transparent@,render@,z*,__webglMorphTargetInfluences@",
    render$1: function(arg0) {
      return this.render.call$1(arg0);
    },
    render$4: function(arg0, arg1, arg2, arg3) {
      return this.render.call$4(arg0, arg1, arg2, arg3);
    },
    get$geometry: function() {
      var t1, t2;
      t1 = this.object;
      t2 = J.getInterceptor(t1);
      return !!t2.$isMesh || !!t2.$isParticleSystem || !!t2.$isLine ? t1.get$geometry() : null;
    },
    get$webglgeometry: function() {
      var t1, t2;
      t1 = this.object;
      t2 = J.getInterceptor(t1);
      if ((!!t2.$isMesh || !!t2.$isParticleSystem || !!t2.$isLine ? t1.get$geometry() : null) != null) {
        t1 = this.object;
        t2 = J.getInterceptor(t1);
        t1 = !!t2.$isMesh || !!t2.$isParticleSystem || !!t2.$isLine ? t1.get$geometry() : null;
        if (t1.get$_data().$index(0, "__webglBuffer") == null) {
          t2 = t1.id;
          t1.get$_data().$indexSet(0, "__webglBuffer", new S.WebGLGeometry(t2, null, null, null, 0, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1));
        }
        t1 = t1.get$_data().$index(0, "__webglBuffer");
      } else
        t1 = null;
      return t1;
    },
    get$material: function() {
      return this.object.get$material();
    },
    get$webglmaterial: function() {
      return S.WebGLMaterial_WebGLMaterial$from(this.object.get$material());
    },
    get$matrixWorld: function() {
      return this.object.get$matrixWorld();
    },
    get$morphTargetBase: function() {
      return this.object.get$morphTargetBase();
    },
    get$receiveShadow: function() {
      return this.object.get$receiveShadow();
    },
    get$morphTargetForcedOrder: function() {
      return H.interceptedTypeCast(this.object, "$isMesh").morphTargetForcedOrder;
    },
    get$morphTargetInfluences: function() {
      return H.interceptedTypeCast(this.object, "$isMesh").morphTargetInfluences;
    },
    get$useVertexTexture: function() {
      return this.object.get$useVertexTexture();
    },
    get$boneMatrices: function() {
      return this.object.get$boneMatrices();
    },
    $isWebGLObject: true
  },
  WebGLGeometry: {
    "^": "Object;id*,_vertices,faces3<,faces4<,materialIndex<,numMorphTargets<,numMorphNormals<,geometryGroups@,geometryGroupsList@,__webglInit@,__inittedArrays@,__vertexArray@,__normalArray@,__tangentArray@,__colorArray@,__lineDistanceArray@,__uvArray@,__uv2Array@,__skinVertexAArray,__skinVertexBArray,__skinIndexArray@,__skinWeightArray@,__faceArray@,__lineArray@,__morphTargetsArrays@,__morphNormalsArrays@,__webglFaceCount@,__webglLineCount@,__webglParticleCount@,__webglVertexCount,__sortArray@,__webglCustomAttributesList@,__webglVertexBuffer@,__webglNormalBuffer@,__webglTangentBuffer@,__webglColorBuffer@,__webglLineDistanceBuffer@,__webglUVBuffer@,__webglUV2Buffer@,__webglSkinVertexABuffer,__webglSkinVertexBBuffer,__webglSkinIndicesBuffer@,__webglSkinWeightsBuffer@,__webglFaceBuffer@,__webglLineBuffer@,__webglMorphTargetsBuffers@,__webglMorphNormalsBuffers@,_geometry<",
    set$vertices: function(n) {
      this._vertices = n;
      return n;
    },
    get$vertices: function() {
      var t1 = this._vertices;
      if (t1 == null && this._geometry != null)
        return this._geometry.vertices;
      return t1;
    },
    get$attributes: function(_) {
      return C.JSNull_methods.get$attributes(H.interceptedTypeCast(this._geometry, "$isBufferGeometry"));
    },
    get$lineDistances: function() {
      return this._geometry.lineDistances;
    },
    get$verticesNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "verticesNeedUpdate") && t1.get$_data().$index(0, "verticesNeedUpdate");
    },
    set$verticesNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "verticesNeedUpdate", flag);
    },
    get$morphTargetsNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "morphTargetsNeedUpdate") && t1.get$_data().$index(0, "morphTargetsNeedUpdate");
    },
    set$morphTargetsNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "morphTargetsNeedUpdate", flag);
    },
    get$elementsNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "elementsNeedUpdate") && t1.get$_data().$index(0, "elementsNeedUpdate");
    },
    set$elementsNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "elementsNeedUpdate", flag);
    },
    get$uvsNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "uvsNeedUpdate") && t1.get$_data().$index(0, "uvsNeedUpdate");
    },
    set$uvsNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "uvsNeedUpdate", flag);
    },
    get$normalsNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "normalsNeedUpdate") && t1.get$_data().$index(0, "normalsNeedUpdate");
    },
    set$normalsNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "normalsNeedUpdate", flag);
    },
    get$tangentsNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "tangentsNeedUpdate") && t1.get$_data().$index(0, "tangentsNeedUpdate");
    },
    set$tangentsNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "tangentsNeedUpdate", flag);
    },
    get$colorsNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "colorsNeedUpdate") && t1.get$_data().$index(0, "colorsNeedUpdate");
    },
    set$colorsNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "colorsNeedUpdate", flag);
    },
    get$lineDistancesNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "lineDistancesNeedUpdate") && t1.get$_data().$index(0, "lineDistancesNeedUpdate");
    },
    set$lineDistancesNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "lineDistancesNeedUpdate", flag);
    },
    get$buffersNeedUpdate: function() {
      var t1 = this._geometry;
      return t1.__data.containsKey$1(0, "buffersNeedUpdate") && t1.get$_data().$index(0, "buffersNeedUpdate");
    },
    set$buffersNeedUpdate: function(flag) {
      this._geometry.get$_data().$indexSet(0, "buffersNeedUpdate", flag);
    },
    get$morphTargets: function() {
      return this._geometry.morphTargets;
    },
    get$morphNormals: function() {
      return this._geometry.morphNormals;
    },
    get$faces: function() {
      return this._geometry.faces;
    },
    get$isDynamic: function() {
      return this._geometry._dynamic;
    },
    get$faceVertexUvs: function() {
      return this._geometry.faceVertexUvs;
    },
    get$colors: function() {
      return this._geometry.colors;
    },
    get$skinIndices: function() {
      return this._geometry.skinIndices;
    },
    get$skinWeights: function() {
      return this._geometry.skinWeights;
    },
    get$hasTangents: function() {
      return this._geometry.hasTangents;
    },
    get$isBufferGeometry: function() {
      return false;
    }
  },
  WebGLMaterial: {
    "^": "Object;_material,program@,_fragmentShader,_vertexShader,_uniforms,uniformsList@,numSupportedMorphTargets@,numSupportedMorphNormals@,shadowPass@",
    get$attributes: function(_) {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isShaderMaterial ? H.interceptedTypeCast(t1, "$isShaderMaterial").attributes : null;
    },
    get$defines: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isShaderMaterial ? H.interceptedTypeCast(t1, "$isShaderMaterial").defines : P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    },
    get$fragmentShader: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isShaderMaterial ? H.interceptedTypeCast(t1, "$isShaderMaterial").fragmentShader : this._fragmentShader;
    },
    get$vertexShader: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isShaderMaterial ? H.interceptedTypeCast(t1, "$isShaderMaterial").vertexShader : this._vertexShader;
    },
    get$uniforms: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isShaderMaterial ? H.interceptedTypeCast(t1, "$isShaderMaterial").uniforms : this._uniforms;
    },
    set$fragmentShader: function(v) {
      var t1 = this._material;
      if (!!J.getInterceptor(t1).$isShaderMaterial)
        H.interceptedTypeCast(t1, "$isShaderMaterial").fragmentShader = v;
      else
        this._fragmentShader = v;
      return v;
    },
    set$vertexShader: function(v) {
      var t1 = this._material;
      if (!!J.getInterceptor(t1).$isShaderMaterial)
        H.interceptedTypeCast(t1, "$isShaderMaterial").vertexShader = v;
      else
        this._vertexShader = v;
      return v;
    },
    set$uniforms: function(v) {
      var t1 = this._material;
      if (!!J.getInterceptor(t1).$isShaderMaterial)
        H.interceptedTypeCast(t1, "$isShaderMaterial").uniforms = v;
      else
        this._uniforms = v;
      return v;
    },
    get$needsSmoothNormals: function() {
      var t1 = this._material;
      if (t1 != null) {
        t1.get$shading();
        t1 = t1.get$shading() === 2;
      } else
        t1 = false;
      return t1;
    },
    get$needsNormals: function() {
      var t1 = this._material;
      if (!!J.getInterceptor(t1).$isMeshBasicMaterial) {
        t1.get$envMap();
        t1 = true;
      } else
        t1 = false;
      return !(t1 || false);
    },
    get$name: function(_) {
      return J.get$name$x(this._material);
    },
    get$id: function(_) {
      return J.get$id$x(this._material);
    },
    get$side: function() {
      return this._material.get$side();
    },
    get$opacity: function(_) {
      return J.get$opacity$x(this._material);
    },
    get$blending: function() {
      return this._material.get$blending();
    },
    get$blendSrc: function() {
      return this._material.get$blendSrc();
    },
    get$blendDst: function() {
      return this._material.get$blendDst();
    },
    get$blendEquation: function(_) {
      return J.get$blendEquation$x(this._material);
    },
    get$alphaTest: function() {
      return this._material.get$alphaTest();
    },
    get$polygonOffsetFactor: function() {
      return this._material.get$polygonOffsetFactor();
    },
    get$polygonOffsetUnits: function() {
      return this._material.get$polygonOffsetUnits();
    },
    get$transparent: function() {
      return this._material.get$transparent();
    },
    get$depthTest: function() {
      return this._material.get$depthTest();
    },
    get$depthWrite: function() {
      return this._material.get$depthWrite();
    },
    get$polygonOffset: function(_) {
      return J.get$polygonOffset$x(this._material);
    },
    get$visible: function(_) {
      return J.get$visible$x(this._material);
    },
    get$needsUpdate: function() {
      return this._material.get$needsUpdate();
    },
    set$needsUpdate: function(flag) {
      this._material.set$needsUpdate(flag);
      return flag;
    },
    get$vertexColors: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return !!t2.$isLineBasicMaterial || !!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial || !!t2.$isParticleBasicMaterial || !!t2.$isShaderMaterial ? t1.get$vertexColors() : 0;
    },
    get$color: function(_) {
      return J.get$color$x(this._material);
    },
    get$ambient: function() {
      return this._material.get$ambient();
    },
    get$emissive: function() {
      return this._material.get$emissive();
    },
    get$shininess: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isMeshPhongMaterial ? t1.get$shininess() : null;
    },
    get$specular: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isMeshPhongMaterial ? t1.get$specular() : null;
    },
    get$lights: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isShaderMaterial && H.interceptedTypeCast(t1, "$isShaderMaterial").lights;
    },
    get$morphTargets: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return (!!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial || !!t2.$isShaderMaterial) && t1.get$morphTargets();
    },
    get$morphNormals: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return (!!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial || !!t2.$isShaderMaterial) && t1.get$morphNormals();
    },
    get$metal: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isMeshPhongMaterial && H.interceptedTypeCast(t1, "$isMeshPhongMaterial").metal;
    },
    get$perPixel: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isMeshPhongMaterial && H.interceptedTypeCast(t1, "$isMeshPhongMaterial").perPixel;
    },
    get$wrapAround: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return (!!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial) && t1.get$wrapAround();
    },
    get$fog: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return (!!t2.$isLineBasicMaterial || !!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial || !!t2.$isParticleBasicMaterial || !!t2.$isShaderMaterial) && t1.get$fog();
    },
    get$shading: function() {
      return this._material.get$shading();
    },
    get$map: function(_) {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return !!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial || !!t2.$isParticleBasicMaterial ? t2.get$map(t1) : null;
    },
    map$1: function($receiver, arg0) {
      return this.get$map(this).call$1(arg0);
    },
    get$envMap: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return !!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial ? t1.get$envMap() : null;
    },
    get$lightMap: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return !!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial ? t1.get$lightMap() : null;
    },
    get$bumpMap: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isMeshPhongMaterial ? H.interceptedTypeCast(t1, "$isMeshPhongMaterial").bumpMap : null;
    },
    get$normalMap: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isMeshPhongMaterial ? t1.get$normalMap() : null;
    },
    get$specularMap: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return !!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial ? t1.get$specularMap() : null;
    },
    get$wireframe: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return !t2.$isLineBasicMaterial && !t2.$isParticleBasicMaterial && t1.get$wireframe();
    },
    get$wireframeLinewidth: function() {
      return this.get$wireframe() ? this._material.get$wireframeLinewidth() : null;
    },
    get$linewidth: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isLineBasicMaterial ? t1.get$linewidth() : null;
    },
    get$reflectivity: function() {
      return this._material.get$reflectivity();
    },
    get$refractionRatio: function() {
      return this._material.get$refractionRatio();
    },
    get$combine: function() {
      return this._material.get$combine();
    },
    get$skinning: function() {
      var t1, t2;
      t1 = this._material;
      t2 = J.getInterceptor(t1);
      return (!!t2.$isMeshBasicMaterial || !!t2.$isMeshLambertMaterial || !!t2.$isMeshPhongMaterial || !!t2.$isShaderMaterial) && t1.get$skinning();
    },
    get$sizeAttenuation: function() {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isParticleBasicMaterial && H.interceptedTypeCast(t1, "$isParticleBasicMaterial").sizeAttenuation;
    },
    get$size: function(_) {
      var t1 = this._material;
      return !!J.getInterceptor(t1).$isParticleBasicMaterial ? H.interceptedTypeCast(t1, "$isParticleBasicMaterial").size : null;
    },
    get$isShaderMaterial: function() {
      return !!J.getInterceptor(this._material).$isShaderMaterial;
    },
    get$isMeshDepthMaterial: function() {
      return false;
    },
    get$isMeshNormalMaterial: function() {
      return false;
    },
    get$isMeshBasicMaterial: function() {
      return !!J.getInterceptor(this._material).$isMeshBasicMaterial;
    },
    get$isMeshLambertMaterial: function() {
      return !!J.getInterceptor(this._material).$isMeshLambertMaterial;
    },
    get$isMeshPhongMaterial: function() {
      return !!J.getInterceptor(this._material).$isMeshPhongMaterial;
    },
    get$isLineBasicMaterial: function() {
      return !!J.getInterceptor(this._material).$isLineBasicMaterial;
    },
    get$isParticleBasicMaterial: function() {
      return !!J.getInterceptor(this._material).$isParticleBasicMaterial;
    },
    static: {WebGLMaterial_WebGLMaterial$from: function(material) {
        var t1 = J.getInterceptor$asx(material);
        if (t1.$index(material, "__webglMaterial") == null)
          t1.$indexSet(material, "__webglMaterial", new S.WebGLMaterial(material, null, null, null, null, null, 0, 0, false));
        return t1.$index(material, "__webglMaterial");
      }}
  },
  WebGLCamera: {
    "^": "Object;_camera<,_viewMatrixArray,_projectionMatrixArray",
    get$near: function() {
      return this._camera.get$near();
    },
    get$far: function() {
      return this._camera.get$far();
    },
    get$parent: function(_) {
      return J.get$parent$x(this._camera);
    },
    get$matrixWorld: function() {
      return this._camera.get$matrixWorld();
    },
    get$matrixWorldInverse: function() {
      return this._camera.get$matrixWorldInverse();
    },
    get$projectionMatrix: function() {
      return this._camera.get$projectionMatrix();
    },
    updateMatrixWorld$1$force: function(force) {
      return this._camera.updateMatrixWorld$0();
    },
    updateMatrixWorld$0: function() {
      return this.updateMatrixWorld$1$force(false);
    },
    $isWebGLCamera: true,
    static: {WebGLCamera_WebGLCamera: function(camera) {
        var t1 = J.getInterceptor$asx(camera);
        if (t1.$index(camera, "__webglCamera") == null)
          t1.$indexSet(camera, "__webglCamera", new S.WebGLCamera(camera, new Float32Array(H._checkLength(16)), new Float32Array(H._checkLength(16))));
        return t1.$index(camera, "__webglCamera");
      }}
  },
  UniformsUtils_merge_closure: {
    "^": "Closure:101;merged_0",
    call$1: function(uniforms) {
      J.forEach$1$ax(uniforms, new S.UniformsUtils_merge__closure(this.merged_0));
    }
  },
  UniformsUtils_merge__closure: {
    "^": "Closure:61;merged_1",
    call$2: [function(k, uniform) {
      this.merged_1.$indexSet(0, k, J.clone$0$x(uniform));
    }, "call$2", null, 4, 0, null, 102, 103, "call"]
  },
  UniformsUtils_clone_closure: {
    "^": "Closure:61;result_0",
    call$2: [function(k, uniform) {
      this.result_0.$indexSet(0, k, J.clone$0$x(uniform));
    }, "call$2", null, 4, 0, null, 102, 103, "call"]
  },
  Uniform: {
    "^": "Object;type>,_three$_value,_dirty,_three$_array@",
    get$value: function(_) {
      return this._three$_value;
    },
    set$value: function(_, v) {
      if (this.type === "f")
        v = J.toDouble$0$n(v);
      this._dirty = true;
      this._three$_value = v;
    },
    get$typedValue: function() {
      var t1, values, t2, i, offset, t3, t4, t5, lst;
      if (!this._dirty && this._three$_array != null)
        return this._three$_array;
      t1 = this.type;
      if ((t1 === "fv" || t1 === "fv1") && !J.getInterceptor(this._three$_value).$isFloat32List)
        this._three$_array = new Float32Array(H._ensureNativeList(J.map$1$ax(H.listTypeCast(this._three$_value), new S.Uniform_typedValue_closure()).toList$0(0)));
      else if ((t1 === "iv" || t1 === "iv1") && !J.getInterceptor(this._three$_value).$isInt32List)
        this._three$_array = new Int32Array(H._ensureNativeList(J.map$1$ax(H.listTypeCast(this._three$_value), new S.Uniform_typedValue_closure0()).toList$0(0)));
      else if (t1 === "v2v") {
        values = H.subtypeCast(this._three$_value, "$isList", [T.Vector2], "$asList");
        t1 = this._three$_array;
        if (t1 == null) {
          t1 = new Float32Array(H._checkLength(2 * J.get$length$asx(values)));
          this._three$_array = t1;
        }
        H.interceptedTypeCast(t1, "$isFloat32List");
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          offset = i * 2;
          t3 = J.get$x$x(t2.$index(values, i));
          t4 = t1.length;
          if (offset >= t4)
            return H.ioore(t1, offset);
          t1[offset] = t3;
          t3 = offset + 1;
          t5 = J.get$y$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
        }
      } else if (t1 === "v3v") {
        values = H.subtypeCast(this._three$_value, "$isList", [T.Vector3], "$asList");
        t1 = this._three$_array;
        if (t1 == null) {
          t1 = new Float32Array(H._checkLength(3 * J.get$length$asx(values)));
          this._three$_array = t1;
        }
        H.interceptedTypeCast(t1, "$isFloat32List");
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          offset = i * 3;
          t3 = J.get$x$x(t2.$index(values, i));
          t4 = t1.length;
          if (offset >= t4)
            return H.ioore(t1, offset);
          t1[offset] = t3;
          t3 = offset + 1;
          t5 = J.get$y$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
          t5 = offset + 2;
          t3 = J.get$z$x(t2.$index(values, i));
          if (t5 >= t4)
            return H.ioore(t1, t5);
          t1[t5] = t3;
        }
      } else if (t1 === "v4v") {
        values = H.subtypeCast(this._three$_value, "$isList", [T.Vector4], "$asList");
        t1 = this._three$_array;
        if (t1 == null) {
          t1 = new Float32Array(H._checkLength(4 * J.get$length$asx(values)));
          this._three$_array = t1;
        }
        H.interceptedTypeCast(t1, "$isFloat32List");
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          offset = i * 4;
          t3 = J.get$x$x(t2.$index(values, i));
          t4 = t1.length;
          if (offset >= t4)
            return H.ioore(t1, offset);
          t1[offset] = t3;
          t3 = offset + 1;
          t5 = J.get$y$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
          t5 = offset + 2;
          t3 = J.get$z$x(t2.$index(values, i));
          if (t5 >= t4)
            return H.ioore(t1, t5);
          t1[t5] = t3;
          t3 = offset + 3;
          t5 = J.get$w$x(t2.$index(values, i));
          if (t3 >= t4)
            return H.ioore(t1, t3);
          t1[t3] = t5;
        }
      } else if (t1 === "m2")
        this._three$_array = C.JSNull_methods.get$storage(H.interceptedTypeCast(this._three$_value, "$isMatrix2"));
      else if (t1 === "m3")
        this._three$_array = H.interceptedTypeCast(this._three$_value, "$isMatrix3").storage;
      else if (t1 === "m4")
        this._three$_array = H.interceptedTypeCast(this._three$_value, "$isMatrix4").storage;
      else {
        t2 = this._three$_value;
        if (t1 === "m4v") {
          lst = [];
          J.forEach$1$ax(H.subtypeCast(t2, "$isList", [T.Matrix4], "$asList"), new S.Uniform_typedValue_closure1(lst));
          this._three$_array = new Float32Array(H._ensureNativeList(lst));
        } else
          return t2;
      }
      return this._three$_array;
    },
    clone$0: function(_) {
      var dst, t1;
      dst = this._three$_value;
      t1 = J.getInterceptor(dst);
      if (!!t1.$isColor || !!t1.$isVector2 || !!t1.$isVector3 || !!t1.$isVector4 || !!t1.$isMatrix4 || !!t1.$isTexture)
        dst = t1.clone$0(dst);
      else if (!!t1.$isList)
        dst = P.List_List$from(H.listTypeCast(dst), true, null);
      t1 = new S.Uniform(this.type, null, true, null);
      t1.set$value(0, dst);
      return t1;
    }
  },
  Uniform_typedValue_closure: {
    "^": "Closure:39;",
    call$1: [function(_) {
      return J.toDouble$0$n(_);
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  Uniform_typedValue_closure0: {
    "^": "Closure:39;",
    call$1: [function(_) {
      return J.toInt$0$n(_);
    }, "call$1", null, 2, 0, null, 66, "call"]
  },
  Uniform_typedValue_closure1: {
    "^": "Closure:39;lst_0",
    call$1: function(m) {
      C.JSArray_methods.addAll$1(this.lst_0, J.get$storage$x(m));
    }
  },
  Scene: {
    "^": "Object3D;fog<,overrideMaterial,objects,lights<,__objectsAdded,__objectsRemoved,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
    addObject$1: function(object) {
      var t1, t2, i, c;
      t1 = J.getInterceptor(object);
      if (!!t1.$isLight) {
        t2 = this.lights;
        if (H.Lists_indexOf(t2, object, 0, t2.length) === -1)
          this.lights.push(object);
      } else if (!(!!t1.$isCamera || false)) {
        t2 = this.objects;
        if (H.Lists_indexOf(t2, object, 0, t2.length) === -1) {
          this.objects.push(object);
          this.__objectsAdded.push(object);
          t2 = this.__objectsRemoved;
          i = H.Lists_indexOf(t2, object, 0, t2.length);
          if (i !== -1)
            C.JSArray_methods.removeAt$1(this.__objectsRemoved, i);
        }
      }
      for (c = 0; c < J.get$length$asx(t1.get$children(object)); ++c)
        this.addObject$1(J.$index$asx(t1.get$children(object), c));
    },
    removeObject$1: function(object) {
      var t1, t2, i, ai, c;
      t1 = J.getInterceptor(object);
      if (!!t1.$isLight) {
        t2 = this.lights;
        i = H.Lists_indexOf(t2, object, 0, t2.length);
        if (i !== -1)
          C.JSArray_methods.removeAt$1(this.lights, i);
      } else if (!t1.$isCamera) {
        t2 = this.objects;
        i = H.Lists_indexOf(t2, object, 0, t2.length);
        if (i !== -1) {
          C.JSArray_methods.removeAt$1(this.objects, i);
          this.__objectsRemoved.push(object);
          t2 = this.__objectsAdded;
          ai = H.Lists_indexOf(t2, object, 0, t2.length);
          if (ai !== -1)
            C.JSArray_methods.removeAt$1(this.__objectsAdded, ai);
        }
      }
      for (c = 0; c < J.get$length$asx(t1.get$children(object)); ++c)
        this.removeObject$1(J.$index$asx(t1.get$children(object), c));
    },
    Scene$0: function() {
      this.fog = null;
      this.overrideMaterial = null;
      this.matrixAutoUpdate = false;
      this.objects = [];
      this.lights = [];
      this.__objectsAdded = [];
      this.__objectsRemoved = [];
    },
    $isScene: true
  },
  Texture: {
    "^": "Object;id*,image<,mapping,wrapS<,wrapT<,magFilter<,minFilter<,format>,type>,anisotropy<,offset*,repeat*,generateMipmaps@,premultiplyAlpha<,needsUpdate@,onUpdate<,flipY>,unpackAlignment<,mipmaps<,__data",
    clone$0: function(_) {
      var clonedTexture = S.Texture$(this.image, this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter, this.format, this.type, this.anisotropy);
      clonedTexture.mipmaps = P.List_List$from(this.mipmaps, true, null);
      clonedTexture.offset.setFrom$1(this.get$offset(this));
      clonedTexture.repeat.setFrom$1(this.get$repeat(this));
      return clonedTexture;
    },
    get$_data: function() {
      var t1 = this.__data;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.__data = t1;
      }
      return t1;
    },
    $index: function(_, key) {
      return this.get$_data().$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this.get$_data().$indexSet(0, key, value);
      return value;
    },
    Texture$9: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
      var t1 = $.TextureCount;
      $.TextureCount = t1 + 1;
      this.id = t1;
      t1 = this.mapping;
      this.mapping = t1 != null ? t1 : new S.UVMapping();
      this.set$offset(0, new T.Vector2(new Float32Array(H._checkLength(2))));
      t1 = new Float32Array(H._checkLength(2));
      t1[0] = 1;
      t1[1] = 1;
      this.set$repeat(0, new T.Vector2(t1));
      this.set$generateMipmaps(true);
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.needsUpdate = false;
      this.onUpdate = null;
    },
    $isTexture: true,
    static: {Texture$: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        var t1 = new S.Texture(null, image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, null, null, null, null, null, null, null, 4, [], null);
        t1.Texture$9(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        return t1;
      }}
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "^": "",
  setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
    var two_near, right_minus_left, top_minus_bottom, far_minus_near, t1;
    two_near = 2 * near;
    right_minus_left = right - left;
    top_minus_bottom = $top - bottom;
    far_minus_near = far - near;
    t1 = perspectiveMatrix.setZero$0().storage;
    t1[0] = two_near / right_minus_left;
    t1[5] = two_near / top_minus_bottom;
    t1[8] = (right + left) / right_minus_left;
    t1[9] = ($top + bottom) / top_minus_bottom;
    t1[10] = -(far + near) / far_minus_near;
    t1[11] = -1;
    t1[14] = -(two_near * far) / far_minus_near;
  },
  setOrthographicMatrix: function(orthographicMatrix, left, right, bottom, $top, near, far) {
    var rml, tmb, fmn, t1;
    rml = right - left;
    tmb = $top - bottom;
    fmn = far - near;
    t1 = orthographicMatrix.setZero$0().storage;
    t1[0] = 2 / rml;
    t1[5] = 2 / tmb;
    t1[10] = -2 / fmn;
    t1[12] = -(right + left) / rml;
    t1[13] = -($top + bottom) / tmb;
    t1[14] = -(far + near) / fmn;
    t1[15] = 1;
  },
  Matrix3: {
    "^": "Object;storage>",
    setValues$9: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      var t1 = this.storage;
      t1[8] = arg8;
      t1[7] = arg7;
      t1[6] = arg6;
      t1[5] = arg5;
      t1[4] = arg4;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage(arg);
      if (8 >= t2.length)
        return H.ioore(t2, 8);
      t1[8] = t2[8];
      t2 = arg.get$storage(arg);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      t1[7] = t2[7];
      t2 = arg.get$storage(arg);
      if (6 >= t2.length)
        return H.ioore(t2, 6);
      t1[6] = t2[6];
      t2 = arg.get$storage(arg);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t1[5] = t2[5];
      t2 = arg.get$storage(arg);
      if (4 >= t2.length)
        return H.ioore(t2, 4);
      t1[4] = t2[4];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = arg.get$storage(arg);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = arg.get$storage(arg);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n";
    },
    get$dimension: function() {
      return 3;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(3));
      t2 = this.storage;
      if (row >= 9)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 3 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 6 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      return new T.Vector3(t1);
    },
    clone$0: function(_) {
      var t1 = new T.Matrix3(new Float32Array(H._checkLength(9)));
      t1.setFrom$1(this);
      return t1;
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      if (typeof arg === "number") {
        t1 = new Float32Array(H._checkLength(9));
        t2 = this.storage;
        t1[8] = t2[8] * arg;
        t1[7] = t2[7] * arg;
        t1[6] = t2[6] * arg;
        t1[5] = t2[5] * arg;
        t1[4] = t2[4] * arg;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix3(t1);
      }
      t1 = J.getInterceptor(arg);
      if (!!t1.$isVector3) {
        t1 = new Float32Array(H._checkLength(3));
        t2 = this.storage;
        t3 = t2[2];
        t4 = arg.storage;
        t1[2] = t3 * t4[0] + t2[5] * t4[1] + t2[8] * t4[2];
        t1[1] = t2[1] * t4[0] + t2[4] * t4[1] + t2[7] * t4[2];
        t1[0] = t2[0] * t4[0] + t2[3] * t4[1] + t2[6] * t4[2];
        return new T.Vector3(t1);
      }
      if (3 === arg.get$dimension()) {
        t2 = new Float32Array(H._checkLength(9));
        t3 = this.storage;
        t4 = t3[0];
        t5 = t1.get$storage(arg);
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[3];
        t7 = t1.get$storage(arg);
        if (1 >= t7.length)
          return H.ioore(t7, 1);
        t7 = t7[1];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[6];
        t9 = t1.get$storage(arg);
        if (2 >= t9.length)
          return H.ioore(t9, 2);
        t9 = t9[2];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t2[0] = t4 * t5 + t6 * t7 + t8 * t9;
        t9 = t3[0];
        t8 = t1.get$storage(arg);
        if (3 >= t8.length)
          return H.ioore(t8, 3);
        t8 = t8[3];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[3];
        t6 = t1.get$storage(arg);
        if (4 >= t6.length)
          return H.ioore(t6, 4);
        t6 = t6[4];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[6];
        t4 = t1.get$storage(arg);
        if (5 >= t4.length)
          return H.ioore(t4, 5);
        t4 = t4[5];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[3] = t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[0];
        t5 = t1.get$storage(arg);
        if (6 >= t5.length)
          return H.ioore(t5, 6);
        t5 = t5[6];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[3];
        t7 = t1.get$storage(arg);
        if (7 >= t7.length)
          return H.ioore(t7, 7);
        t7 = t7[7];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[6];
        t9 = t1.get$storage(arg);
        if (8 >= t9.length)
          return H.ioore(t9, 8);
        t9 = t9[8];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t2[6] = t4 * t5 + t6 * t7 + t8 * t9;
        t9 = t3[1];
        t8 = t1.get$storage(arg);
        if (0 >= t8.length)
          return H.ioore(t8, 0);
        t8 = t8[0];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[4];
        t6 = t1.get$storage(arg);
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[7];
        t4 = t1.get$storage(arg);
        if (2 >= t4.length)
          return H.ioore(t4, 2);
        t4 = t4[2];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[1] = t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[1];
        t5 = t1.get$storage(arg);
        if (3 >= t5.length)
          return H.ioore(t5, 3);
        t5 = t5[3];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[4];
        t7 = t1.get$storage(arg);
        if (4 >= t7.length)
          return H.ioore(t7, 4);
        t7 = t7[4];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[7];
        t9 = t1.get$storage(arg);
        if (5 >= t9.length)
          return H.ioore(t9, 5);
        t9 = t9[5];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t2[4] = t4 * t5 + t6 * t7 + t8 * t9;
        t9 = t3[1];
        t8 = t1.get$storage(arg);
        if (6 >= t8.length)
          return H.ioore(t8, 6);
        t8 = t8[6];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[4];
        t6 = t1.get$storage(arg);
        if (7 >= t6.length)
          return H.ioore(t6, 7);
        t6 = t6[7];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[7];
        t4 = t1.get$storage(arg);
        if (8 >= t4.length)
          return H.ioore(t4, 8);
        t4 = t4[8];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[7] = t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[2];
        t5 = t1.get$storage(arg);
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[5];
        t7 = t1.get$storage(arg);
        if (1 >= t7.length)
          return H.ioore(t7, 1);
        t7 = t7[1];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[8];
        t9 = t1.get$storage(arg);
        if (2 >= t9.length)
          return H.ioore(t9, 2);
        t9 = t9[2];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t2[2] = t4 * t5 + t6 * t7 + t8 * t9;
        t9 = t3[2];
        t8 = t1.get$storage(arg);
        if (3 >= t8.length)
          return H.ioore(t8, 3);
        t8 = t8[3];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[5];
        t6 = t1.get$storage(arg);
        if (4 >= t6.length)
          return H.ioore(t6, 4);
        t6 = t6[4];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[8];
        t4 = t1.get$storage(arg);
        if (5 >= t4.length)
          return H.ioore(t4, 5);
        t4 = t4[5];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[5] = t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[2];
        t5 = t1.get$storage(arg);
        if (6 >= t5.length)
          return H.ioore(t5, 6);
        t5 = t5[6];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[5];
        t7 = t1.get$storage(arg);
        if (7 >= t7.length)
          return H.ioore(t7, 7);
        t7 = t7[7];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t3 = t3[8];
        t1 = t1.get$storage(arg);
        if (8 >= t1.length)
          return H.ioore(t1, 8);
        t1 = t1[8];
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2[8] = t4 * t5 + t6 * t7 + t3 * t1;
        return new T.Matrix3(t2);
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t3 = t2[0];
      t4 = J.getInterceptor$x(arg);
      t5 = t4.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 + t5;
      t5 = t2[1];
      t3 = t4.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 + t3;
      t3 = t2[2];
      t5 = t4.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[2] = t3 + t5;
      t5 = t2[3];
      t3 = t4.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t5 + t3;
      t3 = t2[4];
      t5 = t4.get$storage(arg);
      if (4 >= t5.length)
        return H.ioore(t5, 4);
      t5 = t5[4];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[4] = t3 + t5;
      t5 = t2[5];
      t3 = t4.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[5] = t5 + t3;
      t3 = t2[6];
      t5 = t4.get$storage(arg);
      if (6 >= t5.length)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[6] = t3 + t5;
      t5 = t2[7];
      t3 = t4.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[7] = t5 + t3;
      t2 = t2[8];
      t4 = t4.get$storage(arg);
      if (8 >= t4.length)
        return H.ioore(t4, 8);
      t4 = t4[8];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[8] = t2 + t4;
      return new T.Matrix3(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t3 = t2[0];
      t4 = J.getInterceptor$x(arg);
      t5 = t4.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 - t5;
      t5 = t2[1];
      t3 = t4.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 - t3;
      t3 = t2[2];
      t5 = t4.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[2] = t3 - t5;
      t5 = t2[3];
      t3 = t4.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t5 - t3;
      t3 = t2[4];
      t5 = t4.get$storage(arg);
      if (4 >= t5.length)
        return H.ioore(t5, 4);
      t5 = t5[4];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[4] = t3 - t5;
      t5 = t2[5];
      t3 = t4.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[5] = t5 - t3;
      t3 = t2[6];
      t5 = t4.get$storage(arg);
      if (6 >= t5.length)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[6] = t3 - t5;
      t5 = t2[7];
      t3 = t4.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[7] = t5 - t3;
      t2 = t2[8];
      t4 = t4.get$storage(arg);
      if (8 >= t4.length)
        return H.ioore(t4, 8);
      t4 = t4[8];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[8] = t2 - t4;
      return new T.Matrix3(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      t1[2] = -t2[2];
      return new T.Matrix3(t1);
    },
    transpose$0: function() {
      var t1, temp;
      t1 = this.storage;
      temp = t1[3];
      t1[3] = t1[1];
      t1[1] = temp;
      temp = t1[6];
      t1[6] = t1[2];
      t1[2] = temp;
      temp = t1[7];
      t1[7] = t1[5];
      t1[5] = temp;
      return this;
    },
    add$1: function(_, o) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(o);
      t4 = t3.get$storage(o);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[0] = t2 + t4;
      t4 = t1[1];
      t2 = t3.get$storage(o);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[1] = t4 + t2;
      t2 = t1[2];
      t4 = t3.get$storage(o);
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t4 = t4[2];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[2] = t2 + t4;
      t4 = t1[3];
      t2 = t3.get$storage(o);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t2 = t2[3];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[3] = t4 + t2;
      t2 = t1[4];
      t4 = t3.get$storage(o);
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t4 = t4[4];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[4] = t2 + t4;
      t4 = t1[5];
      t2 = t3.get$storage(o);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t2 = t2[5];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[5] = t4 + t2;
      t2 = t1[6];
      t4 = t3.get$storage(o);
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t4 = t4[6];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[6] = t2 + t4;
      t4 = t1[7];
      t2 = t3.get$storage(o);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      t2 = t2[7];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[7] = t4 + t2;
      t2 = t1[8];
      t3 = t3.get$storage(o);
      if (8 >= t3.length)
        return H.ioore(t3, 8);
      t3 = t3[8];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[8] = t2 + t3;
      return this;
    },
    sub$1: function(o) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = o.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t1[2] = t1[2] - t2[2];
      t3 = t1[3];
      if (3 >= 3)
        return H.ioore(t2, 3);
      t1[3] = t3 - t2[3];
      t3 = t1[4];
      return H.ioore(t2, 4);
      t1[4] = t3 - t2[4];
      t3 = t1[5];
      return H.ioore(t2, 5);
      t1[5] = t3 - t2[5];
      t3 = t1[6];
      return H.ioore(t2, 6);
      t1[6] = t3 - t2[6];
      t3 = t1[7];
      return H.ioore(t2, 7);
      t1[7] = t3 - t2[7];
      t3 = t1[8];
      return H.ioore(t2, 8);
      t1[8] = t3 - t2[8];
      return this;
    },
    multiply$1: function(_, arg) {
      var t1, m00, m01, m02, m10, m11, m12, m20, m21, m22, t2, n00, n01, n02, n10, n11, n12, n20, n21, n22;
      t1 = this.storage;
      m00 = t1[0];
      m01 = t1[3];
      m02 = t1[6];
      m10 = t1[1];
      m11 = t1[4];
      m12 = t1[7];
      m20 = t1[2];
      m21 = t1[5];
      m22 = t1[8];
      t2 = arg.storage;
      n00 = t2[0];
      if (3 >= 3)
        return H.ioore(t2, 3);
      n01 = t2[3];
      return H.ioore(t2, 6);
      n02 = t2[6];
      n10 = t2[1];
      return H.ioore(t2, 4);
      n11 = t2[4];
      return H.ioore(t2, 7);
      n12 = t2[7];
      n20 = t2[2];
      return H.ioore(t2, 5);
      n21 = t2[5];
      return H.ioore(t2, 8);
      n22 = t2[8];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20;
      t1[3] = m00 * n01 + m01 * n11 + m02 * n21;
      t1[6] = m00 * n02 + m01 * n12 + m02 * n22;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20;
      t1[4] = m10 * n01 + m11 * n11 + m12 * n21;
      t1[7] = m10 * n02 + m11 * n12 + m12 * n22;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20;
      t1[5] = m20 * n01 + m21 * n11 + m22 * n21;
      t1[8] = m20 * n02 + m21 * n12 + m22 * n22;
      return this;
    },
    $isMatrix3: true
  },
  Matrix4: {
    "^": "Object;storage>",
    setValues$16: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
      var t1 = this.storage;
      t1[15] = arg15;
      t1[14] = arg14;
      t1[13] = arg13;
      t1[12] = arg12;
      t1[11] = arg11;
      t1[10] = arg10;
      t1[9] = arg9;
      t1[8] = arg8;
      t1[7] = arg7;
      t1[6] = arg6;
      t1[5] = arg5;
      t1[4] = arg4;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage(arg);
      if (15 >= t2.length)
        return H.ioore(t2, 15);
      t1[15] = t2[15];
      t2 = arg.get$storage(arg);
      if (14 >= t2.length)
        return H.ioore(t2, 14);
      t1[14] = t2[14];
      t2 = arg.get$storage(arg);
      if (13 >= t2.length)
        return H.ioore(t2, 13);
      t1[13] = t2[13];
      t2 = arg.get$storage(arg);
      if (12 >= t2.length)
        return H.ioore(t2, 12);
      t1[12] = t2[12];
      t2 = arg.get$storage(arg);
      if (11 >= t2.length)
        return H.ioore(t2, 11);
      t1[11] = t2[11];
      t2 = arg.get$storage(arg);
      if (10 >= t2.length)
        return H.ioore(t2, 10);
      t1[10] = t2[10];
      t2 = arg.get$storage(arg);
      if (9 >= t2.length)
        return H.ioore(t2, 9);
      t1[9] = t2[9];
      t2 = arg.get$storage(arg);
      if (8 >= t2.length)
        return H.ioore(t2, 8);
      t1[8] = t2[8];
      t2 = arg.get$storage(arg);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      t1[7] = t2[7];
      t2 = arg.get$storage(arg);
      if (6 >= t2.length)
        return H.ioore(t2, 6);
      t1[6] = t2[6];
      t2 = arg.get$storage(arg);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t1[5] = t2[5];
      t2 = arg.get$storage(arg);
      if (4 >= t2.length)
        return H.ioore(t2, 4);
      t1[4] = t2[4];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = arg.get$storage(arg);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = arg.get$storage(arg);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n[3] " + this.getRow$1(3).toString$0(0) + "\n";
    },
    get$dimension: function() {
      return 4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 16)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      if (row >= 16)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new T.Vector4(t1);
    },
    getColumn$1: function(column) {
      var t1, entry, t2, t3;
      t1 = new Float32Array(H._checkLength(4));
      entry = column * 4;
      t2 = this.storage;
      t3 = entry + 3;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      t3 = entry + 2;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = entry + 1;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      if (entry >= 16)
        return H.ioore(t2, entry);
      t1[0] = t2[entry];
      return new T.Vector4(t1);
    },
    clone$0: function(_) {
      var t1 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t1.setFrom$1(this);
      return t1;
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
      if (typeof arg === "number") {
        t1 = new Float32Array(H._checkLength(16));
        t2 = this.storage;
        t1[15] = t2[15] * arg;
        t1[14] = t2[14] * arg;
        t1[13] = t2[13] * arg;
        t1[12] = t2[12] * arg;
        t1[11] = t2[11] * arg;
        t1[10] = t2[10] * arg;
        t1[9] = t2[9] * arg;
        t1[8] = t2[8] * arg;
        t1[7] = t2[7] * arg;
        t1[6] = t2[6] * arg;
        t1[5] = t2[5] * arg;
        t1[4] = t2[4] * arg;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix4(t1);
      }
      t1 = J.getInterceptor(arg);
      if (!!t1.$isVector4) {
        t1 = new Float32Array(H._checkLength(4));
        t2 = this.storage;
        t3 = t2[3];
        t4 = arg.storage;
        t1[3] = t3 * t4[0] + t2[7] * t4[1] + t2[11] * t4[2] + t2[15] * t4[3];
        t1[2] = t2[2] * t4[0] + t2[6] * t4[1] + t2[10] * t4[2] + t2[14] * t4[3];
        t1[1] = t2[1] * t4[0] + t2[5] * t4[1] + t2[9] * t4[2] + t2[13] * t4[3];
        t1[0] = t2[0] * t4[0] + t2[4] * t4[1] + t2[8] * t4[2] + t2[12] * t4[3];
        return new T.Vector4(t1);
      }
      if (!!t1.$isVector3) {
        t1 = new Float32Array(H._checkLength(3));
        t2 = this.storage;
        t3 = t2[0];
        t4 = arg.storage;
        t1[0] = t3 * t4[0] + t2[4] * t4[1] + t2[8] * t4[2] + t2[12];
        t1[1] = t2[1] * t4[0] + t2[5] * t4[1] + t2[9] * t4[2] + t2[13];
        t1[2] = t2[2] * t4[0] + t2[6] * t4[1] + t2[10] * t4[2] + t2[14];
        return new T.Vector3(t1);
      }
      if (4 === arg.get$dimension()) {
        t2 = new Float32Array(H._checkLength(16));
        t3 = this.storage;
        t4 = t3[0];
        t5 = t1.get$storage(arg);
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[4];
        t7 = t1.get$storage(arg);
        if (1 >= t7.length)
          return H.ioore(t7, 1);
        t7 = t7[1];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[8];
        t9 = t1.get$storage(arg);
        if (2 >= t9.length)
          return H.ioore(t9, 2);
        t9 = t9[2];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[12];
        t11 = t1.get$storage(arg);
        if (3 >= t11.length)
          return H.ioore(t11, 3);
        t11 = t11[3];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[0] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[0];
        t10 = t1.get$storage(arg);
        if (4 >= t10.length)
          return H.ioore(t10, 4);
        t10 = t10[4];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[4];
        t8 = t1.get$storage(arg);
        if (5 >= t8.length)
          return H.ioore(t8, 5);
        t8 = t8[5];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[8];
        t6 = t1.get$storage(arg);
        if (6 >= t6.length)
          return H.ioore(t6, 6);
        t6 = t6[6];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[12];
        t4 = t1.get$storage(arg);
        if (7 >= t4.length)
          return H.ioore(t4, 7);
        t4 = t4[7];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[4] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[0];
        t5 = t1.get$storage(arg);
        if (8 >= t5.length)
          return H.ioore(t5, 8);
        t5 = t5[8];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[4];
        t7 = t1.get$storage(arg);
        if (9 >= t7.length)
          return H.ioore(t7, 9);
        t7 = t7[9];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[8];
        t9 = t1.get$storage(arg);
        if (10 >= t9.length)
          return H.ioore(t9, 10);
        t9 = t9[10];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[12];
        t11 = t1.get$storage(arg);
        if (11 >= t11.length)
          return H.ioore(t11, 11);
        t11 = t11[11];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[8] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[0];
        t10 = t1.get$storage(arg);
        if (12 >= t10.length)
          return H.ioore(t10, 12);
        t10 = t10[12];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[4];
        t8 = t1.get$storage(arg);
        if (13 >= t8.length)
          return H.ioore(t8, 13);
        t8 = t8[13];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[8];
        t6 = t1.get$storage(arg);
        if (14 >= t6.length)
          return H.ioore(t6, 14);
        t6 = t6[14];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[12];
        t4 = t1.get$storage(arg);
        if (15 >= t4.length)
          return H.ioore(t4, 15);
        t4 = t4[15];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[12] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[1];
        t5 = t1.get$storage(arg);
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[5];
        t7 = t1.get$storage(arg);
        if (1 >= t7.length)
          return H.ioore(t7, 1);
        t7 = t7[1];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[9];
        t9 = t1.get$storage(arg);
        if (2 >= t9.length)
          return H.ioore(t9, 2);
        t9 = t9[2];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[13];
        t11 = t1.get$storage(arg);
        if (3 >= t11.length)
          return H.ioore(t11, 3);
        t11 = t11[3];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[1] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[1];
        t10 = t1.get$storage(arg);
        if (4 >= t10.length)
          return H.ioore(t10, 4);
        t10 = t10[4];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[5];
        t8 = t1.get$storage(arg);
        if (5 >= t8.length)
          return H.ioore(t8, 5);
        t8 = t8[5];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[9];
        t6 = t1.get$storage(arg);
        if (6 >= t6.length)
          return H.ioore(t6, 6);
        t6 = t6[6];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[13];
        t4 = t1.get$storage(arg);
        if (7 >= t4.length)
          return H.ioore(t4, 7);
        t4 = t4[7];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[5] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[1];
        t5 = t1.get$storage(arg);
        if (8 >= t5.length)
          return H.ioore(t5, 8);
        t5 = t5[8];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[5];
        t7 = t1.get$storage(arg);
        if (9 >= t7.length)
          return H.ioore(t7, 9);
        t7 = t7[9];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[9];
        t9 = t1.get$storage(arg);
        if (10 >= t9.length)
          return H.ioore(t9, 10);
        t9 = t9[10];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[13];
        t11 = t1.get$storage(arg);
        if (11 >= t11.length)
          return H.ioore(t11, 11);
        t11 = t11[11];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[9] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[1];
        t10 = t1.get$storage(arg);
        if (12 >= t10.length)
          return H.ioore(t10, 12);
        t10 = t10[12];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[5];
        t8 = t1.get$storage(arg);
        if (13 >= t8.length)
          return H.ioore(t8, 13);
        t8 = t8[13];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[9];
        t6 = t1.get$storage(arg);
        if (14 >= t6.length)
          return H.ioore(t6, 14);
        t6 = t6[14];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[13];
        t4 = t1.get$storage(arg);
        if (15 >= t4.length)
          return H.ioore(t4, 15);
        t4 = t4[15];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[13] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[2];
        t5 = t1.get$storage(arg);
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[6];
        t7 = t1.get$storage(arg);
        if (1 >= t7.length)
          return H.ioore(t7, 1);
        t7 = t7[1];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[10];
        t9 = t1.get$storage(arg);
        if (2 >= t9.length)
          return H.ioore(t9, 2);
        t9 = t9[2];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[14];
        t11 = t1.get$storage(arg);
        if (3 >= t11.length)
          return H.ioore(t11, 3);
        t11 = t11[3];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[2] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[2];
        t10 = t1.get$storage(arg);
        if (4 >= t10.length)
          return H.ioore(t10, 4);
        t10 = t10[4];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[6];
        t8 = t1.get$storage(arg);
        if (5 >= t8.length)
          return H.ioore(t8, 5);
        t8 = t8[5];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[10];
        t6 = t1.get$storage(arg);
        if (6 >= t6.length)
          return H.ioore(t6, 6);
        t6 = t6[6];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[14];
        t4 = t1.get$storage(arg);
        if (7 >= t4.length)
          return H.ioore(t4, 7);
        t4 = t4[7];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[6] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[2];
        t5 = t1.get$storage(arg);
        if (8 >= t5.length)
          return H.ioore(t5, 8);
        t5 = t5[8];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[6];
        t7 = t1.get$storage(arg);
        if (9 >= t7.length)
          return H.ioore(t7, 9);
        t7 = t7[9];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[10];
        t9 = t1.get$storage(arg);
        if (10 >= t9.length)
          return H.ioore(t9, 10);
        t9 = t9[10];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[14];
        t11 = t1.get$storage(arg);
        if (11 >= t11.length)
          return H.ioore(t11, 11);
        t11 = t11[11];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[10] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[2];
        t10 = t1.get$storage(arg);
        if (12 >= t10.length)
          return H.ioore(t10, 12);
        t10 = t10[12];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[6];
        t8 = t1.get$storage(arg);
        if (13 >= t8.length)
          return H.ioore(t8, 13);
        t8 = t8[13];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[10];
        t6 = t1.get$storage(arg);
        if (14 >= t6.length)
          return H.ioore(t6, 14);
        t6 = t6[14];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[14];
        t4 = t1.get$storage(arg);
        if (15 >= t4.length)
          return H.ioore(t4, 15);
        t4 = t4[15];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[14] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[3];
        t5 = t1.get$storage(arg);
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[7];
        t7 = t1.get$storage(arg);
        if (1 >= t7.length)
          return H.ioore(t7, 1);
        t7 = t7[1];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[11];
        t9 = t1.get$storage(arg);
        if (2 >= t9.length)
          return H.ioore(t9, 2);
        t9 = t9[2];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[15];
        t11 = t1.get$storage(arg);
        if (3 >= t11.length)
          return H.ioore(t11, 3);
        t11 = t11[3];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[3] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[3];
        t10 = t1.get$storage(arg);
        if (4 >= t10.length)
          return H.ioore(t10, 4);
        t10 = t10[4];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[7];
        t8 = t1.get$storage(arg);
        if (5 >= t8.length)
          return H.ioore(t8, 5);
        t8 = t8[5];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[11];
        t6 = t1.get$storage(arg);
        if (6 >= t6.length)
          return H.ioore(t6, 6);
        t6 = t6[6];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t3[15];
        t4 = t1.get$storage(arg);
        if (7 >= t4.length)
          return H.ioore(t4, 7);
        t4 = t4[7];
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[7] = t11 * t10 + t9 * t8 + t7 * t6 + t5 * t4;
        t4 = t3[3];
        t5 = t1.get$storage(arg);
        if (8 >= t5.length)
          return H.ioore(t5, 8);
        t5 = t5[8];
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = t3[7];
        t7 = t1.get$storage(arg);
        if (9 >= t7.length)
          return H.ioore(t7, 9);
        t7 = t7[9];
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = t3[11];
        t9 = t1.get$storage(arg);
        if (10 >= t9.length)
          return H.ioore(t9, 10);
        t9 = t9[10];
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = t3[15];
        t11 = t1.get$storage(arg);
        if (11 >= t11.length)
          return H.ioore(t11, 11);
        t11 = t11[11];
        if (typeof t11 !== "number")
          return H.iae(t11);
        t2[11] = t4 * t5 + t6 * t7 + t8 * t9 + t10 * t11;
        t11 = t3[3];
        t10 = t1.get$storage(arg);
        if (12 >= t10.length)
          return H.ioore(t10, 12);
        t10 = t10[12];
        if (typeof t10 !== "number")
          return H.iae(t10);
        t9 = t3[7];
        t8 = t1.get$storage(arg);
        if (13 >= t8.length)
          return H.ioore(t8, 13);
        t8 = t8[13];
        if (typeof t8 !== "number")
          return H.iae(t8);
        t7 = t3[11];
        t6 = t1.get$storage(arg);
        if (14 >= t6.length)
          return H.ioore(t6, 14);
        t6 = t6[14];
        if (typeof t6 !== "number")
          return H.iae(t6);
        t3 = t3[15];
        t1 = t1.get$storage(arg);
        if (15 >= t1.length)
          return H.ioore(t1, 15);
        t1 = t1[15];
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2[15] = t11 * t10 + t9 * t8 + t7 * t6 + t3 * t1;
        return new T.Matrix4(t2);
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t3 = t2[0];
      t4 = J.getInterceptor$x(arg);
      t5 = t4.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 + t5;
      t5 = t2[1];
      t3 = t4.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 + t3;
      t3 = t2[2];
      t5 = t4.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[2] = t3 + t5;
      t5 = t2[3];
      t3 = t4.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t5 + t3;
      t3 = t2[4];
      t5 = t4.get$storage(arg);
      if (4 >= t5.length)
        return H.ioore(t5, 4);
      t5 = t5[4];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[4] = t3 + t5;
      t5 = t2[5];
      t3 = t4.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[5] = t5 + t3;
      t3 = t2[6];
      t5 = t4.get$storage(arg);
      if (6 >= t5.length)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[6] = t3 + t5;
      t5 = t2[7];
      t3 = t4.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[7] = t5 + t3;
      t3 = t2[8];
      t5 = t4.get$storage(arg);
      if (8 >= t5.length)
        return H.ioore(t5, 8);
      t5 = t5[8];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[8] = t3 + t5;
      t5 = t2[9];
      t3 = t4.get$storage(arg);
      if (9 >= t3.length)
        return H.ioore(t3, 9);
      t3 = t3[9];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[9] = t5 + t3;
      t3 = t2[10];
      t5 = t4.get$storage(arg);
      if (10 >= t5.length)
        return H.ioore(t5, 10);
      t5 = t5[10];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[10] = t3 + t5;
      t5 = t2[11];
      t3 = t4.get$storage(arg);
      if (11 >= t3.length)
        return H.ioore(t3, 11);
      t3 = t3[11];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[11] = t5 + t3;
      t3 = t2[12];
      t5 = t4.get$storage(arg);
      if (12 >= t5.length)
        return H.ioore(t5, 12);
      t5 = t5[12];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[12] = t3 + t5;
      t5 = t2[13];
      t3 = t4.get$storage(arg);
      if (13 >= t3.length)
        return H.ioore(t3, 13);
      t3 = t3[13];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[13] = t5 + t3;
      t3 = t2[14];
      t5 = t4.get$storage(arg);
      if (14 >= t5.length)
        return H.ioore(t5, 14);
      t5 = t5[14];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[14] = t3 + t5;
      t2 = t2[15];
      t4 = t4.get$storage(arg);
      if (15 >= t4.length)
        return H.ioore(t4, 15);
      t4 = t4[15];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[15] = t2 + t4;
      return new T.Matrix4(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t3 = t2[0];
      t4 = J.getInterceptor$x(arg);
      t5 = t4.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[0] = t3 - t5;
      t5 = t2[1];
      t3 = t4.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t5 - t3;
      t3 = t2[2];
      t5 = t4.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[2] = t3 - t5;
      t5 = t2[3];
      t3 = t4.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t5 - t3;
      t3 = t2[4];
      t5 = t4.get$storage(arg);
      if (4 >= t5.length)
        return H.ioore(t5, 4);
      t5 = t5[4];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[4] = t3 - t5;
      t5 = t2[5];
      t3 = t4.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[5] = t5 - t3;
      t3 = t2[6];
      t5 = t4.get$storage(arg);
      if (6 >= t5.length)
        return H.ioore(t5, 6);
      t5 = t5[6];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[6] = t3 - t5;
      t5 = t2[7];
      t3 = t4.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[7] = t5 - t3;
      t3 = t2[8];
      t5 = t4.get$storage(arg);
      if (8 >= t5.length)
        return H.ioore(t5, 8);
      t5 = t5[8];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[8] = t3 - t5;
      t5 = t2[9];
      t3 = t4.get$storage(arg);
      if (9 >= t3.length)
        return H.ioore(t3, 9);
      t3 = t3[9];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[9] = t5 - t3;
      t3 = t2[10];
      t5 = t4.get$storage(arg);
      if (10 >= t5.length)
        return H.ioore(t5, 10);
      t5 = t5[10];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[10] = t3 - t5;
      t5 = t2[11];
      t3 = t4.get$storage(arg);
      if (11 >= t3.length)
        return H.ioore(t3, 11);
      t3 = t3[11];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[11] = t5 - t3;
      t3 = t2[12];
      t5 = t4.get$storage(arg);
      if (12 >= t5.length)
        return H.ioore(t5, 12);
      t5 = t5[12];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[12] = t3 - t5;
      t5 = t2[13];
      t3 = t4.get$storage(arg);
      if (13 >= t3.length)
        return H.ioore(t3, 13);
      t3 = t3[13];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[13] = t5 - t3;
      t3 = t2[14];
      t5 = t4.get$storage(arg);
      if (14 >= t5.length)
        return H.ioore(t5, 14);
      t5 = t5[14];
      if (typeof t5 !== "number")
        return H.iae(t5);
      t1[14] = t3 - t5;
      t2 = t2[15];
      t4 = t4.get$storage(arg);
      if (15 >= t4.length)
        return H.ioore(t4, 15);
      t4 = t4[15];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[15] = t2 - t4;
      return new T.Matrix4(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      t1[2] = -t2[2];
      t1[3] = -t2[3];
      return new T.Matrix4(t1);
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 0;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 0;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 0;
      return this;
    },
    setIdentity$0: function() {
      var t1 = this.storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
      return this;
    },
    getTranslation$0: function() {
      var t1, z, y, x;
      t1 = this.storage;
      z = t1[14];
      y = t1[13];
      x = t1[12];
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(x, y, z);
      return t1;
    },
    setTranslation$1: function($T) {
      var t1, z, y, x;
      t1 = $T.storage;
      z = t1[2];
      y = t1[1];
      x = t1[0];
      t1 = this.storage;
      t1[14] = z;
      t1[13] = y;
      t1[12] = x;
    },
    copyInverse$1: function(arg) {
      var t1, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t2, t3;
      t1 = arg.get$storage(arg);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      a00 = t1[0];
      t1 = arg.get$storage(arg);
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      a01 = t1[1];
      t1 = arg.get$storage(arg);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      a02 = t1[2];
      t1 = arg.get$storage(arg);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      a03 = t1[3];
      t1 = arg.get$storage(arg);
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      a10 = t1[4];
      t1 = arg.get$storage(arg);
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      a11 = t1[5];
      t1 = arg.get$storage(arg);
      if (6 >= t1.length)
        return H.ioore(t1, 6);
      a12 = t1[6];
      t1 = arg.get$storage(arg);
      if (7 >= t1.length)
        return H.ioore(t1, 7);
      a13 = t1[7];
      t1 = arg.get$storage(arg);
      if (8 >= t1.length)
        return H.ioore(t1, 8);
      a20 = t1[8];
      t1 = arg.get$storage(arg);
      if (9 >= t1.length)
        return H.ioore(t1, 9);
      a21 = t1[9];
      t1 = arg.get$storage(arg);
      if (10 >= t1.length)
        return H.ioore(t1, 10);
      a22 = t1[10];
      t1 = arg.get$storage(arg);
      if (11 >= t1.length)
        return H.ioore(t1, 11);
      a23 = t1[11];
      t1 = arg.get$storage(arg);
      if (12 >= t1.length)
        return H.ioore(t1, 12);
      a30 = t1[12];
      t1 = arg.get$storage(arg);
      if (13 >= t1.length)
        return H.ioore(t1, 13);
      a31 = t1[13];
      t1 = arg.get$storage(arg);
      if (14 >= t1.length)
        return H.ioore(t1, 14);
      a32 = t1[14];
      t1 = arg.get$storage(arg);
      if (15 >= t1.length)
        return H.ioore(t1, 15);
      a33 = t1[15];
      b00 = a00 * a11 - a01 * a10;
      b01 = a00 * a12 - a02 * a10;
      b02 = a00 * a13 - a03 * a10;
      b03 = a01 * a12 - a02 * a11;
      b04 = a01 * a13 - a03 * a11;
      b05 = a02 * a13 - a03 * a12;
      b06 = a20 * a31 - a21 * a30;
      b07 = a20 * a32 - a22 * a30;
      b08 = a20 * a33 - a23 * a30;
      b09 = a21 * a32 - a22 * a31;
      b10 = a21 * a33 - a23 * a31;
      b11 = a22 * a33 - a23 * a32;
      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t1 = this.storage;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    add$1: function(_, o) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(o);
      t4 = t3.get$storage(o);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[0] = t2 + t4;
      t4 = t1[1];
      t2 = t3.get$storage(o);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[1] = t4 + t2;
      t2 = t1[2];
      t4 = t3.get$storage(o);
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t4 = t4[2];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[2] = t2 + t4;
      t4 = t1[3];
      t2 = t3.get$storage(o);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t2 = t2[3];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[3] = t4 + t2;
      t2 = t1[4];
      t4 = t3.get$storage(o);
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t4 = t4[4];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[4] = t2 + t4;
      t4 = t1[5];
      t2 = t3.get$storage(o);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      t2 = t2[5];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[5] = t4 + t2;
      t2 = t1[6];
      t4 = t3.get$storage(o);
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t4 = t4[6];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[6] = t2 + t4;
      t4 = t1[7];
      t2 = t3.get$storage(o);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      t2 = t2[7];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[7] = t4 + t2;
      t2 = t1[8];
      t4 = t3.get$storage(o);
      if (8 >= t4.length)
        return H.ioore(t4, 8);
      t4 = t4[8];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[8] = t2 + t4;
      t4 = t1[9];
      t2 = t3.get$storage(o);
      if (9 >= t2.length)
        return H.ioore(t2, 9);
      t2 = t2[9];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[9] = t4 + t2;
      t2 = t1[10];
      t4 = t3.get$storage(o);
      if (10 >= t4.length)
        return H.ioore(t4, 10);
      t4 = t4[10];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[10] = t2 + t4;
      t4 = t1[11];
      t2 = t3.get$storage(o);
      if (11 >= t2.length)
        return H.ioore(t2, 11);
      t2 = t2[11];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[11] = t4 + t2;
      t2 = t1[12];
      t4 = t3.get$storage(o);
      if (12 >= t4.length)
        return H.ioore(t4, 12);
      t4 = t4[12];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[12] = t2 + t4;
      t4 = t1[13];
      t2 = t3.get$storage(o);
      if (13 >= t2.length)
        return H.ioore(t2, 13);
      t2 = t2[13];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[13] = t4 + t2;
      t2 = t1[14];
      t4 = t3.get$storage(o);
      if (14 >= t4.length)
        return H.ioore(t4, 14);
      t4 = t4[14];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[14] = t2 + t4;
      t4 = t1[15];
      t3 = t3.get$storage(o);
      if (15 >= t3.length)
        return H.ioore(t3, 15);
      t3 = t3[15];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[15] = t4 + t3;
      return this;
    },
    sub$1: function(o) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = o.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t1[2] = t1[2] - t2[2];
      t3 = t1[3];
      if (3 >= 3)
        return H.ioore(t2, 3);
      t1[3] = t3 - t2[3];
      t3 = t1[4];
      return H.ioore(t2, 4);
      t1[4] = t3 - t2[4];
      t3 = t1[5];
      return H.ioore(t2, 5);
      t1[5] = t3 - t2[5];
      t3 = t1[6];
      return H.ioore(t2, 6);
      t1[6] = t3 - t2[6];
      t3 = t1[7];
      return H.ioore(t2, 7);
      t1[7] = t3 - t2[7];
      t3 = t1[8];
      return H.ioore(t2, 8);
      t1[8] = t3 - t2[8];
      t3 = t1[9];
      return H.ioore(t2, 9);
      t1[9] = t3 - t2[9];
      t3 = t1[10];
      return H.ioore(t2, 10);
      t1[10] = t3 - t2[10];
      t3 = t1[11];
      return H.ioore(t2, 11);
      t1[11] = t3 - t2[11];
      t3 = t1[12];
      return H.ioore(t2, 12);
      t1[12] = t3 - t2[12];
      t3 = t1[13];
      return H.ioore(t2, 13);
      t1[13] = t3 - t2[13];
      t3 = t1[14];
      return H.ioore(t2, 14);
      t1[14] = t3 - t2[14];
      t3 = t1[15];
      return H.ioore(t2, 15);
      t1[15] = t3 - t2[15];
      return this;
    },
    multiply$1: function(_, arg) {
      var t1, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, t2, n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33;
      t1 = this.storage;
      m00 = t1[0];
      m01 = t1[4];
      m02 = t1[8];
      m03 = t1[12];
      m10 = t1[1];
      m11 = t1[5];
      m12 = t1[9];
      m13 = t1[13];
      m20 = t1[2];
      m21 = t1[6];
      m22 = t1[10];
      m23 = t1[14];
      m30 = t1[3];
      m31 = t1[7];
      m32 = t1[11];
      m33 = t1[15];
      t2 = arg.get$storage(arg);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      n00 = t2[0];
      t2 = arg.get$storage(arg);
      if (4 >= t2.length)
        return H.ioore(t2, 4);
      n01 = t2[4];
      t2 = arg.get$storage(arg);
      if (8 >= t2.length)
        return H.ioore(t2, 8);
      n02 = t2[8];
      t2 = arg.get$storage(arg);
      if (12 >= t2.length)
        return H.ioore(t2, 12);
      n03 = t2[12];
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      n10 = t2[1];
      t2 = arg.get$storage(arg);
      if (5 >= t2.length)
        return H.ioore(t2, 5);
      n11 = t2[5];
      t2 = arg.get$storage(arg);
      if (9 >= t2.length)
        return H.ioore(t2, 9);
      n12 = t2[9];
      t2 = arg.get$storage(arg);
      if (13 >= t2.length)
        return H.ioore(t2, 13);
      n13 = t2[13];
      t2 = arg.get$storage(arg);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      n20 = t2[2];
      t2 = arg.get$storage(arg);
      if (6 >= t2.length)
        return H.ioore(t2, 6);
      n21 = t2[6];
      t2 = arg.get$storage(arg);
      if (10 >= t2.length)
        return H.ioore(t2, 10);
      n22 = t2[10];
      t2 = arg.get$storage(arg);
      if (14 >= t2.length)
        return H.ioore(t2, 14);
      n23 = t2[14];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      n30 = t2[3];
      t2 = arg.get$storage(arg);
      if (7 >= t2.length)
        return H.ioore(t2, 7);
      n31 = t2[7];
      t2 = arg.get$storage(arg);
      if (11 >= t2.length)
        return H.ioore(t2, 11);
      n32 = t2[11];
      t2 = arg.get$storage(arg);
      if (15 >= t2.length)
        return H.ioore(t2, 15);
      n33 = t2[15];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
      return this;
    },
    rotate3$1: function(arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.storage;
      t4 = t3[0];
      t5 = t1[4];
      t6 = t3[1];
      t7 = t1[8];
      t8 = t3[2];
      t9 = t1[1];
      t10 = t1[5];
      t11 = t1[9];
      t12 = t1[2];
      t13 = t1[6];
      t1 = t1[10];
      t3[0] = t2 * t4 + t5 * t6 + t7 * t8;
      t3[1] = t9 * t4 + t10 * t6 + t11 * t8;
      t3[2] = t12 * t4 + t13 * t6 + t1 * t8;
      return arg;
    },
    Matrix4$diagonal3Values$3: function(x, y, z) {
      var t1 = this.storage;
      t1[15] = 1;
      t1[10] = z;
      t1[5] = y;
      t1[0] = x;
    },
    Matrix4$rotationY$1: function(radians_) {
      var t1, c, s;
      t1 = this.storage;
      t1[15] = 1;
      c = Math.cos(H.checkNum(radians_));
      s = Math.sin(H.checkNum(radians_));
      t1[0] = c;
      t1[1] = 0;
      t1[2] = s;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[8] = -s;
      t1[9] = 0;
      t1[10] = c;
      t1[3] = 0;
      t1[7] = 0;
      t1[11] = 0;
    },
    $isMatrix4: true
  },
  Quaternion: {
    "^": "Object;storage>",
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    get$w: function(_) {
      return this.storage[3];
    },
    set$x: function(_, x) {
      this.storage[0] = x;
    },
    set$y: function(_, y) {
      this.storage[1] = y;
    },
    set$z: function(_, z) {
      this.storage[2] = z;
    },
    clone$0: function(_) {
      return T.Quaternion$copy(this);
    },
    normalize$0: function(_) {
      var l, t1;
      l = Math.sqrt(H.checkNum(this.get$length2()));
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[3] = t1[3] * l;
      t1[2] = t1[2] * l;
      t1[1] = t1[1] * l;
      t1[0] = t1[0] * l;
      return this;
    },
    get$length2: function() {
      var t1, _x, _y, _z, _w;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      _w = t1[3];
      return _x * _x + _y * _y + _z * _z + _w * _w;
    },
    get$length: function(_) {
      return Math.sqrt(H.checkNum(this.get$length2()));
    },
    $mul: function(_, other) {
      var t1, _w, _z, _y, _x, t2, ow, oz, oy, ox;
      t1 = this.storage;
      _w = t1[3];
      _z = t1[2];
      _y = t1[1];
      _x = t1[0];
      t1 = J.getInterceptor$x(other);
      t2 = t1.get$storage(other);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      ow = t2[3];
      t2 = t1.get$storage(other);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      oz = t2[2];
      t2 = t1.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      oy = t2[1];
      t1 = t1.get$storage(other);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      ox = t1[0];
      if (typeof ox !== "number")
        return H.iae(ox);
      if (typeof ow !== "number")
        return H.iae(ow);
      if (typeof oz !== "number")
        return H.iae(oz);
      if (typeof oy !== "number")
        return H.iae(oy);
      return T.Quaternion$(_w * ox + _x * ow + _y * oz - _z * oy, _w * oy + _y * ow + _z * ox - _x * oz, _w * oz + _z * ow + _x * oy - _y * ox, _w * ow - _x * ox - _y * oy - _z * oz);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return T.Quaternion$(t2 + t4, t5 + t6, t7 + t8, t1 + t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return T.Quaternion$(t2 - t4, t5 - t6, t7 - t8, t1 - t3);
    },
    $negate: function(_) {
      var t1 = this.storage;
      return T.Quaternion$(-t1[0], -t1[1], -t1[2], -t1[3]);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, arg) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = arg;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
    },
    Quaternion$copy$1: function(original) {
      var t1, t2;
      t1 = this.storage;
      t2 = original.storage;
      t1[0] = t2[0];
      t1[1] = t2[1];
      t1[2] = t2[2];
      t1[3] = t2[3];
    },
    Quaternion$identity$0: function() {
      this.storage[3] = 1;
    },
    Quaternion$4: function(x, y, z, w) {
      var t1 = this.storage;
      t1[0] = x;
      t1[1] = y;
      t1[2] = z;
      t1[3] = w;
    },
    static: {Quaternion$: function(x, y, z, w) {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$4(x, y, z, w);
        return t1;
      }, Quaternion$copy: function(original) {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$copy$1(original);
        return t1;
      }, Quaternion$identity: function() {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$identity$0();
        return t1;
      }}
  },
  Vector2: {
    "^": "Object;storage>",
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = other.get$storage(other);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = -t2;
      t3[1] = -t1;
      return new T.Vector2(t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 - t4;
      t5[1] = t1 - t3;
      return new T.Vector2(t5);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 + t4;
      t5[1] = t1 + t3;
      return new T.Vector2(t5);
    },
    $div: function(_, scale) {
      var o, t1, t2, t3;
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * o;
      t3[1] = t1 * o;
      return new T.Vector2(t3);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(H.checkNum(t2 * t2 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function(_) {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return this;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 + t1 * t3;
    },
    cross$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4 = t4[1];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1[1];
      t3 = t3.get$storage(other);
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 - t1 * t3;
    },
    add$1: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(arg);
      t4 = t3.get$storage(arg);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[0] = t2 + t4;
      t4 = t1[1];
      t3 = t3.get$storage(arg);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t3 = t3[1];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[1] = t4 + t3;
      return this;
    },
    sub$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      return this;
    },
    multiply$1: function(_, arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] * t2[0];
      t1[1] = t1[1] * t2[1];
      return this;
    },
    clone$0: function(_) {
      var t1 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t1.setFrom$1(this);
      return t1;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$r: function(_) {
      return this.storage[0];
    },
    get$g: function() {
      return this.storage[1];
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    $isVector2: true
  },
  Vector3: {
    "^": "Object;storage>",
    setValues$3: function(x_, y_, z_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      t1[2] = z_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$storage(other);
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = t3[0];
      t3 = t2.get$storage(other);
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t3[1];
      t2 = t2.get$storage(other);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(-t2, -t3, -t1);
      return t4;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = t1[2];
      t3 = t3.get$storage(other);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 - t4, t5 - t6, t1 - t3);
      return t7;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = t1[2];
      t3 = t3.get$storage(other);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 + t4, t5 + t6, t1 + t3);
      return t7;
    },
    $div: function(_, scale) {
      var o, t1, t2, t3, t4;
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2 * o, t3 * o, t1 * o);
      return t4;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
      return t4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    normalize$0: function(_) {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      t1[2] = t1[2] * l;
      return this;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t1 = t1[2];
      t3 = t3.get$storage(other);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 + t5 * t6 + t1 * t3;
    },
    cross$1: function(other) {
      var t1, _x, _y, _z, t2, ox, oy, oz;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t1 = J.getInterceptor$x(other);
      t2 = t1.get$storage(other);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      ox = t2[0];
      t2 = t1.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      oy = t2[1];
      t1 = t1.get$storage(other);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      oz = t1[2];
      if (typeof oz !== "number")
        return H.iae(oz);
      if (typeof oy !== "number")
        return H.iae(oy);
      if (typeof ox !== "number")
        return H.iae(ox);
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
      return t1;
    },
    applyProjection$1: function(arg) {
      var t1, _x, _y, _z, t2, t3, t4, t5, d;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t2 = arg.get$storage(arg);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t2 = t2[3];
      t3 = arg.get$storage(arg);
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t3 = t3[7];
      t4 = arg.get$storage(arg);
      if (11 >= t4.length)
        return H.ioore(t4, 11);
      t4 = t4[11];
      t5 = arg.get$storage(arg);
      if (15 >= t5.length)
        return H.ioore(t5, 15);
      d = 1 / (t2 * _x + t3 * _y + t4 * _z + t5[15]);
      t5 = arg.get$storage(arg);
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      t5 = t5[0];
      t4 = arg.get$storage(arg);
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t4 = t4[4];
      t3 = arg.get$storage(arg);
      if (8 >= t3.length)
        return H.ioore(t3, 8);
      t3 = t3[8];
      t2 = arg.get$storage(arg);
      if (12 >= t2.length)
        return H.ioore(t2, 12);
      t1[0] = (t5 * _x + t4 * _y + t3 * _z + t2[12]) * d;
      t2 = arg.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      t3 = arg.get$storage(arg);
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t3 = t3[5];
      t4 = arg.get$storage(arg);
      if (9 >= t4.length)
        return H.ioore(t4, 9);
      t4 = t4[9];
      t5 = arg.get$storage(arg);
      if (13 >= t5.length)
        return H.ioore(t5, 13);
      t1[1] = (t2 * _x + t3 * _y + t4 * _z + t5[13]) * d;
      t5 = arg.get$storage(arg);
      if (2 >= t5.length)
        return H.ioore(t5, 2);
      t5 = t5[2];
      t4 = arg.get$storage(arg);
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t4 = t4[6];
      t3 = arg.get$storage(arg);
      if (10 >= t3.length)
        return H.ioore(t3, 10);
      t3 = t3[10];
      t2 = arg.get$storage(arg);
      if (14 >= t2.length)
        return H.ioore(t2, 14);
      t1[2] = (t5 * _x + t4 * _y + t3 * _z + t2[14]) * d;
      return this;
    },
    add$1: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(arg);
      t4 = t3.get$storage(arg);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[0] = t2 + t4;
      t4 = t1[1];
      t2 = t3.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[1] = t4 + t2;
      t2 = t1[2];
      t3 = t3.get$storage(arg);
      if (2 >= t3.length)
        return H.ioore(t3, 2);
      t3 = t3[2];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[2] = t2 + t3;
      return this;
    },
    sub$1: function(arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.storage;
      t1[0] = t2 - t3[0];
      t1[1] = t1[1] - t3[1];
      t1[2] = t1[2] - t3[2];
      return this;
    },
    multiply$1: function(_, arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] * t2[0];
      t1[1] = t1[1] * t2[1];
      t1[2] = t1[2] * t2[2];
      return this;
    },
    scale$1: function(_, arg) {
      var t1 = this.storage;
      t1[2] = t1[2] * arg;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
      return this;
    },
    clone$0: function(_) {
      var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setFrom$1(this);
      return t1;
    },
    copyInto$1: function(arg) {
      var t1, t2;
      t1 = arg.storage;
      t2 = this.storage;
      t1[0] = t2[0];
      t1[1] = t2[1];
      t1[2] = t2[2];
      return arg;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    set$z: function(_, arg) {
      this.storage[2] = arg;
      return arg;
    },
    get$r: function(_) {
      return this.storage[0];
    },
    get$g: function() {
      return this.storage[1];
    },
    get$b: function(_) {
      return this.storage[2];
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    $isVector3: true
  },
  Vector4: {
    "^": "Object;storage>",
    setValues$4: function(x_, y_, z_, w_) {
      var t1 = this.storage;
      t1[3] = w_;
      t1[2] = z_;
      t1[1] = y_;
      t1[0] = x_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage(other);
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = other.get$storage(other);
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = other.get$storage(other);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = other.get$storage(other);
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $negate: function(_) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(-t2, -t3, -t4, -t1);
      return t5;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t9 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t9.setValues$4(t2 - t4, t5 - t6, t7 - t8, t1 - t3);
      return t9;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t9 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t9.setValues$4(t2 + t4, t5 + t6, t7 + t8, t1 + t3);
      return t9;
    },
    $div: function(_, scale) {
      var o, t1, t2, t3, t4, t5;
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(t2 * o, t3 * o, t4 * o, t1 * o);
      return t5;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(t2 * scale, t3 * scale, t4 * scale, t1 * scale);
      return t5;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1;
    },
    normalize$0: function(_) {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      t1[2] = t1[2] * l;
      t1[3] = t1[3] * l;
      return this;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(other);
      t4 = t3.get$storage(other);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[1];
      t6 = t3.get$storage(other);
      if (1 >= t6.length)
        return H.ioore(t6, 1);
      t6 = t6[1];
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t1[2];
      t8 = t3.get$storage(other);
      if (2 >= t8.length)
        return H.ioore(t8, 2);
      t8 = t8[2];
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1[3];
      t3 = t3.get$storage(other);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 * t4 + t5 * t6 + t7 * t8 + t1 * t3;
    },
    add$1: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = J.getInterceptor$x(arg);
      t4 = t3.get$storage(arg);
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4 = t4[0];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[0] = t2 + t4;
      t4 = t1[1];
      t2 = t3.get$storage(arg);
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t2 = t2[1];
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1[1] = t4 + t2;
      t2 = t1[2];
      t4 = t3.get$storage(arg);
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t4 = t4[2];
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1[2] = t2 + t4;
      t4 = t1[3];
      t3 = t3.get$storage(arg);
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t3 = t3[3];
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1[3] = t4 + t3;
      return this;
    },
    sub$1: function(arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t1[2] = t1[2] - t2[2];
      t3 = t1[3];
      if (3 >= 3)
        return H.ioore(t2, 3);
      t1[3] = t3 - t2[3];
      return this;
    },
    multiply$1: function(_, arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] * t2[0];
      t1[1] = t1[1] * t2[1];
      t1[2] = t1[2] * t2[2];
      t3 = t1[3];
      if (3 >= 3)
        return H.ioore(t2, 3);
      t1[3] = t3 * t2[3];
      return this;
    },
    scale$1: function(_, arg) {
      var t1 = this.storage;
      t1[0] = t1[0] * arg;
      t1[1] = t1[1] * arg;
      t1[2] = t1[2] * arg;
      t1[3] = t1[3] * arg;
      return this;
    },
    clone$0: function(_) {
      var t1 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t1.setFrom$1(this);
      return t1;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    set$z: function(_, arg) {
      this.storage[2] = arg;
      return arg;
    },
    get$r: function(_) {
      return this.storage[0];
    },
    get$g: function() {
      return this.storage[1];
    },
    get$b: function(_) {
      return this.storage[2];
    },
    get$a: function(_) {
      return this.storage[3];
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    get$w: function(_) {
      return this.storage[3];
    },
    $isVector4: true
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
;(function() {
  var TRUE = !0, _;
  _ = P.$int;
  _.$is$int = TRUE;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = P.$double;
  _.$is$double = TRUE;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = W.Node;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  _ = P.String;
  _.$isString = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.String];
  _.$isObject = TRUE;
  W._CSSValue.$isObject = TRUE;
  W.StyleSheet.$isObject = TRUE;
  W.SpeechRecognitionResult.$isObject = TRUE;
  W.Gamepad.$isObject = TRUE;
  W.CssRule.$isObject = TRUE;
  P.Rectangle.$isObject = TRUE;
  W.Touch.$isObject = TRUE;
  W.TextTrack.$isObject = TRUE;
  W.TextTrackCue.$isObject = TRUE;
  W.SpeechGrammar.$isObject = TRUE;
  W.SourceBuffer.$isObject = TRUE;
  W.Plugin.$isObject = TRUE;
  W.MimeType.$isObject = TRUE;
  W.File.$isObject = TRUE;
  W.Entry.$isObject = TRUE;
  P.Transform.$isObject = TRUE;
  P.PathSeg.$isObject = TRUE;
  P.Number.$isObject = TRUE;
  P.Length.$isObject = TRUE;
  _ = P.Map;
  _.$isMap = TRUE;
  _.$isObject = TRUE;
  _ = P.num;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = P.Duration;
  _.$isDuration = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.Duration];
  _.$isObject = TRUE;
  _ = W.Element;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  P.Match.$isObject = TRUE;
  _ = S.Object3D;
  _.$isObject3D = TRUE;
  _.$isObject = TRUE;
  N.Enemy.$isObject = TRUE;
  _ = W.NodeValidator;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = T.Vector3;
  _.$isVector3 = TRUE;
  _.$isObject = TRUE;
  P.Database.$isObject = TRUE;
  _ = P.bool;
  _.$isbool = TRUE;
  _.$isObject = TRUE;
  S.UV.$isObject = TRUE;
  W.HttpRequest.$isObject = TRUE;
  S.Material.$isObject = TRUE;
  _ = P.List;
  _.$isList = TRUE;
  _.$isIterable = TRUE;
  _.$isObject = TRUE;
  _ = S.Mesh;
  _.$isMesh = TRUE;
  _.$isObject3D = TRUE;
  _.$isObject = TRUE;
  Q.AudioClip.$isObject = TRUE;
  Q.AudioSource.$isObject = TRUE;
  _ = P.Future;
  _.$isFuture = TRUE;
  _.$isObject = TRUE;
  P.AudioBuffer.$isObject = TRUE;
  Q.AudioEffect.$isObject = TRUE;
  Q.AudioSound.$isObject = TRUE;
  _ = P.Symbol;
  _.$isSymbol = TRUE;
  _.$isObject = TRUE;
  Q.Drawable.$isObject = TRUE;
  S.Color.$isObject = TRUE;
  S.Texture.$isObject = TRUE;
  _ = T.Vector4;
  _.$isVector4 = TRUE;
  _.$isObject = TRUE;
  _ = T.Vector2;
  _.$isVector2 = TRUE;
  _.$isObject = TRUE;
  _ = T.Matrix4;
  _.$isMatrix4 = TRUE;
  _.$isObject = TRUE;
  H.RawReceivePortImpl.$isObject = TRUE;
  H._IsolateEvent.$isObject = TRUE;
  H._IsolateContext.$isObject = TRUE;
  _ = S.Face;
  _.$isFace = TRUE;
  _.$isObject = TRUE;
  _ = P.StackTrace;
  _.$isStackTrace = TRUE;
  _.$isObject = TRUE;
  P.Object.$isObject = TRUE;
  _ = W.KeyboardEvent;
  _.$isKeyboardEvent = TRUE;
  _.$isObject = TRUE;
  _ = S.Uniform;
  _.$isUniform = TRUE;
  _.$isObject = TRUE;
  _ = W._Html5NodeValidator;
  _.$is_Html5NodeValidator = TRUE;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = P.Comparable;
  _.$isComparable = TRUE;
  _.$isObject = TRUE;
  _ = W.MouseEvent;
  _.$isMouseEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.AsyncError;
  _.$isAsyncError = TRUE;
  _.$isObject = TRUE;
  _ = P._EventSink;
  _.$is_EventSink = TRUE;
  _.$isObject = TRUE;
  _ = P._DelayedEvent;
  _.$is_DelayedEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.DateTime;
  _.$isDateTime = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [null];
  _.$isObject = TRUE;
  _ = P.StreamSubscription;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = W.HtmlElement;
  _.$isHtmlElement = TRUE;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  _ = T.Quaternion;
  _.$isQuaternion = TRUE;
  _.$isObject = TRUE;
  _ = P.Iterable;
  _.$isIterable = TRUE;
  _.$isObject = TRUE;
  _ = P.Stream;
  _.$isStream = TRUE;
  _.$isObject = TRUE;
  _ = P.Function;
  _.$isFunction = TRUE;
  _.$isObject = TRUE;
  _ = S.Scene;
  _.$isScene = TRUE;
  _.$isObject3D = TRUE;
  _.$isObject = TRUE;
  _ = S.Camera;
  _.$isCamera = TRUE;
  _.$isObject3D = TRUE;
  _.$isObject = TRUE;
  _ = T.Matrix3;
  _.$isMatrix3 = TRUE;
  _.$isObject = TRUE;
  _ = W.RtcStatsReport;
  _.$isRtcStatsReport = TRUE;
  _.$isObject = TRUE;
  _ = W.FontFace;
  _.$isFontFace = TRUE;
  _.$isObject = TRUE;
  _ = W.DataTransferItem;
  _.$isDataTransferItem = TRUE;
  _.$isObject = TRUE;
  _ = P.Index;
  _.$isIndex = TRUE;
  _.$isObject = TRUE;
  _ = P.Matrix;
  _.$isMatrix = TRUE;
  _.$isObject = TRUE;
})();
;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.__isolate_helper$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).__isolate_helper$_add$1(receiver, a0);
};
J._async$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.activeTexture$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.attachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindFramebuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
};
J.bindRenderbuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindRenderbuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.blendEquation$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).blendEquation$1(receiver, a0);
};
J.blendEquationSeparate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendEquationSeparate$2(receiver, a0, a1);
};
J.blendFunc$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendFunc$2(receiver, a0, a1);
};
J.blendFuncSeparate$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).blendFuncSeparate$4(receiver, a0, a1, a2, a3);
};
J.bufferDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferDataTyped$3(receiver, a0, a1, a2);
};
J.checkMutable$1$a = function(receiver, a0) {
  return J.getInterceptor$a(receiver).checkMutable$1(receiver, a0);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.clearDepth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearDepth$1(receiver, a0);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.clearStencil$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearStencil$1(receiver, a0);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.compileShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.createFramebuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createFramebuffer$0(receiver);
};
J.createGain$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createGain$0(receiver);
};
J.createProgram$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createProgram$0(receiver);
};
J.createRenderbuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createRenderbuffer$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.createTexture$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createTexture$0(receiver);
};
J.cullFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).cullFace$1(receiver, a0);
};
J.decodeAudioData$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).decodeAudioData$1(receiver, a0);
};
J.deleteShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).deleteShader$1(receiver, a0);
};
J.depthFunc$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthFunc$1(receiver, a0);
};
J.depthMask$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthMask$1(receiver, a0);
};
J.disable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disable$1(receiver, a0);
};
J.disableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disableVertexAttribArray$1(receiver, a0);
};
J.drawArrays$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
};
J.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.fold$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.framebufferRenderbuffer$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).framebufferRenderbuffer$4(receiver, a0, a1, a2, a3);
};
J.framebufferTexture2D$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).framebufferTexture2D$5(receiver, a0, a1, a2, a3, a4);
};
J.frontFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).frontFace$1(receiver, a0);
};
J.generateMipmap$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).generateMipmap$1(receiver, a0);
};
J.get$_key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_key(receiver);
};
J.get$alpha$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$alpha(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$blendEquation$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$blendEquation(receiver);
};
J.get$buffer$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$buffer(receiver);
};
J.get$button$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$button(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$color$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$color(receiver);
};
J.get$completed$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$completed(receiver);
};
J.get$duration$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$duration(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$gain$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$gain(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isInfinite$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isInfinite(receiver);
};
J.get$isNaN$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNaN(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$keys$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keys(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$map$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$map(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$next$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$next(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$opacity$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$opacity(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$polygonOffset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$polygonOffset(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$response$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$response(receiver);
};
J.get$result$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$result(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.get$storage$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$storage(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$visible$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$visible(receiver);
};
J.get$w$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$w(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.get$z$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$z(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil(receiver, a0, a1, a2, a3, a4);
};
J.getError$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getError$0(receiver);
};
J.getExtension$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getExtension$1(receiver, a0);
};
J.getParameter$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getParameter$1(receiver, a0);
};
J.getProgramParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
J.getShaderInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
J.getShaderParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
J.getShaderPrecisionFormat$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderPrecisionFormat$2(receiver, a0, a1);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.lineWidth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).lineWidth$1(receiver, a0);
};
J.linkProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
J.load$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).load$0(receiver);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.normalize$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).normalize$0(receiver);
};
J.pixelStorei$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).pixelStorei$2(receiver, a0, a1);
};
J.polygonOffset$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).polygonOffset$2(receiver, a0, a1);
};
J.preload$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preload$0(receiver);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.renderbufferStorage$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).renderbufferStorage$4(receiver, a0, a1, a2, a3);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$alpha$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$alpha(receiver, value);
};
J.set$borderColor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$borderColor(receiver, value);
};
J.set$bottom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$bottom(receiver, value);
};
J.set$content$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$content(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$id$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$id(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$next$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$next(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$pause$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$pause(receiver, value);
};
J.set$pointerEvents$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$pointerEvents(receiver, value);
};
J.set$points$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$points(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$right$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$right(receiver, value);
};
J.set$size$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$size(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$state$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$state(receiver, value);
};
J.set$textAlign$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textAlign(receiver, value);
};
J.set$textBaseline$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textBaseline(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$visible$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$visible(receiver, value);
};
J.set$volume$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$volume(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setPosition$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setPosition$3(receiver, a0, a1, a2);
};
J.setVelocity$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setVelocity$3(receiver, a0, a1, a2);
};
J.shaderSource$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.start$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).start$1(receiver, a0);
};
J.start$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).start$3(receiver, a0, a1, a2);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.texImage2D$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2D$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DCanvas$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DCanvas$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DImage$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DImage$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DTyped$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).texImage2DTyped$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.texImage2DVideo$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DVideo$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texParameterf$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameterf$3(receiver, a0, a1, a2);
};
J.texParameteri$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.uniform1f$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1f$2(receiver, a0, a1);
};
J.uniform1fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1fv$2(receiver, a0, a1);
};
J.uniform1i$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1i$2(receiver, a0, a1);
};
J.uniform1iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1iv$2(receiver, a0, a1);
};
J.uniform2f$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2f$3(receiver, a0, a1, a2);
};
J.uniform2fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform2fv$2(receiver, a0, a1);
};
J.uniform3f$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).uniform3f$4(receiver, a0, a1, a2, a3);
};
J.uniform3fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3fv$2(receiver, a0, a1);
};
J.uniform3iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3iv$2(receiver, a0, a1);
};
J.uniform4f$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).uniform4f$5(receiver, a0, a1, a2, a3, a4);
};
J.uniform4fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
J.uniformMatrix2fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix2fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix3fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix3fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
J.write$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).write$1(receiver, a0);
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = Array;
  list.fixed$length = Array;
  return list;
};
;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_oRe = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
C.List_empty = Isolate.makeConstantList([]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
C.Map_yTOCB = new H.GeneralConstantMap([0, "TrainState.LookupLane", 1, "TrainState.ColorLane", 2, "TrainState.Drive", 3, "TrainState.UncolorLane", 4, "TrainState.Done"]);
C.Symbol_call = new H.Symbol0("call");
C.TrainState_0 = new K.TrainState(0);
C.TrainState_1 = new K.TrainState(1);
C.TrainState_2 = new K.TrainState(2);
C.TrainState_3 = new K.TrainState(3);
C.TrainState_4 = new K.TrainState(4);
init.isHunkLoaded = function(hunkHash) {
  return !!$dart_deferred_initializers[hunkHash];
};
init.initializeLoadedHunk = function(hunkHash) {
  $dart_deferred_initializers[hunkHash](globalsHolder, $);
};
init.deferredLibraryUris = {};
init.deferredLibraryHashes = {};
$.Enemy_particles = null;
$.EnemyOrb_mat = null;
$.EnemyOrb_outMat = null;
$.EnemyOrb_outMatAlt = null;
$.EnemyOrb_geo = null;
$.GameContext_score = 0;
$.GameContext_displayScore = 0;
$.GameContext_lastScore = 0;
$.GameContext_scorePerLevel = 250;
$.GameContext_totalScore = 0;
$.GameContext_minX = null;
$.GameContext_maxX = null;
$.GameContext_minZ = null;
$.GameContext_maxZ = null;
$.GameContext_moveSpeed = 0.4;
$.GunOrb_particles = null;
$.Roller_torusGeo = null;
$.Roller_cylinderGeo = null;
$.Train_geo = null;
$.Train_nextTrainNum = 0;
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.debugDiv = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.AudioManager_positionalScale = 1;
$.AudioManager_minDistance = 0;
$.Frustum____v1 = null;
$.Ray_parallels = 0;
$.Ray_checkedFaces = 0;
$.Ray_intersectCount = 0;
$.WebGLRenderer_programLinkFailed = false;
$.__ShaderChunk = null;
$.__UniformsLib = null;
$.__ShaderLib = null;
$.GeometryCount = 0;
$.Object3DCount = 0;
$.MaterialCount = 0;
$.TextureCount = 0;
Isolate.$lazy($, "reservedTiles", "Area_reservedTiles", "get$Area_reservedTiles", function() {
  return H.setRuntimeTypeInfo([], [P.String]);
});
Isolate.$lazy($, "safeColor", "Area_safeColor", "get$Area_safeColor", function() {
  return S.Color$(4685308);
});
Isolate.$lazy($, "spawnColor", "Area_spawnColor", "get$Area_spawnColor", function() {
  return S.Color$(10027008);
});
Isolate.$lazy($, "enemies", "Enemy_enemies", "get$Enemy_enemies", function() {
  return [];
});
Isolate.$lazy($, "center", "GameContext_center", "get$GameContext_center", function() {
  return new T.Vector3(new Float32Array(H._checkLength(3)));
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P._wrapToDart(self);
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return H.getIsolateAffinityTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return H.getIsolateAffinityTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) {
    this.o = o;
  };
});
Isolate.$lazy($, "__projector", "CameraHelper___projector", "get$CameraHelper___projector", function() {
  return S.Projector$();
});
Isolate.$lazy($, "__v", "CameraHelper___v", "get$CameraHelper___v", function() {
  return new T.Vector3(new Float32Array(H._checkLength(3)));
});
Isolate.$lazy($, "__c", "CameraHelper___c", "get$CameraHelper___c", function() {
  return S.Camera$(0, 0);
});

// Native classes

init.metadata = [{func: "Future_", ret: P.Future},
{func: "List_", ret: [P.List, W.RtcStatsReport]},
{func: "void___Object", void: true, opt: [P.Object]},
,
{func: "Future___dynamic", ret: [P.Future, P.$int], opt: [null]},
"key_OR_range",
{func: "Matrix_", ret: P.Matrix},
"when",
"grainOffset",
"grainDuration",
{func: "void__int", void: true, args: [P.$int]},
"mode",
{func: "void__num_num", void: true, args: [P.num, P.num]},
"factor",
"units",
"object",
"sender",
"e",
{func: "dynamic__String", args: [P.String]},
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void_", void: true},
{func: "void__dynamic", void: true, args: [null]},
"value",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
"error",
"stackTrace",
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
"a",
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "args1", args: [null]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]},
"element",
"attributeName",
"context",
"callback",
"captureThis",
"self",
"arguments",
"o",
{func: "Object__dynamic", ret: P.Object, args: [null]},
{func: "dynamic__KeyboardEvent", args: [W.KeyboardEvent]},
{func: "dynamic__MouseEvent", args: [W.MouseEvent]},
{func: "dynamic__int_int", args: [P.$int, P.$int]},
"_movX",
"_movY",
{func: "args0"},
{func: "dynamic__double", args: [P.$double]},
"time",
"b",
"me",
{func: "dynamic__Mesh", args: [S.Mesh]},
{func: "args2", args: [null, null]},
"invocation",
"f",
{func: "dynamic__String_dynamic", args: [P.String, null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
"_",
{func: "dynamic__void_", args: [{func: "void_", void: true}]},
"theError",
"theStackTrace",
{func: "dynamic__Object", args: [P.Object]},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
"ignored",
"convert",
{func: "dynamic__bool", args: [P.bool]},
"data",
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"arg",
"each",
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: P.String, args: [P.$int]},
"attr",
{func: "void__Node", void: true, args: [W.Node]},
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__int_dynamic", args: [P.$int, null]},
"buffer",
{func: "dynamic__Scene_Camera__num_num", args: [S.Scene, S.Camera], opt: [P.num, P.num]},
"v",
{func: "dynamic__Vector3", args: [T.Vector3]},
"vertex",
{func: "dynamic__Face", args: [S.Face]},
"curMaxRadiusSq",
{func: "dynamic__num_Vector3", args: [P.num, T.Vector3]},
"idx",
"req",
"_creator",
"_obj",
{func: "dynamic__Scene_Camera", args: [S.Scene, S.Camera]},
{func: "dynamic__Map", args: [[P.Map, P.String, S.Uniform]]},
"k",
"uniform",
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = Object.create(null);
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties) {
        if (hasOwnProperty.call(properties, member)) {
          object[member] = properties[member];
        }
      }
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = Object.create(null);
    var allClasses = init.allClasses;
    var constructors;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      var desc = collectedClasses[cls];
      if (desc instanceof Array)
        desc = desc[1];
      var classData = desc["^"], supr, name = cls, fields = classData;
      if (typeof classData == "string") {
        var split = classData.split("/");
        if (split.length == 2) {
          name = split[0];
          fields = split[1];
        }
      }
      var s = fields.split(";");
      fields = s[1] == "" ? [] : s[1].split(",");
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          desc.$signature = function(s) {
            return function() {
              return init.metadata[s];
            };
          }(functionSignature);
      }
      if (supr && supr.indexOf("+") > 0) {
        s = supr.split("+");
        supr = s[0];
        var mixin = collectedClasses[s[1]];
        if (mixin instanceof Array)
          mixin = mixin[1];
        for (var d in mixin) {
          if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
            desc[d] = mixin[d];
        }
      }
      if (typeof dart_precompiled != "function") {
        combinedConstructorFunction += defineClass(name, cls, fields);
        constructorsList.push(cls);
      }
      if (supr)
        pendingClasses[cls] = supr;
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = init.finishedClasses;
    function finishClass(cls) {
      if (finishedClasses[cls])
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  (function() {
    init.allClasses = Object.create(null);
    init.interceptorsByTag = Object.create(null);
    init.leafTags = Object.create(null);
    init.finishedClasses = Object.create(null);
  })();
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = Object.create(null);
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      var lazies = init.lazies;
      for (var lazyInit in lazies) {
        this[lazies[lazyInit]] = null;
      }
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
      for (var lazyInit in lazies) {
        var lazyInitName = lazies[lazyInit];
        this[lazyInitName] = isolateProperties[lazyInitName];
      }
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(L.main$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(L.main$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
})()

//# sourceMappingURL=dartwebglplayground.dart.js.map
